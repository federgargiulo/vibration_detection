
continuo_SPI_cube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008780  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  08008940  08008940  00018940  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e5c  08008e5c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e5c  08008e5c  00018e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e64  08008e64  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e68  08008e68  00018e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201dc  2**0
                  CONTENTS
 10 .bss          00017b38  200001dc  200001dc  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20017d14  20017d14  000201dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e01  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b20  00000000  00000000  0003300d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  00035b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef8  00000000  00000000  00036b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002abaf  00000000  00000000  00037a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e8d  00000000  00000000  00062607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9d4e  00000000  00000000  00076494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001701e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005438  00000000  00000000  00170234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008928 	.word	0x08008928

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08008928 	.word	0x08008928

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <MX_DMA_Init+0x3c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a0b      	ldr	r2, [pc, #44]	; (8000f18 <MX_DMA_Init+0x3c>)
 8000eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <MX_DMA_Init+0x3c>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	2010      	movs	r0, #16
 8000f04:	f001 f945 	bl	8002192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000f08:	2010      	movs	r0, #16
 8000f0a:	f001 f95e 	bl	80021ca <HAL_NVIC_EnableIRQ>

}
 8000f0e:	bf00      	nop
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	40023800 	.word	0x40023800

08000f1c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08c      	sub	sp, #48	; 0x30
 8000f20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
 8000f30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	4b4d      	ldr	r3, [pc, #308]	; (800106c <MX_GPIO_Init+0x150>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a4c      	ldr	r2, [pc, #304]	; (800106c <MX_GPIO_Init+0x150>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b4a      	ldr	r3, [pc, #296]	; (800106c <MX_GPIO_Init+0x150>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	4b46      	ldr	r3, [pc, #280]	; (800106c <MX_GPIO_Init+0x150>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	4a45      	ldr	r2, [pc, #276]	; (800106c <MX_GPIO_Init+0x150>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5e:	4b43      	ldr	r3, [pc, #268]	; (800106c <MX_GPIO_Init+0x150>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
 8000f68:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b3f      	ldr	r3, [pc, #252]	; (800106c <MX_GPIO_Init+0x150>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a3e      	ldr	r2, [pc, #248]	; (800106c <MX_GPIO_Init+0x150>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b3c      	ldr	r3, [pc, #240]	; (800106c <MX_GPIO_Init+0x150>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <MX_GPIO_Init+0x150>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a37      	ldr	r2, [pc, #220]	; (800106c <MX_GPIO_Init+0x150>)
 8000f90:	f043 0308 	orr.w	r3, r3, #8
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b35      	ldr	r3, [pc, #212]	; (800106c <MX_GPIO_Init+0x150>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0308 	and.w	r3, r3, #8
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	4b31      	ldr	r3, [pc, #196]	; (800106c <MX_GPIO_Init+0x150>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a30      	ldr	r2, [pc, #192]	; (800106c <MX_GPIO_Init+0x150>)
 8000fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <MX_GPIO_Init+0x150>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fba:	60bb      	str	r3, [r7, #8]
 8000fbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b2a      	ldr	r3, [pc, #168]	; (800106c <MX_GPIO_Init+0x150>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a29      	ldr	r2, [pc, #164]	; (800106c <MX_GPIO_Init+0x150>)
 8000fc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b27      	ldr	r3, [pc, #156]	; (800106c <MX_GPIO_Init+0x150>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4824      	ldr	r0, [pc, #144]	; (8001070 <MX_GPIO_Init+0x154>)
 8000fe0:	f001 fe36 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fea:	4822      	ldr	r0, [pc, #136]	; (8001074 <MX_GPIO_Init+0x158>)
 8000fec:	f001 fe30 	bl	8002c50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG4 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8000ff0:	2318      	movs	r3, #24
 8000ff2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4619      	mov	r1, r3
 8001004:	481a      	ldr	r0, [pc, #104]	; (8001070 <MX_GPIO_Init+0x154>)
 8001006:	f001 fc77 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800100a:	2304      	movs	r3, #4
 800100c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4813      	ldr	r0, [pc, #76]	; (8001070 <MX_GPIO_Init+0x154>)
 8001022:	f001 fc69 	bl	80028f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001026:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001034:	2300      	movs	r3, #0
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001038:	f107 031c 	add.w	r3, r7, #28
 800103c:	4619      	mov	r1, r3
 800103e:	480d      	ldr	r0, [pc, #52]	; (8001074 <MX_GPIO_Init+0x158>)
 8001040:	f001 fc5a 	bl	80028f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001044:	2200      	movs	r2, #0
 8001046:	2100      	movs	r1, #0
 8001048:	2009      	movs	r0, #9
 800104a:	f001 f8a2 	bl	8002192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800104e:	2009      	movs	r0, #9
 8001050:	f001 f8bb 	bl	80021ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001054:	2200      	movs	r2, #0
 8001056:	2100      	movs	r1, #0
 8001058:	200a      	movs	r0, #10
 800105a:	f001 f89a 	bl	8002192 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800105e:	200a      	movs	r0, #10
 8001060:	f001 f8b3 	bl	80021ca <HAL_NVIC_EnableIRQ>

}
 8001064:	bf00      	nop
 8001066:	3730      	adds	r7, #48	; 0x30
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40023800 	.word	0x40023800
 8001070:	40021800 	.word	0x40021800
 8001074:	40020c00 	.word	0x40020c00

08001078 <uprintf>:
/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

//Ho creato una funzione che mi semplifica la scrittura sulla COM di messaggi
void uprintf(char* str){
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*)str, strlen(str), 100);
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff f8bd 	bl	8000200 <strlen>
 8001086:	4603      	mov	r3, r0
 8001088:	b29a      	uxth	r2, r3
 800108a:	2364      	movs	r3, #100	; 0x64
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4803      	ldr	r0, [pc, #12]	; (800109c <uprintf+0x24>)
 8001090:	f003 fd6f 	bl	8004b72 <HAL_UART_Transmit>
}
 8001094:	bf00      	nop
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20017c18 	.word	0x20017c18

080010a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	f5ad 4d3b 	sub.w	sp, sp, #47872	; 0xbb00
 80010a6:	b0a8      	sub	sp, #160	; 0xa0
 80010a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	spiSndX[0]=0x29|0x80;			//Indirizzo Lettura X MSB
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <main+0xc4>)
 80010ac:	22a9      	movs	r2, #169	; 0xa9
 80010ae:	701a      	strb	r2, [r3, #0]
    spiSndY[0]=0x2B|0x80;			//Indirizzo Lettura Y MSB
 80010b0:	4b2d      	ldr	r3, [pc, #180]	; (8001168 <main+0xc8>)
 80010b2:	22ab      	movs	r2, #171	; 0xab
 80010b4:	701a      	strb	r2, [r3, #0]
	spiSndZ[0]=0x2D|0x80;			//Indirizzo Lettura Z MSB
 80010b6:	4b2d      	ldr	r3, [pc, #180]	; (800116c <main+0xcc>)
 80010b8:	22ad      	movs	r2, #173	; 0xad
 80010ba:	701a      	strb	r2, [r3, #0]
	spiSndXLSB[0]=0x28|0x80;		//Indirizzo Lettura X LSB
 80010bc:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <main+0xd0>)
 80010be:	22a8      	movs	r2, #168	; 0xa8
 80010c0:	701a      	strb	r2, [r3, #0]
	spiSndYLSB[0]=0x2A|0x80;		//Indirizzo Lettura Y LSB
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <main+0xd4>)
 80010c4:	22aa      	movs	r2, #170	; 0xaa
 80010c6:	701a      	strb	r2, [r3, #0]
	spiSndZLSB[0]=0x2C|0x80;		//Indirizzo Lettura Z LSB
 80010c8:	4b2b      	ldr	r3, [pc, #172]	; (8001178 <main+0xd8>)
 80010ca:	22ac      	movs	r2, #172	; 0xac
 80010cc:	701a      	strb	r2, [r3, #0]
	uint16_t x[DIM];				//Vettore intero 16bit misura Accelerazione Asse X
	uint16_t y[DIM];				//Vettore intero 16bit misura Accelerazione Asse Y
	uint16_t z[DIM];				//Vettore intero 16bit misura Accelerazione Asse Z
	int16_t k=0;					//Variabile usata per il casting
 80010ce:	2300      	movs	r3, #0
 80010d0:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80010d4:	f102 028e 	add.w	r2, r2, #142	; 0x8e
 80010d8:	8013      	strh	r3, [r2, #0]
	float acc;						//Accelerazione istantanea ad asse
	float typ=0.488;
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <main+0xdc>)
 80010dc:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80010e0:	f102 0288 	add.w	r2, r2, #136	; 0x88
 80010e4:	6013      	str	r3, [r2, #0]
	int i=0;						//Variabile di appoggio while
 80010e6:	2300      	movs	r3, #0
 80010e8:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80010ec:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 80010f0:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010f2:	f000 ff01 	bl	8001ef8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f6:	f000 fad1 	bl	800169c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010fa:	f7ff ff0f 	bl	8000f1c <MX_GPIO_Init>
  MX_DMA_Init();
 80010fe:	f7ff feed 	bl	8000edc <MX_DMA_Init>
  MX_SPI1_Init();
 8001102:	f000 fb43 	bl	800178c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001106:	f000 fdcb 	bl	8001ca0 <MX_USART2_UART_Init>
  MX_UART5_Init();
 800110a:	f000 fd9f 	bl	8001c4c <MX_UART5_Init>
  MX_TIM2_Init();
 800110e:	f000 fd29 	bl	8001b64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    HAL_UART_MspInit(&huart5);			//Inizializzo UART5
 8001112:	481b      	ldr	r0, [pc, #108]	; (8001180 <main+0xe0>)
 8001114:	f000 fdee 	bl	8001cf4 <HAL_UART_MspInit>

    //Messaggio di Boot COM
    uprintf("/******  Misuratore Assiale di Accelerazione  ******/ \n \r");
 8001118:	481a      	ldr	r0, [pc, #104]	; (8001184 <main+0xe4>)
 800111a:	f7ff ffad 	bl	8001078 <uprintf>
    uprintf("/****   Programma Realizzato da Salvatore Granata    ****/ \n \r");
 800111e:	481a      	ldr	r0, [pc, #104]	; (8001188 <main+0xe8>)
 8001120:	f7ff ffaa 	bl	8001078 <uprintf>
    uprintf("/****   Ingegneria dell'Automazione   ****/ \n \r");
 8001124:	4819      	ldr	r0, [pc, #100]	; (800118c <main+0xec>)
 8001126:	f7ff ffa7 	bl	8001078 <uprintf>
    uprintf("Sensore Avviato e pronto per misure \n \r");
 800112a:	4819      	ldr	r0, [pc, #100]	; (8001190 <main+0xf0>)
 800112c:	f7ff ffa4 	bl	8001078 <uprintf>

   /*1. Abilito lo slave portando la linea CS/SS Bassa*/
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	   /*1. Abilita lo Slave settando CS Basso lo stato dell'IIS3DWB */
 8001130:	2200      	movs	r2, #0
 8001132:	2104      	movs	r1, #4
 8001134:	4817      	ldr	r0, [pc, #92]	; (8001194 <main+0xf4>)
 8001136:	f001 fd8b 	bl	8002c50 <HAL_GPIO_WritePin>

   /*2. Trasmetto indirizzo registro e dati */
    spiSnd[0]=0x10;												//Indirizzo Registro CTRL1_XL (Abilita l'accelerometro)
 800113a:	4b17      	ldr	r3, [pc, #92]	; (8001198 <main+0xf8>)
 800113c:	2210      	movs	r2, #16
 800113e:	701a      	strb	r2, [r3, #0]
    spiSnd[1]=0xA4;												//Scrivo 101 all'inizio del registro per abilitarlo e poi tutti zero (accelerometro scala +-2g)
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <main+0xf8>)
 8001142:	22a4      	movs	r2, #164	; 0xa4
 8001144:	705a      	strb	r2, [r3, #1]
    HAL_SPI_Transmit(&hspi1, spiSnd, 2, 100);					//Invio messaggio allo slave per effettuare l'abilitazione abilitazione
 8001146:	2364      	movs	r3, #100	; 0x64
 8001148:	2202      	movs	r2, #2
 800114a:	4913      	ldr	r1, [pc, #76]	; (8001198 <main+0xf8>)
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <main+0xfc>)
 800114e:	f002 fafa 	bl	8003746 <HAL_SPI_Transmit>

   /*3. Disabilito lo slave portando la linea CS/SS Alta*/		//Inviata l'istruzione di abilitazione dell'accelerometro,
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);			//Chiudo la comunicazione
 8001152:	2201      	movs	r2, #1
 8001154:	2104      	movs	r1, #4
 8001156:	480f      	ldr	r0, [pc, #60]	; (8001194 <main+0xf4>)
 8001158:	f001 fd7a 	bl	8002c50 <HAL_GPIO_WritePin>

    HAL_TIM_Base_Start(&htim2);									//Faccio partire il timer
 800115c:	4810      	ldr	r0, [pc, #64]	; (80011a0 <main+0x100>)
 800115e:	f003 f861 	bl	8004224 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (i<DIM)
 8001162:	e1d5      	b.n	8001510 <main+0x470>
 8001164:	200001f8 	.word	0x200001f8
 8001168:	200001fc 	.word	0x200001fc
 800116c:	20000200 	.word	0x20000200
 8001170:	20000204 	.word	0x20000204
 8001174:	20000208 	.word	0x20000208
 8001178:	2000020c 	.word	0x2000020c
 800117c:	3ef9db23 	.word	0x3ef9db23
 8001180:	20017c18 	.word	0x20017c18
 8001184:	08008940 	.word	0x08008940
 8001188:	0800897c 	.word	0x0800897c
 800118c:	080089bc 	.word	0x080089bc
 8001190:	080089ec 	.word	0x080089ec
 8001194:	40021800 	.word	0x40021800
 8001198:	20000214 	.word	0x20000214
 800119c:	20017b74 	.word	0x20017b74
 80011a0:	20017bd0 	.word	0x20017bd0
  {
	 if(flag_elapsed=1)											//La funzione di interrupt abilita il flag per ogni n conteggi selezionati
 80011a4:	4bcb      	ldr	r3, [pc, #812]	; (80014d4 <main+0x434>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
	 {
		 flag_elapsed=0;										//flag=0 in modo che non rientro ma aspetto che sia l'interrupt ad alzarlo
 80011aa:	4bca      	ldr	r3, [pc, #808]	; (80014d4 <main+0x434>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]

		//Asse X
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito SPI1
 80011b0:	2200      	movs	r2, #0
 80011b2:	2104      	movs	r1, #4
 80011b4:	48c8      	ldr	r0, [pc, #800]	; (80014d8 <main+0x438>)
 80011b6:	f001 fd4b 	bl	8002c50 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, spiSndX, 1, 100);				//Trasmetto Indirizzo dove leggere istruzione
 80011ba:	2364      	movs	r3, #100	; 0x64
 80011bc:	2201      	movs	r2, #1
 80011be:	49c7      	ldr	r1, [pc, #796]	; (80014dc <main+0x43c>)
 80011c0:	48c7      	ldr	r0, [pc, #796]	; (80014e0 <main+0x440>)
 80011c2:	f002 fac0 	bl	8003746 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRcv[0], 1, 100);			//Ricevo Risultato di misura MSB (8bit)
 80011c6:	2364      	movs	r3, #100	; 0x64
 80011c8:	2201      	movs	r2, #1
 80011ca:	49c6      	ldr	r1, [pc, #792]	; (80014e4 <main+0x444>)
 80011cc:	48c4      	ldr	r0, [pc, #784]	; (80014e0 <main+0x440>)
 80011ce:	f002 fbf6 	bl	80039be <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 80011d2:	2201      	movs	r2, #1
 80011d4:	2104      	movs	r1, #4
 80011d6:	48c0      	ldr	r0, [pc, #768]	; (80014d8 <main+0x438>)
 80011d8:	f001 fd3a 	bl	8002c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito la comunicazione SPI1 (NON POSSO FARE PIU OPERAZIONI CON UN'UNICA ATTIVAZIONE)
 80011dc:	2200      	movs	r2, #0
 80011de:	2104      	movs	r1, #4
 80011e0:	48bd      	ldr	r0, [pc, #756]	; (80014d8 <main+0x438>)
 80011e2:	f001 fd35 	bl	8002c50 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, spiSndXLSB, 1, 100);			//Trasmetto Indirizzo dove leggere istruzione
 80011e6:	2364      	movs	r3, #100	; 0x64
 80011e8:	2201      	movs	r2, #1
 80011ea:	49bf      	ldr	r1, [pc, #764]	; (80014e8 <main+0x448>)
 80011ec:	48bc      	ldr	r0, [pc, #752]	; (80014e0 <main+0x440>)
 80011ee:	f002 faaa 	bl	8003746 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRcv[1], 1, 100);			//Ricevo Risultato di misura LSB (8bit)
 80011f2:	2364      	movs	r3, #100	; 0x64
 80011f4:	2201      	movs	r2, #1
 80011f6:	49bd      	ldr	r1, [pc, #756]	; (80014ec <main+0x44c>)
 80011f8:	48b9      	ldr	r0, [pc, #740]	; (80014e0 <main+0x440>)
 80011fa:	f002 fbe0 	bl	80039be <HAL_SPI_Receive>
		x[i]=((int16_t)spiRcv[0] << 8) | spiRcv[1];				//Unisco MSB e LSB attraverso un'operazione di shift su 16bit
 80011fe:	4bb9      	ldr	r3, [pc, #740]	; (80014e4 <main+0x444>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	021b      	lsls	r3, r3, #8
 8001204:	b21a      	sxth	r2, r3
 8001206:	4bb7      	ldr	r3, [pc, #732]	; (80014e4 <main+0x444>)
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	b21b      	sxth	r3, r3
 800120c:	4313      	orrs	r3, r2
 800120e:	b21b      	sxth	r3, r3
 8001210:	b299      	uxth	r1, r3
 8001212:	f507 430b 	add.w	r3, r7, #35584	; 0x8b00
 8001216:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 800121a:	f6a3 639c 	subw	r3, r3, #3740	; 0xe9c
 800121e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8001222:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 800122c:	2201      	movs	r2, #1
 800122e:	2104      	movs	r1, #4
 8001230:	48a9      	ldr	r0, [pc, #676]	; (80014d8 <main+0x438>)
 8001232:	f001 fd0d 	bl	8002c50 <HAL_GPIO_WritePin>
		k=(int16_t)x[i];										//Casting da uint a int (abilitazione del segno, complemento)
 8001236:	f507 430b 	add.w	r3, r7, #35584	; 0x8b00
 800123a:	f103 03a0 	add.w	r3, r3, #160	; 0xa0
 800123e:	f6a3 639c 	subw	r3, r3, #3740	; 0xe9c
 8001242:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8001246:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 800124a:	6812      	ldr	r2, [r2, #0]
 800124c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001250:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8001254:	f102 028e 	add.w	r2, r2, #142	; 0x8e
 8001258:	8013      	strh	r3, [r2, #0]
		acc=(k*typ)/1000;										//Da datasheet, il dato letto, lo converto in scala g attraverso questo calcolo
 800125a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800125e:	f103 038e 	add.w	r3, r3, #142	; 0x8e
 8001262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800126e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001272:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8001276:	edd3 7a00 	vldr	s15, [r3]
 800127a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127e:	eddf 6a9c 	vldr	s13, [pc, #624]	; 80014f0 <main+0x450>
 8001282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001286:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800128a:	f103 0384 	add.w	r3, r3, #132	; 0x84
 800128e:	edc3 7a00 	vstr	s15, [r3]
		Vettx[i]=acc;											//Aggiungo la misura al vettore delle letture
 8001292:	4a98      	ldr	r2, [pc, #608]	; (80014f4 <main+0x454>)
 8001294:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001298:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	4413      	add	r3, r2
 80012a2:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80012a6:	f102 0284 	add.w	r2, r2, #132	; 0x84
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	601a      	str	r2, [r3, #0]
		//HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);			//Vado da capo


		spiRcv[0]=0;
 80012ae:	4b8d      	ldr	r3, [pc, #564]	; (80014e4 <main+0x444>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
		spiRcv[1]=0;
 80012b4:	4b8b      	ldr	r3, [pc, #556]	; (80014e4 <main+0x444>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	705a      	strb	r2, [r3, #1]
		//Asse Y
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito SPI1
 80012ba:	2200      	movs	r2, #0
 80012bc:	2104      	movs	r1, #4
 80012be:	4886      	ldr	r0, [pc, #536]	; (80014d8 <main+0x438>)
 80012c0:	f001 fcc6 	bl	8002c50 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, spiSndY, 1, 100);				//Trasmetto Indirizzo dove leggere istruzione
 80012c4:	2364      	movs	r3, #100	; 0x64
 80012c6:	2201      	movs	r2, #1
 80012c8:	498b      	ldr	r1, [pc, #556]	; (80014f8 <main+0x458>)
 80012ca:	4885      	ldr	r0, [pc, #532]	; (80014e0 <main+0x440>)
 80012cc:	f002 fa3b 	bl	8003746 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRcv[0], 1, 100);			//Ricevo Risultato di misura MSB (8bit)
 80012d0:	2364      	movs	r3, #100	; 0x64
 80012d2:	2201      	movs	r2, #1
 80012d4:	4983      	ldr	r1, [pc, #524]	; (80014e4 <main+0x444>)
 80012d6:	4882      	ldr	r0, [pc, #520]	; (80014e0 <main+0x440>)
 80012d8:	f002 fb71 	bl	80039be <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 80012dc:	2201      	movs	r2, #1
 80012de:	2104      	movs	r1, #4
 80012e0:	487d      	ldr	r0, [pc, #500]	; (80014d8 <main+0x438>)
 80012e2:	f001 fcb5 	bl	8002c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);	//Abilito la comunicazione SPI1 (NON POSSO FARE PIU OPERAZIONI CON UN'UNICA ATTIVAZIONE)
 80012e6:	2200      	movs	r2, #0
 80012e8:	2104      	movs	r1, #4
 80012ea:	487b      	ldr	r0, [pc, #492]	; (80014d8 <main+0x438>)
 80012ec:	f001 fcb0 	bl	8002c50 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, spiSndYLSB, 1, 100);			//Trasmetto Indirizzo dove leggere istruzione
 80012f0:	2364      	movs	r3, #100	; 0x64
 80012f2:	2201      	movs	r2, #1
 80012f4:	4981      	ldr	r1, [pc, #516]	; (80014fc <main+0x45c>)
 80012f6:	487a      	ldr	r0, [pc, #488]	; (80014e0 <main+0x440>)
 80012f8:	f002 fa25 	bl	8003746 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRcv[1], 1, 100);			//Ricevo Risultato di misura LSB (8bit)
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	2201      	movs	r2, #1
 8001300:	497a      	ldr	r1, [pc, #488]	; (80014ec <main+0x44c>)
 8001302:	4877      	ldr	r0, [pc, #476]	; (80014e0 <main+0x440>)
 8001304:	f002 fb5b 	bl	80039be <HAL_SPI_Receive>
		y[i]=((int16_t)spiRcv[0] << 8) | spiRcv[1];				//Unisco MSB e LSB attraverso un'operazione di shift su 16bit
 8001308:	4b76      	ldr	r3, [pc, #472]	; (80014e4 <main+0x444>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b21a      	sxth	r2, r3
 8001310:	4b74      	ldr	r3, [pc, #464]	; (80014e4 <main+0x444>)
 8001312:	785b      	ldrb	r3, [r3, #1]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	b21b      	sxth	r3, r3
 800131a:	b299      	uxth	r1, r3
 800131c:	f507 4397 	add.w	r3, r7, #19328	; 0x4b80
 8001320:	f103 0320 	add.w	r3, r3, #32
 8001324:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 8001328:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800132c:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8001330:	6812      	ldr	r2, [r2, #0]
 8001332:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);		//Chiudo la comunicazione SPI1
 8001336:	2201      	movs	r2, #1
 8001338:	2104      	movs	r1, #4
 800133a:	4867      	ldr	r0, [pc, #412]	; (80014d8 <main+0x438>)
 800133c:	f001 fc88 	bl	8002c50 <HAL_GPIO_WritePin>
		k=(int16_t)y[i];										//Casting da uint a int (abilitazione del segno, complemento)
 8001340:	f507 4397 	add.w	r3, r7, #19328	; 0x4b80
 8001344:	f103 0320 	add.w	r3, r3, #32
 8001348:	f6a3 531c 	subw	r3, r3, #3356	; 0xd1c
 800134c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8001350:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800135a:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800135e:	f102 028e 	add.w	r2, r2, #142	; 0x8e
 8001362:	8013      	strh	r3, [r2, #0]
		acc=(k*typ)/1000;										//Da datasheet, il dato letto, lo converto in scala g attraverso questo calcolo
 8001364:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001368:	f103 038e 	add.w	r3, r3, #142	; 0x8e
 800136c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001370:	ee07 3a90 	vmov	s15, r3
 8001374:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001378:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800137c:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8001380:	edd3 7a00 	vldr	s15, [r3]
 8001384:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001388:	eddf 6a59 	vldr	s13, [pc, #356]	; 80014f0 <main+0x450>
 800138c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001390:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001394:	f103 0384 	add.w	r3, r3, #132	; 0x84
 8001398:	edc3 7a00 	vstr	s15, [r3]
		Vetty[i]=acc;											//Aggiungo la misura al vettore delle letture
 800139c:	4a58      	ldr	r2, [pc, #352]	; (8001500 <main+0x460>)
 800139e:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80013a2:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80013b0:	f102 0284 	add.w	r2, r2, #132	; 0x84
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	601a      	str	r2, [r3, #0]
		//HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);			//Vado da capo

		spiRcv[0]=0;
 80013b8:	4b4a      	ldr	r3, [pc, #296]	; (80014e4 <main+0x444>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
		spiRcv[1]=0;
 80013be:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <main+0x444>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	705a      	strb	r2, [r3, #1]
		//Asse Z												//Si ripetono gli stessi commenti
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 80013c4:	2200      	movs	r2, #0
 80013c6:	2104      	movs	r1, #4
 80013c8:	4843      	ldr	r0, [pc, #268]	; (80014d8 <main+0x438>)
 80013ca:	f001 fc41 	bl	8002c50 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, spiSndZ, 1, 100);
 80013ce:	2364      	movs	r3, #100	; 0x64
 80013d0:	2201      	movs	r2, #1
 80013d2:	494c      	ldr	r1, [pc, #304]	; (8001504 <main+0x464>)
 80013d4:	4842      	ldr	r0, [pc, #264]	; (80014e0 <main+0x440>)
 80013d6:	f002 f9b6 	bl	8003746 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRcv[0], 1, 100);
 80013da:	2364      	movs	r3, #100	; 0x64
 80013dc:	2201      	movs	r2, #1
 80013de:	4941      	ldr	r1, [pc, #260]	; (80014e4 <main+0x444>)
 80013e0:	483f      	ldr	r0, [pc, #252]	; (80014e0 <main+0x440>)
 80013e2:	f002 faec 	bl	80039be <HAL_SPI_Receive>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2104      	movs	r1, #4
 80013ea:	483b      	ldr	r0, [pc, #236]	; (80014d8 <main+0x438>)
 80013ec:	f001 fc30 	bl	8002c50 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2104      	movs	r1, #4
 80013f4:	4838      	ldr	r0, [pc, #224]	; (80014d8 <main+0x438>)
 80013f6:	f001 fc2b 	bl	8002c50 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, spiSndZLSB, 1, 100);
 80013fa:	2364      	movs	r3, #100	; 0x64
 80013fc:	2201      	movs	r2, #1
 80013fe:	4942      	ldr	r1, [pc, #264]	; (8001508 <main+0x468>)
 8001400:	4837      	ldr	r0, [pc, #220]	; (80014e0 <main+0x440>)
 8001402:	f002 f9a0 	bl	8003746 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &spiRcv[1], 1, 100);
 8001406:	2364      	movs	r3, #100	; 0x64
 8001408:	2201      	movs	r2, #1
 800140a:	4938      	ldr	r1, [pc, #224]	; (80014ec <main+0x44c>)
 800140c:	4834      	ldr	r0, [pc, #208]	; (80014e0 <main+0x440>)
 800140e:	f002 fad6 	bl	80039be <HAL_SPI_Receive>
		z[i]=((int16_t)spiRcv[0] << 8) | spiRcv[1];
 8001412:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <main+0x444>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	021b      	lsls	r3, r3, #8
 8001418:	b21a      	sxth	r2, r3
 800141a:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <main+0x444>)
 800141c:	785b      	ldrb	r3, [r3, #1]
 800141e:	b21b      	sxth	r3, r3
 8001420:	4313      	orrs	r3, r2
 8001422:	b21b      	sxth	r3, r3
 8001424:	b299      	uxth	r1, r3
 8001426:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800142a:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 800142e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8001432:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8001436:	6812      	ldr	r2, [r2, #0]
 8001438:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, GPIO_PIN_SET);
 800143c:	2201      	movs	r2, #1
 800143e:	2104      	movs	r1, #4
 8001440:	4825      	ldr	r0, [pc, #148]	; (80014d8 <main+0x438>)
 8001442:	f001 fc05 	bl	8002c50 <HAL_GPIO_WritePin>
		k=(int16_t)z[i];
 8001446:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800144a:	f6a3 339c 	subw	r3, r3, #2972	; 0xb9c
 800144e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8001452:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800145c:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8001460:	f102 028e 	add.w	r2, r2, #142	; 0x8e
 8001464:	8013      	strh	r3, [r2, #0]
		acc=(k*typ)/1000;
 8001466:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800146a:	f103 038e 	add.w	r3, r3, #142	; 0x8e
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	ee07 3a90 	vmov	s15, r3
 8001476:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800147a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800147e:	f103 0388 	add.w	r3, r3, #136	; 0x88
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	ee27 7a27 	vmul.f32	s14, s14, s15
 800148a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80014f0 <main+0x450>
 800148e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001492:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001496:	f103 0384 	add.w	r3, r3, #132	; 0x84
 800149a:	edc3 7a00 	vstr	s15, [r3]
		Vettz[i]=acc;
 800149e:	4a1b      	ldr	r2, [pc, #108]	; (800150c <main+0x46c>)
 80014a0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80014a4:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	4413      	add	r3, r2
 80014ae:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80014b2:	f102 0284 	add.w	r2, r2, #132	; 0x84
 80014b6:	6812      	ldr	r2, [r2, #0]
 80014b8:	601a      	str	r2, [r3, #0]
		//HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);			//Vado da capo

	    i=i+1;															//Incremento la i per spostare le misure nel buffer
 80014ba:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80014be:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80014ca:	f102 029c 	add.w	r2, r2, #156	; 0x9c
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	e01e      	b.n	8001510 <main+0x470>
 80014d2:	bf00      	nop
 80014d4:	20017b70 	.word	0x20017b70
 80014d8:	40021800 	.word	0x40021800
 80014dc:	200001f8 	.word	0x200001f8
 80014e0:	20017b74 	.word	0x20017b74
 80014e4:	20000210 	.word	0x20000210
 80014e8:	20000204 	.word	0x20000204
 80014ec:	20000211 	.word	0x20000211
 80014f0:	447a0000 	.word	0x447a0000
 80014f4:	20000470 	.word	0x20000470
 80014f8:	200001fc 	.word	0x200001fc
 80014fc:	20000208 	.word	0x20000208
 8001500:	20008170 	.word	0x20008170
 8001504:	20000200 	.word	0x20000200
 8001508:	2000020c 	.word	0x2000020c
 800150c:	2000fe70 	.word	0x2000fe70
  while (i<DIM)
 8001510:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001514:	f103 039c 	add.w	r3, r3, #156	; 0x9c
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 800151e:	f6ff ae41 	blt.w	80011a4 <main+0x104>
	  }
  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
   HAL_TIM_Base_Stop(&htim2);											//Completate le n=DIM misure, fermo il timer
 8001522:	4853      	ldr	r0, [pc, #332]	; (8001670 <main+0x5d0>)
 8001524:	f002 fee6 	bl	80042f4 <HAL_TIM_Base_Stop>
   HAL_UART_Transmit(&huart5,(uint8_t*)"\n \r", 3, HAL_MAX_DELAY);		//Trasmetto uno spazio per ordine
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	2203      	movs	r2, #3
 800152e:	4951      	ldr	r1, [pc, #324]	; (8001674 <main+0x5d4>)
 8001530:	4851      	ldr	r0, [pc, #324]	; (8001678 <main+0x5d8>)
 8001532:	f003 fb1e 	bl	8004b72 <HAL_UART_Transmit>

   //Scrivo le misure relative all'asse X
   uprintf("Misure Asse X \n \r");
 8001536:	4851      	ldr	r0, [pc, #324]	; (800167c <main+0x5dc>)
 8001538:	f7ff fd9e 	bl	8001078 <uprintf>
   for(int j=0; j<DIM; j++){
 800153c:	2300      	movs	r3, #0
 800153e:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8001542:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e01f      	b.n	800158a <main+0x4ea>
	   sprintf(buffer2,"%f \n \r",Vettx[j]); // @suppress("Float formatting support")? No, ho aggiunto manualmente la funzione nel Linker
 800154a:	4a4d      	ldr	r2, [pc, #308]	; (8001680 <main+0x5e0>)
 800154c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001550:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f80b 	bl	8000578 <__aeabi_f2d>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4947      	ldr	r1, [pc, #284]	; (8001684 <main+0x5e4>)
 8001568:	4847      	ldr	r0, [pc, #284]	; (8001688 <main+0x5e8>)
 800156a:	f004 ff65 	bl	8006438 <siprintf>
	   uprintf(buffer2);
 800156e:	4846      	ldr	r0, [pc, #280]	; (8001688 <main+0x5e8>)
 8001570:	f7ff fd82 	bl	8001078 <uprintf>
   for(int j=0; j<DIM; j++){
 8001574:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001578:	f103 0398 	add.w	r3, r3, #152	; 0x98
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 8001584:	f102 0298 	add.w	r2, r2, #152	; 0x98
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 800158e:	f103 0398 	add.w	r3, r3, #152	; 0x98
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001598:	dbd7      	blt.n	800154a <main+0x4aa>
   }

   //Scrivo le misure relative all'asse Y
   uprintf("Misure Asse Y \n \r");
 800159a:	483c      	ldr	r0, [pc, #240]	; (800168c <main+0x5ec>)
 800159c:	f7ff fd6c 	bl	8001078 <uprintf>
   for(int j=0; j<DIM; j++){
 80015a0:	2300      	movs	r3, #0
 80015a2:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80015a6:	f102 0294 	add.w	r2, r2, #148	; 0x94
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	e01f      	b.n	80015ee <main+0x54e>
	  sprintf(buffer2,"%f \n \r",Vetty[j]); // @suppress("Float formatting support")? No, ho aggiunto manualmente la funzione nel Linker
 80015ae:	4a38      	ldr	r2, [pc, #224]	; (8001690 <main+0x5f0>)
 80015b0:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80015b4:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4413      	add	r3, r2
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffd9 	bl	8000578 <__aeabi_f2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	492e      	ldr	r1, [pc, #184]	; (8001684 <main+0x5e4>)
 80015cc:	482e      	ldr	r0, [pc, #184]	; (8001688 <main+0x5e8>)
 80015ce:	f004 ff33 	bl	8006438 <siprintf>
	  uprintf(buffer2);
 80015d2:	482d      	ldr	r0, [pc, #180]	; (8001688 <main+0x5e8>)
 80015d4:	f7ff fd50 	bl	8001078 <uprintf>
   for(int j=0; j<DIM; j++){
 80015d8:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80015dc:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	3301      	adds	r3, #1
 80015e4:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 80015e8:	f102 0294 	add.w	r2, r2, #148	; 0x94
 80015ec:	6013      	str	r3, [r2, #0]
 80015ee:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 80015f2:	f103 0394 	add.w	r3, r3, #148	; 0x94
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80015fc:	dbd7      	blt.n	80015ae <main+0x50e>
   }

   //Scrivo le misure relative all'asse Z
   uprintf("Misure Asse Z \n \r");
 80015fe:	4825      	ldr	r0, [pc, #148]	; (8001694 <main+0x5f4>)
 8001600:	f7ff fd3a 	bl	8001078 <uprintf>
   for(int j=0; j<DIM; j++){
 8001604:	2300      	movs	r3, #0
 8001606:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800160a:	f102 0290 	add.w	r2, r2, #144	; 0x90
 800160e:	6013      	str	r3, [r2, #0]
 8001610:	e01f      	b.n	8001652 <main+0x5b2>
	  sprintf(buffer2,"%f \n \r",Vettz[j]); // @suppress("Float formatting support")? No, ho aggiunto manualmente la funzione nel Linker
 8001612:	4a21      	ldr	r2, [pc, #132]	; (8001698 <main+0x5f8>)
 8001614:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001618:	f103 0390 	add.w	r3, r3, #144	; 0x90
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ffa7 	bl	8000578 <__aeabi_f2d>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4915      	ldr	r1, [pc, #84]	; (8001684 <main+0x5e4>)
 8001630:	4815      	ldr	r0, [pc, #84]	; (8001688 <main+0x5e8>)
 8001632:	f004 ff01 	bl	8006438 <siprintf>
	  uprintf(buffer2);
 8001636:	4814      	ldr	r0, [pc, #80]	; (8001688 <main+0x5e8>)
 8001638:	f7ff fd1e 	bl	8001078 <uprintf>
   for(int j=0; j<DIM; j++){
 800163c:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001640:	f103 0390 	add.w	r3, r3, #144	; 0x90
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	3301      	adds	r3, #1
 8001648:	f507 423b 	add.w	r2, r7, #47872	; 0xbb00
 800164c:	f102 0290 	add.w	r2, r2, #144	; 0x90
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	f507 433b 	add.w	r3, r7, #47872	; 0xbb00
 8001656:	f103 0390 	add.w	r3, r3, #144	; 0x90
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001660:	dbd7      	blt.n	8001612 <main+0x572>
 8001662:	2300      	movs	r3, #0
   }
  /* USER CODE END 3 */
}
 8001664:	4618      	mov	r0, r3
 8001666:	f507 473b 	add.w	r7, r7, #47872	; 0xbb00
 800166a:	37a0      	adds	r7, #160	; 0xa0
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20017bd0 	.word	0x20017bd0
 8001674:	08008a14 	.word	0x08008a14
 8001678:	20017c18 	.word	0x20017c18
 800167c:	08008a18 	.word	0x08008a18
 8001680:	20000470 	.word	0x20000470
 8001684:	08008a2c 	.word	0x08008a2c
 8001688:	20000218 	.word	0x20000218
 800168c:	08008a34 	.word	0x08008a34
 8001690:	20008170 	.word	0x20008170
 8001694:	08008a48 	.word	0x08008a48
 8001698:	2000fe70 	.word	0x2000fe70

0800169c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b094      	sub	sp, #80	; 0x50
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	2234      	movs	r2, #52	; 0x34
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 fa52 	bl	8005b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	f107 0308 	add.w	r3, r7, #8
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016c0:	2300      	movs	r3, #0
 80016c2:	607b      	str	r3, [r7, #4]
 80016c4:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <SystemClock_Config+0xdc>)
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	4a2b      	ldr	r2, [pc, #172]	; (8001778 <SystemClock_Config+0xdc>)
 80016ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ce:	6413      	str	r3, [r2, #64]	; 0x40
 80016d0:	4b29      	ldr	r3, [pc, #164]	; (8001778 <SystemClock_Config+0xdc>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016dc:	2300      	movs	r3, #0
 80016de:	603b      	str	r3, [r7, #0]
 80016e0:	4b26      	ldr	r3, [pc, #152]	; (800177c <SystemClock_Config+0xe0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a25      	ldr	r2, [pc, #148]	; (800177c <SystemClock_Config+0xe0>)
 80016e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b23      	ldr	r3, [pc, #140]	; (800177c <SystemClock_Config+0xe0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001700:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001702:	2302      	movs	r3, #2
 8001704:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800170a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 12;
 800170c:	230c      	movs	r3, #12
 800170e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001710:	23b4      	movs	r3, #180	; 0xb4
 8001712:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001714:	2302      	movs	r3, #2
 8001716:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001718:	2304      	movs	r3, #4
 800171a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800171c:	2302      	movs	r3, #2
 800171e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4618      	mov	r0, r3
 8001726:	f001 fd01 	bl	800312c <HAL_RCC_OscConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001730:	f000 f826 	bl	8001780 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001734:	f001 faca 	bl	8002ccc <HAL_PWREx_EnableOverDrive>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800173e:	f000 f81f 	bl	8001780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001742:	230f      	movs	r3, #15
 8001744:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001746:	2302      	movs	r3, #2
 8001748:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800174e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001758:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	2105      	movs	r1, #5
 8001760:	4618      	mov	r0, r3
 8001762:	f001 fb03 	bl	8002d6c <HAL_RCC_ClockConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800176c:	f000 f808 	bl	8001780 <Error_Handler>
  }
}
 8001770:	bf00      	nop
 8001772:	3750      	adds	r7, #80	; 0x50
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40023800 	.word	0x40023800
 800177c:	40007000 	.word	0x40007000

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_SPI1_Init+0x64>)
 8001792:	4a18      	ldr	r2, [pc, #96]	; (80017f4 <MX_SPI1_Init+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_SPI1_Init+0x64>)
 8001798:	f44f 7282 	mov.w	r2, #260	; 0x104
 800179c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800179e:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017a4:	4b12      	ldr	r3, [pc, #72]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017aa:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017c0:	2218      	movs	r2, #24
 80017c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017c4:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d0:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017d8:	220a      	movs	r2, #10
 80017da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_SPI1_Init+0x64>)
 80017de:	f001 ff29 	bl	8003634 <HAL_SPI_Init>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017e8:	f7ff ffca 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20017b74 	.word	0x20017b74
 80017f4:	40013000 	.word	0x40013000

080017f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0314 	add.w	r3, r7, #20
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a19      	ldr	r2, [pc, #100]	; (800187c <HAL_SPI_MspInit+0x84>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d12b      	bne.n	8001872 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b18      	ldr	r3, [pc, #96]	; (8001880 <HAL_SPI_MspInit+0x88>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_SPI_MspInit+0x88>)
 8001824:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <HAL_SPI_MspInit+0x88>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_SPI_MspInit+0x88>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a10      	ldr	r2, [pc, #64]	; (8001880 <HAL_SPI_MspInit+0x88>)
 8001840:	f043 0302 	orr.w	r3, r3, #2
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <HAL_SPI_MspInit+0x88>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_4;
 8001852:	2338      	movs	r3, #56	; 0x38
 8001854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800185e:	2303      	movs	r3, #3
 8001860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001862:	2305      	movs	r3, #5
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0314 	add.w	r3, r7, #20
 800186a:	4619      	mov	r1, r3
 800186c:	4805      	ldr	r0, [pc, #20]	; (8001884 <HAL_SPI_MspInit+0x8c>)
 800186e:	f001 f843 	bl	80028f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001872:	bf00      	nop
 8001874:	3728      	adds	r7, #40	; 0x28
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40013000 	.word	0x40013000
 8001880:	40023800 	.word	0x40023800
 8001884:	40020400 	.word	0x40020400

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <HAL_MspInit+0x4c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a0f      	ldr	r2, [pc, #60]	; (80018d4 <HAL_MspInit+0x4c>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_MspInit+0x4c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	603b      	str	r3, [r7, #0]
 80018ae:	4b09      	ldr	r3, [pc, #36]	; (80018d4 <HAL_MspInit+0x4c>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a08      	ldr	r2, [pc, #32]	; (80018d4 <HAL_MspInit+0x4c>)
 80018b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <HAL_MspInit+0x4c>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c2:	603b      	str	r3, [r7, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40023800 	.word	0x40023800

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018dc:	e7fe      	b.n	80018dc <NMI_Handler+0x4>

080018de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018de:	b480      	push	{r7}
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <HardFault_Handler+0x4>

080018e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e8:	e7fe      	b.n	80018e8 <MemManage_Handler+0x4>

080018ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018ea:	b480      	push	{r7}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <BusFault_Handler+0x4>

080018f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f4:	e7fe      	b.n	80018f4 <UsageFault_Handler+0x4>

080018f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f6:	b480      	push	{r7}
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001912:	b480      	push	{r7}
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001924:	f000 fb3a 	bl	8001f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}

0800192c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001930:	2008      	movs	r0, #8
 8001932:	f001 f9a7 	bl	8002c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}

0800193a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800193e:	2010      	movs	r0, #16
 8001940:	f001 f9a0 	bl	8002c84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA1_Stream5_IRQHandler+0x10>)
 800194e:	f000 fd97 	bl	8002480 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20017ca0 	.word	0x20017ca0

0800195c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b094      	sub	sp, #80	; 0x50
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  UART_HandleTypeDef huart5;
  uint8_t whil[5]= "While";
 8001962:	4a0c      	ldr	r2, [pc, #48]	; (8001994 <TIM2_IRQHandler+0x38>)
 8001964:	1d3b      	adds	r3, r7, #4
 8001966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800196a:	6018      	str	r0, [r3, #0]
 800196c:	3304      	adds	r3, #4
 800196e:	7019      	strb	r1, [r3, #0]
  HAL_UART_Transmit(&huart5, whil, 5, 100);
 8001970:	1d39      	adds	r1, r7, #4
 8001972:	f107 000c 	add.w	r0, r7, #12
 8001976:	2364      	movs	r3, #100	; 0x64
 8001978:	2205      	movs	r2, #5
 800197a:	f003 f8fa 	bl	8004b72 <HAL_UART_Transmit>
  extern volatile uint8_t flag_elapsed;
  flag_elapsed=1;
 800197e:	4b06      	ldr	r3, [pc, #24]	; (8001998 <TIM2_IRQHandler+0x3c>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001984:	4805      	ldr	r0, [pc, #20]	; (800199c <TIM2_IRQHandler+0x40>)
 8001986:	f002 fcdc 	bl	8004342 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	3750      	adds	r7, #80	; 0x50
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	08008a5c 	.word	0x08008a5c
 8001998:	20017b70 	.word	0x20017b70
 800199c:	20017bd0 	.word	0x20017bd0

080019a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <USART2_IRQHandler+0x10>)
 80019a6:	f003 f977 	bl	8004c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20017c5c 	.word	0x20017c5c

080019b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	return 1;
 80019b8:	2301      	movs	r3, #1
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_kill>:

int _kill(int pid, int sig)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80019ce:	f004 f897 	bl	8005b00 <__errno>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2216      	movs	r2, #22
 80019d6:	601a      	str	r2, [r3, #0]
	return -1;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <_exit>:

void _exit (int status)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ffe7 	bl	80019c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80019f6:	e7fe      	b.n	80019f6 <_exit+0x12>

080019f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	60f8      	str	r0, [r7, #12]
 8001a00:	60b9      	str	r1, [r7, #8]
 8001a02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
 8001a08:	e00a      	b.n	8001a20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001a0a:	f3af 8000 	nop.w
 8001a0e:	4601      	mov	r1, r0
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	60ba      	str	r2, [r7, #8]
 8001a16:	b2ca      	uxtb	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	697a      	ldr	r2, [r7, #20]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dbf0      	blt.n	8001a0a <_read+0x12>
	}

return len;
 8001a28:	687b      	ldr	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	60f8      	str	r0, [r7, #12]
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	e009      	b.n	8001a58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	3301      	adds	r3, #1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbf1      	blt.n	8001a44 <_write+0x12>
	}
	return len;
 8001a60:	687b      	ldr	r3, [r7, #4]
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <_close>:

int _close(int file)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
	return -1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a82:	b480      	push	{r7}
 8001a84:	b083      	sub	sp, #12
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
 8001a8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a92:	605a      	str	r2, [r3, #4]
	return 0;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	370c      	adds	r7, #12
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr

08001aa2 <_isatty>:

int _isatty(int file)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
	return 1;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
	return 0;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3714      	adds	r7, #20
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
	...

08001ad4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001adc:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <_sbrk+0x5c>)
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <_sbrk+0x60>)
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ae8:	4b13      	ldr	r3, [pc, #76]	; (8001b38 <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d102      	bne.n	8001af6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af0:	4b11      	ldr	r3, [pc, #68]	; (8001b38 <_sbrk+0x64>)
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <_sbrk+0x68>)
 8001af4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <_sbrk+0x64>)
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4413      	add	r3, r2
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d207      	bcs.n	8001b14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b04:	f003 fffc 	bl	8005b00 <__errno>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	220c      	movs	r2, #12
 8001b0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	e009      	b.n	8001b28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b14:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <_sbrk+0x64>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <_sbrk+0x64>)
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4413      	add	r3, r2
 8001b22:	4a05      	ldr	r2, [pc, #20]	; (8001b38 <_sbrk+0x64>)
 8001b24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b26:	68fb      	ldr	r3, [r7, #12]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	20050000 	.word	0x20050000
 8001b34:	00000400 	.word	0x00000400
 8001b38:	20017bcc 	.word	0x20017bcc
 8001b3c:	20017d18 	.word	0x20017d18

08001b40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <SystemInit+0x20>)
 8001b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b4a:	4a05      	ldr	r2, [pc, #20]	; (8001b60 <SystemInit+0x20>)
 8001b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b54:	bf00      	nop
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b80:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 24000-1;
 8001b88:	4b1c      	ldr	r3, [pc, #112]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b8a:	f645 52bf 	movw	r2, #23999	; 0x5dbf
 8001b8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001b98:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9e:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba4:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001baa:	4814      	ldr	r0, [pc, #80]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001bac:	f002 faea 	bl	8004184 <HAL_TIM_Base_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001bb6:	f7ff fde3 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bc0:	f107 0308 	add.w	r3, r7, #8
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480d      	ldr	r0, [pc, #52]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001bc8:	f002 fcc3 	bl	8004552 <HAL_TIM_ConfigClockSource>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bd2:	f7ff fdd5 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bde:	463b      	mov	r3, r7
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <MX_TIM2_Init+0x98>)
 8001be4:	f002 fee8 	bl	80049b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bee:	f7ff fdc7 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	20017bd0 	.word	0x20017bd0

08001c00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c10:	d115      	bne.n	8001c3e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_TIM_Base_MspInit+0x48>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <HAL_TIM_Base_MspInit+0x48>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_TIM_Base_MspInit+0x48>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2100      	movs	r1, #0
 8001c32:	201c      	movs	r0, #28
 8001c34:	f000 faad 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c38:	201c      	movs	r0, #28
 8001c3a:	f000 fac6 	bl	80021ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <MX_UART5_Init>:
UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_rx;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001c50:	4b11      	ldr	r3, [pc, #68]	; (8001c98 <MX_UART5_Init+0x4c>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	; (8001c9c <MX_UART5_Init+0x50>)
 8001c54:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 230400;
 8001c56:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <MX_UART5_Init+0x4c>)
 8001c58:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001c5c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5e:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <MX_UART5_Init+0x4c>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001c64:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <MX_UART5_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001c6a:	4b0b      	ldr	r3, [pc, #44]	; (8001c98 <MX_UART5_Init+0x4c>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001c70:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <MX_UART5_Init+0x4c>)
 8001c72:	220c      	movs	r2, #12
 8001c74:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c76:	4b08      	ldr	r3, [pc, #32]	; (8001c98 <MX_UART5_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <MX_UART5_Init+0x4c>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_UART5_Init+0x4c>)
 8001c84:	f002 ff28 	bl	8004ad8 <HAL_UART_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001c8e:	f7ff fd77 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20017c18 	.word	0x20017c18
 8001c9c:	40005000 	.word	0x40005000

08001ca0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001ca6:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <MX_USART2_UART_Init+0x50>)
 8001ca8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8001caa:	4b10      	ldr	r3, [pc, #64]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cac:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8001cb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cc4:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cc6:	220c      	movs	r2, #12
 8001cc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cca:	4b08      	ldr	r3, [pc, #32]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cd6:	4805      	ldr	r0, [pc, #20]	; (8001cec <MX_USART2_UART_Init+0x4c>)
 8001cd8:	f002 fefe 	bl	8004ad8 <HAL_UART_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ce2:	f7ff fd4d 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20017c5c 	.word	0x20017c5c
 8001cf0:	40004400 	.word	0x40004400

08001cf4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08c      	sub	sp, #48	; 0x30
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART5)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5d      	ldr	r2, [pc, #372]	; (8001e88 <HAL_UART_MspInit+0x194>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d14b      	bne.n	8001dae <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
 8001d1a:	4b5c      	ldr	r3, [pc, #368]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a5b      	ldr	r2, [pc, #364]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001d20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b59      	ldr	r3, [pc, #356]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d2e:	61bb      	str	r3, [r7, #24]
 8001d30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	4b55      	ldr	r3, [pc, #340]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	4a54      	ldr	r2, [pc, #336]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001d3c:	f043 0304 	orr.w	r3, r3, #4
 8001d40:	6313      	str	r3, [r2, #48]	; 0x30
 8001d42:	4b52      	ldr	r3, [pc, #328]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	4b4e      	ldr	r3, [pc, #312]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a4d      	ldr	r2, [pc, #308]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001d58:	f043 0308 	orr.w	r3, r3, #8
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b4b      	ldr	r3, [pc, #300]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d70:	2302      	movs	r3, #2
 8001d72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d7c:	2308      	movs	r3, #8
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d80:	f107 031c 	add.w	r3, r7, #28
 8001d84:	4619      	mov	r1, r3
 8001d86:	4842      	ldr	r0, [pc, #264]	; (8001e90 <HAL_UART_MspInit+0x19c>)
 8001d88:	f000 fdb6 	bl	80028f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001d9c:	2308      	movs	r3, #8
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	4619      	mov	r1, r3
 8001da6:	483b      	ldr	r0, [pc, #236]	; (8001e94 <HAL_UART_MspInit+0x1a0>)
 8001da8:	f000 fda6 	bl	80028f8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dac:	e067      	b.n	8001e7e <HAL_UART_MspInit+0x18a>
  else if(uartHandle->Instance==USART2)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a39      	ldr	r2, [pc, #228]	; (8001e98 <HAL_UART_MspInit+0x1a4>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d162      	bne.n	8001e7e <HAL_UART_MspInit+0x18a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001db8:	2300      	movs	r3, #0
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc0:	4a32      	ldr	r2, [pc, #200]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001dc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc8:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	4b2c      	ldr	r3, [pc, #176]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ddc:	4a2b      	ldr	r2, [pc, #172]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001dde:	f043 0308 	orr.w	r3, r3, #8
 8001de2:	6313      	str	r3, [r2, #48]	; 0x30
 8001de4:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <HAL_UART_MspInit+0x198>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df4:	2302      	movs	r3, #2
 8001df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e00:	2307      	movs	r3, #7
 8001e02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e04:	f107 031c 	add.w	r3, r7, #28
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4822      	ldr	r0, [pc, #136]	; (8001e94 <HAL_UART_MspInit+0x1a0>)
 8001e0c:	f000 fd74 	bl	80028f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e12:	4a23      	ldr	r2, [pc, #140]	; (8001ea0 <HAL_UART_MspInit+0x1ac>)
 8001e14:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e2a:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e30:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e38:	4b18      	ldr	r3, [pc, #96]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e44:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e46:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e52:	4812      	ldr	r0, [pc, #72]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e54:	f000 f9d4 	bl	8002200 <HAL_DMA_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_UART_MspInit+0x16e>
      Error_Handler();
 8001e5e:	f7ff fc8f 	bl	8001780 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e66:	639a      	str	r2, [r3, #56]	; 0x38
 8001e68:	4a0c      	ldr	r2, [pc, #48]	; (8001e9c <HAL_UART_MspInit+0x1a8>)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2026      	movs	r0, #38	; 0x26
 8001e74:	f000 f98d 	bl	8002192 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e78:	2026      	movs	r0, #38	; 0x26
 8001e7a:	f000 f9a6 	bl	80021ca <HAL_NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3730      	adds	r7, #48	; 0x30
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40005000 	.word	0x40005000
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40020800 	.word	0x40020800
 8001e94:	40020c00 	.word	0x40020c00
 8001e98:	40004400 	.word	0x40004400
 8001e9c:	20017ca0 	.word	0x20017ca0
 8001ea0:	40026088 	.word	0x40026088

08001ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eaa:	490e      	ldr	r1, [pc, #56]	; (8001ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001eac:	4a0e      	ldr	r2, [pc, #56]	; (8001ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb0:	e002      	b.n	8001eb8 <LoopCopyDataInit>

08001eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eb6:	3304      	adds	r3, #4

08001eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ebc:	d3f9      	bcc.n	8001eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ebe:	4a0b      	ldr	r2, [pc, #44]	; (8001eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ec0:	4c0b      	ldr	r4, [pc, #44]	; (8001ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec4:	e001      	b.n	8001eca <LoopFillZerobss>

08001ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec8:	3204      	adds	r2, #4

08001eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ecc:	d3fb      	bcc.n	8001ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ece:	f7ff fe37 	bl	8001b40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f003 fe1b 	bl	8005b0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed6:	f7ff f8e3 	bl	80010a0 <main>
  bx  lr    
 8001eda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001edc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001ee8:	08008e6c 	.word	0x08008e6c
  ldr r2, =_sbss
 8001eec:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001ef0:	20017d14 	.word	0x20017d14

08001ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef4:	e7fe      	b.n	8001ef4 <ADC_IRQHandler>
	...

08001ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_Init+0x40>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <HAL_Init+0x40>)
 8001f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f08:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_Init+0x40>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <HAL_Init+0x40>)
 8001f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a07      	ldr	r2, [pc, #28]	; (8001f38 <HAL_Init+0x40>)
 8001f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 f92b 	bl	800217c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f26:	200f      	movs	r0, #15
 8001f28:	f000 f808 	bl	8001f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f2c:	f7ff fcac 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40023c00 	.word	0x40023c00

08001f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f44:	4b12      	ldr	r3, [pc, #72]	; (8001f90 <HAL_InitTick+0x54>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <HAL_InitTick+0x58>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 f943 	bl	80021e6 <HAL_SYSTICK_Config>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00e      	b.n	8001f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d80a      	bhi.n	8001f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f000 f90b 	bl	8002192 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f7c:	4a06      	ldr	r2, [pc, #24]	; (8001f98 <HAL_InitTick+0x5c>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000000 	.word	0x20000000
 8001f94:	20000008 	.word	0x20000008
 8001f98:	20000004 	.word	0x20000004

08001f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <HAL_IncTick+0x20>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4413      	add	r3, r2
 8001fac:	4a04      	ldr	r2, [pc, #16]	; (8001fc0 <HAL_IncTick+0x24>)
 8001fae:	6013      	str	r3, [r2, #0]
}
 8001fb0:	bf00      	nop
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	20000008 	.word	0x20000008
 8001fc0:	20017d00 	.word	0x20017d00

08001fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <HAL_GetTick+0x14>)
 8001fca:	681b      	ldr	r3, [r3, #0]
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	20017d00 	.word	0x20017d00

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	; (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	; (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4907      	ldr	r1, [pc, #28]	; (8002078 <__NVIC_EnableIRQ+0x38>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	4603      	mov	r3, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002088:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208c:	2b00      	cmp	r3, #0
 800208e:	db0a      	blt.n	80020a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	b2da      	uxtb	r2, r3
 8002094:	490c      	ldr	r1, [pc, #48]	; (80020c8 <__NVIC_SetPriority+0x4c>)
 8002096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	440b      	add	r3, r1
 80020a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a4:	e00a      	b.n	80020bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	b2da      	uxtb	r2, r3
 80020aa:	4908      	ldr	r1, [pc, #32]	; (80020cc <__NVIC_SetPriority+0x50>)
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	f003 030f 	and.w	r3, r3, #15
 80020b2:	3b04      	subs	r3, #4
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	b2d2      	uxtb	r2, r2
 80020b8:	440b      	add	r3, r1
 80020ba:	761a      	strb	r2, [r3, #24]
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	e000e100 	.word	0xe000e100
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	; 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f003 0307 	and.w	r3, r3, #7
 80020e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	f1c3 0307 	rsb	r3, r3, #7
 80020ea:	2b04      	cmp	r3, #4
 80020ec:	bf28      	it	cs
 80020ee:	2304      	movcs	r3, #4
 80020f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2b06      	cmp	r3, #6
 80020f8:	d902      	bls.n	8002100 <NVIC_EncodePriority+0x30>
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	3b03      	subs	r3, #3
 80020fe:	e000      	b.n	8002102 <NVIC_EncodePriority+0x32>
 8002100:	2300      	movs	r3, #0
 8002102:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002104:	f04f 32ff 	mov.w	r2, #4294967295
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	43da      	mvns	r2, r3
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	401a      	ands	r2, r3
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002118:	f04f 31ff 	mov.w	r1, #4294967295
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	fa01 f303 	lsl.w	r3, r1, r3
 8002122:	43d9      	mvns	r1, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002128:	4313      	orrs	r3, r2
         );
}
 800212a:	4618      	mov	r0, r3
 800212c:	3724      	adds	r7, #36	; 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
	...

08002138 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002148:	d301      	bcc.n	800214e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800214a:	2301      	movs	r3, #1
 800214c:	e00f      	b.n	800216e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <SysTick_Config+0x40>)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002156:	210f      	movs	r1, #15
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f7ff ff8e 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SysTick_Config+0x40>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002166:	4b04      	ldr	r3, [pc, #16]	; (8002178 <SysTick_Config+0x40>)
 8002168:	2207      	movs	r2, #7
 800216a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	e000e010 	.word	0xe000e010

0800217c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff ff29 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
 800219e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021a4:	f7ff ff3e 	bl	8002024 <__NVIC_GetPriorityGrouping>
 80021a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	6978      	ldr	r0, [r7, #20]
 80021b0:	f7ff ff8e 	bl	80020d0 <NVIC_EncodePriority>
 80021b4:	4602      	mov	r2, r0
 80021b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ba:	4611      	mov	r1, r2
 80021bc:	4618      	mov	r0, r3
 80021be:	f7ff ff5d 	bl	800207c <__NVIC_SetPriority>
}
 80021c2:	bf00      	nop
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	4603      	mov	r3, r0
 80021d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff31 	bl	8002040 <__NVIC_EnableIRQ>
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff ffa2 	bl	8002138 <SysTick_Config>
 80021f4:	4603      	mov	r3, r0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
	...

08002200 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b086      	sub	sp, #24
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff feda 	bl	8001fc4 <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e099      	b.n	8002350 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2202      	movs	r2, #2
 8002220:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0201 	bic.w	r2, r2, #1
 800223a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800223c:	e00f      	b.n	800225e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800223e:	f7ff fec1 	bl	8001fc4 <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b05      	cmp	r3, #5
 800224a:	d908      	bls.n	800225e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2220      	movs	r2, #32
 8002250:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2203      	movs	r2, #3
 8002256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e078      	b.n	8002350 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1e8      	bne.n	800223e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4b38      	ldr	r3, [pc, #224]	; (8002358 <HAL_DMA_Init+0x158>)
 8002278:	4013      	ands	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800228a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	699b      	ldr	r3, [r3, #24]
 800229c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d107      	bne.n	80022c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	4313      	orrs	r3, r2
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f023 0307 	bic.w	r3, r3, #7
 80022de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d117      	bne.n	8002322 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00e      	beq.n	8002322 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fa7b 	bl	8002800 <DMA_CheckFifoParam>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2240      	movs	r2, #64	; 0x40
 8002314:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800231e:	2301      	movs	r3, #1
 8002320:	e016      	b.n	8002350 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 fa32 	bl	8002794 <DMA_CalcBaseAndBitshift>
 8002330:	4603      	mov	r3, r0
 8002332:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002338:	223f      	movs	r2, #63	; 0x3f
 800233a:	409a      	lsls	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2200      	movs	r2, #0
 8002344:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2201      	movs	r2, #1
 800234a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	f010803f 	.word	0xf010803f

0800235c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800236a:	f7ff fe2b 	bl	8001fc4 <HAL_GetTick>
 800236e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d008      	beq.n	800238e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e052      	b.n	8002434 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f022 0216 	bic.w	r2, r2, #22
 800239c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d103      	bne.n	80023be <HAL_DMA_Abort+0x62>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d007      	beq.n	80023ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0208 	bic.w	r2, r2, #8
 80023cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0201 	bic.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023de:	e013      	b.n	8002408 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023e0:	f7ff fdf0 	bl	8001fc4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	d90c      	bls.n	8002408 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2220      	movs	r2, #32
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2203      	movs	r2, #3
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e015      	b.n	8002434 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1e4      	bne.n	80023e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	223f      	movs	r2, #63	; 0x3f
 800241c:	409a      	lsls	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d004      	beq.n	800245a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2280      	movs	r2, #128	; 0x80
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e00c      	b.n	8002474 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2205      	movs	r2, #5
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0201 	bic.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b086      	sub	sp, #24
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800248c:	4b8e      	ldr	r3, [pc, #568]	; (80026c8 <HAL_DMA_IRQHandler+0x248>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a8e      	ldr	r2, [pc, #568]	; (80026cc <HAL_DMA_IRQHandler+0x24c>)
 8002492:	fba2 2303 	umull	r2, r3, r2, r3
 8002496:	0a9b      	lsrs	r3, r3, #10
 8002498:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024aa:	2208      	movs	r2, #8
 80024ac:	409a      	lsls	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d01a      	beq.n	80024ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0204 	bic.w	r2, r2, #4
 80024d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d8:	2208      	movs	r2, #8
 80024da:	409a      	lsls	r2, r3
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e4:	f043 0201 	orr.w	r2, r3, #1
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	2201      	movs	r2, #1
 80024f2:	409a      	lsls	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d012      	beq.n	8002522 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00b      	beq.n	8002522 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	2201      	movs	r2, #1
 8002510:	409a      	lsls	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251a:	f043 0202 	orr.w	r2, r3, #2
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002526:	2204      	movs	r2, #4
 8002528:	409a      	lsls	r2, r3
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4013      	ands	r3, r2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d012      	beq.n	8002558 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00b      	beq.n	8002558 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002544:	2204      	movs	r2, #4
 8002546:	409a      	lsls	r2, r3
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	f043 0204 	orr.w	r2, r3, #4
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	2210      	movs	r2, #16
 800255e:	409a      	lsls	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d043      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d03c      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	2210      	movs	r2, #16
 800257c:	409a      	lsls	r2, r3
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d018      	beq.n	80025c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d108      	bne.n	80025b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d024      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	4798      	blx	r3
 80025ae:	e01f      	b.n	80025f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	4798      	blx	r3
 80025c0:	e016      	b.n	80025f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0208 	bic.w	r2, r2, #8
 80025de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d003      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	2220      	movs	r2, #32
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 808f 	beq.w	8002720 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 8087 	beq.w	8002720 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002616:	2220      	movs	r2, #32
 8002618:	409a      	lsls	r2, r3
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b05      	cmp	r3, #5
 8002628:	d136      	bne.n	8002698 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0216 	bic.w	r2, r2, #22
 8002638:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	695a      	ldr	r2, [r3, #20]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002648:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d103      	bne.n	800265a <HAL_DMA_IRQHandler+0x1da>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002656:	2b00      	cmp	r3, #0
 8002658:	d007      	beq.n	800266a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0208 	bic.w	r2, r2, #8
 8002668:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266e:	223f      	movs	r2, #63	; 0x3f
 8002670:	409a      	lsls	r2, r3
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800268a:	2b00      	cmp	r3, #0
 800268c:	d07e      	beq.n	800278c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	4798      	blx	r3
        }
        return;
 8002696:	e079      	b.n	800278c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d01d      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10d      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d031      	beq.n	8002720 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
 80026c4:	e02c      	b.n	8002720 <HAL_DMA_IRQHandler+0x2a0>
 80026c6:	bf00      	nop
 80026c8:	20000000 	.word	0x20000000
 80026cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d023      	beq.n	8002720 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
 80026e0:	e01e      	b.n	8002720 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10f      	bne.n	8002710 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0210 	bic.w	r2, r2, #16
 80026fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d003      	beq.n	8002720 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002724:	2b00      	cmp	r3, #0
 8002726:	d032      	beq.n	800278e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d022      	beq.n	800277a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2205      	movs	r2, #5
 8002738:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 0201 	bic.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	3301      	adds	r3, #1
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	d307      	bcc.n	8002768 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f2      	bne.n	800274c <HAL_DMA_IRQHandler+0x2cc>
 8002766:	e000      	b.n	800276a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002768:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	4798      	blx	r3
 800278a:	e000      	b.n	800278e <HAL_DMA_IRQHandler+0x30e>
        return;
 800278c:	bf00      	nop
    }
  }
}
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002794:	b480      	push	{r7}
 8002796:	b085      	sub	sp, #20
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	3b10      	subs	r3, #16
 80027a4:	4a14      	ldr	r2, [pc, #80]	; (80027f8 <DMA_CalcBaseAndBitshift+0x64>)
 80027a6:	fba2 2303 	umull	r2, r3, r2, r3
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <DMA_CalcBaseAndBitshift+0x68>)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4413      	add	r3, r2
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d909      	bls.n	80027d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	1d1a      	adds	r2, r3, #4
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	659a      	str	r2, [r3, #88]	; 0x58
 80027d4:	e007      	b.n	80027e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80027de:	f023 0303 	bic.w	r3, r3, #3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	aaaaaaab 	.word	0xaaaaaaab
 80027fc:	08008a7c 	.word	0x08008a7c

08002800 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002800:	b480      	push	{r7}
 8002802:	b085      	sub	sp, #20
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002810:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11f      	bne.n	800285a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d856      	bhi.n	80028ce <DMA_CheckFifoParam+0xce>
 8002820:	a201      	add	r2, pc, #4	; (adr r2, 8002828 <DMA_CheckFifoParam+0x28>)
 8002822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002826:	bf00      	nop
 8002828:	08002839 	.word	0x08002839
 800282c:	0800284b 	.word	0x0800284b
 8002830:	08002839 	.word	0x08002839
 8002834:	080028cf 	.word	0x080028cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d046      	beq.n	80028d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002848:	e043      	b.n	80028d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002852:	d140      	bne.n	80028d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002858:	e03d      	b.n	80028d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	699b      	ldr	r3, [r3, #24]
 800285e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002862:	d121      	bne.n	80028a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d837      	bhi.n	80028da <DMA_CheckFifoParam+0xda>
 800286a:	a201      	add	r2, pc, #4	; (adr r2, 8002870 <DMA_CheckFifoParam+0x70>)
 800286c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002870:	08002881 	.word	0x08002881
 8002874:	08002887 	.word	0x08002887
 8002878:	08002881 	.word	0x08002881
 800287c:	08002899 	.word	0x08002899
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	73fb      	strb	r3, [r7, #15]
      break;
 8002884:	e030      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d025      	beq.n	80028de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002896:	e022      	b.n	80028de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028a0:	d11f      	bne.n	80028e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80028a6:	e01c      	b.n	80028e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d903      	bls.n	80028b6 <DMA_CheckFifoParam+0xb6>
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	2b03      	cmp	r3, #3
 80028b2:	d003      	beq.n	80028bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80028b4:	e018      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
      break;
 80028ba:	e015      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00e      	beq.n	80028e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      break;
 80028cc:	e00b      	b.n	80028e6 <DMA_CheckFifoParam+0xe6>
      break;
 80028ce:	bf00      	nop
 80028d0:	e00a      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d2:	bf00      	nop
 80028d4:	e008      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028d6:	bf00      	nop
 80028d8:	e006      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028da:	bf00      	nop
 80028dc:	e004      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028de:	bf00      	nop
 80028e0:	e002      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028e2:	bf00      	nop
 80028e4:	e000      	b.n	80028e8 <DMA_CheckFifoParam+0xe8>
      break;
 80028e6:	bf00      	nop
    }
  } 
  
  return status; 
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop

080028f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b089      	sub	sp, #36	; 0x24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e177      	b.n	8002c04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 8166 	bne.w	8002bfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d005      	beq.n	800294a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	2b02      	cmp	r3, #2
 8002948:	d130      	bne.n	80029ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	2203      	movs	r2, #3
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	4013      	ands	r3, r2
 8002960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4313      	orrs	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002980:	2201      	movs	r2, #1
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 0201 	and.w	r2, r3, #1
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d017      	beq.n	80029e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	2203      	movs	r2, #3
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d123      	bne.n	8002a3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	08da      	lsrs	r2, r3, #3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3208      	adds	r2, #8
 80029fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a02:	69fb      	ldr	r3, [r7, #28]
 8002a04:	f003 0307 	and.w	r3, r3, #7
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	08da      	lsrs	r2, r3, #3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3208      	adds	r2, #8
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	005b      	lsls	r3, r3, #1
 8002a46:	2203      	movs	r2, #3
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	4013      	ands	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0203 	and.w	r2, r3, #3
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80c0 	beq.w	8002bfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a65      	ldr	r2, [pc, #404]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <HAL_GPIO_Init+0x324>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a9a:	4a61      	ldr	r2, [pc, #388]	; (8002c20 <HAL_GPIO_Init+0x328>)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	089b      	lsrs	r3, r3, #2
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	220f      	movs	r2, #15
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a58      	ldr	r2, [pc, #352]	; (8002c24 <HAL_GPIO_Init+0x32c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d037      	beq.n	8002b36 <HAL_GPIO_Init+0x23e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a57      	ldr	r2, [pc, #348]	; (8002c28 <HAL_GPIO_Init+0x330>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d031      	beq.n	8002b32 <HAL_GPIO_Init+0x23a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <HAL_GPIO_Init+0x334>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02b      	beq.n	8002b2e <HAL_GPIO_Init+0x236>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a55      	ldr	r2, [pc, #340]	; (8002c30 <HAL_GPIO_Init+0x338>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d025      	beq.n	8002b2a <HAL_GPIO_Init+0x232>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a54      	ldr	r2, [pc, #336]	; (8002c34 <HAL_GPIO_Init+0x33c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01f      	beq.n	8002b26 <HAL_GPIO_Init+0x22e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a53      	ldr	r2, [pc, #332]	; (8002c38 <HAL_GPIO_Init+0x340>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d019      	beq.n	8002b22 <HAL_GPIO_Init+0x22a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a52      	ldr	r2, [pc, #328]	; (8002c3c <HAL_GPIO_Init+0x344>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d013      	beq.n	8002b1e <HAL_GPIO_Init+0x226>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a51      	ldr	r2, [pc, #324]	; (8002c40 <HAL_GPIO_Init+0x348>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00d      	beq.n	8002b1a <HAL_GPIO_Init+0x222>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a50      	ldr	r2, [pc, #320]	; (8002c44 <HAL_GPIO_Init+0x34c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d007      	beq.n	8002b16 <HAL_GPIO_Init+0x21e>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a4f      	ldr	r2, [pc, #316]	; (8002c48 <HAL_GPIO_Init+0x350>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <HAL_GPIO_Init+0x21a>
 8002b0e:	2309      	movs	r3, #9
 8002b10:	e012      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b12:	230a      	movs	r3, #10
 8002b14:	e010      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b16:	2308      	movs	r3, #8
 8002b18:	e00e      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b1a:	2307      	movs	r3, #7
 8002b1c:	e00c      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b1e:	2306      	movs	r3, #6
 8002b20:	e00a      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b22:	2305      	movs	r3, #5
 8002b24:	e008      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b26:	2304      	movs	r3, #4
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e004      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e002      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <HAL_GPIO_Init+0x240>
 8002b36:	2300      	movs	r3, #0
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	f002 0203 	and.w	r2, r2, #3
 8002b3e:	0092      	lsls	r2, r2, #2
 8002b40:	4093      	lsls	r3, r2
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b48:	4935      	ldr	r1, [pc, #212]	; (8002c20 <HAL_GPIO_Init+0x328>)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b56:	4b3d      	ldr	r3, [pc, #244]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d003      	beq.n	8002b7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b7a:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002b7c:	69bb      	ldr	r3, [r7, #24]
 8002b7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b80:	4b32      	ldr	r3, [pc, #200]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ba4:	4a29      	ldr	r2, [pc, #164]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002baa:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bce:	4a1f      	ldr	r2, [pc, #124]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <HAL_GPIO_Init+0x354>)
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	3301      	adds	r3, #1
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	69fb      	ldr	r3, [r7, #28]
 8002c06:	2b0f      	cmp	r3, #15
 8002c08:	f67f ae84 	bls.w	8002914 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3724      	adds	r7, #36	; 0x24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40023800 	.word	0x40023800
 8002c20:	40013800 	.word	0x40013800
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	40020800 	.word	0x40020800
 8002c30:	40020c00 	.word	0x40020c00
 8002c34:	40021000 	.word	0x40021000
 8002c38:	40021400 	.word	0x40021400
 8002c3c:	40021800 	.word	0x40021800
 8002c40:	40021c00 	.word	0x40021c00
 8002c44:	40022000 	.word	0x40022000
 8002c48:	40022400 	.word	0x40022400
 8002c4c:	40013c00 	.word	0x40013c00

08002c50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	460b      	mov	r3, r1
 8002c5a:	807b      	strh	r3, [r7, #2]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c60:	787b      	ldrb	r3, [r7, #1]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c66:	887a      	ldrh	r2, [r7, #2]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c6c:	e003      	b.n	8002c76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c6e:	887b      	ldrh	r3, [r7, #2]
 8002c70:	041a      	lsls	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	619a      	str	r2, [r3, #24]
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c90:	695a      	ldr	r2, [r3, #20]
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	4013      	ands	r3, r2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d006      	beq.n	8002ca8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c9a:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 f806 	bl	8002cb4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40013c00 	.word	0x40013c00

08002cb4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
	...

08002ccc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4b20      	ldr	r3, [pc, #128]	; (8002d5c <HAL_PWREx_EnableOverDrive+0x90>)
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce6:	4b1d      	ldr	r3, [pc, #116]	; (8002d5c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cee:	603b      	str	r3, [r7, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002cf2:	4b1b      	ldr	r3, [pc, #108]	; (8002d60 <HAL_PWREx_EnableOverDrive+0x94>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf8:	f7ff f964 	bl	8001fc4 <HAL_GetTick>
 8002cfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cfe:	e009      	b.n	8002d14 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d00:	f7ff f960 	bl	8001fc4 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d0e:	d901      	bls.n	8002d14 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e01f      	b.n	8002d54 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d14:	4b13      	ldr	r3, [pc, #76]	; (8002d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d20:	d1ee      	bne.n	8002d00 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d28:	f7ff f94c 	bl	8001fc4 <HAL_GetTick>
 8002d2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d2e:	e009      	b.n	8002d44 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d30:	f7ff f948 	bl	8001fc4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d3e:	d901      	bls.n	8002d44 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e007      	b.n	8002d54 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d44:	4b07      	ldr	r3, [pc, #28]	; (8002d64 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d50:	d1ee      	bne.n	8002d30 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d52:	2300      	movs	r3, #0
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	420e0040 	.word	0x420e0040
 8002d64:	40007000 	.word	0x40007000
 8002d68:	420e0044 	.word	0x420e0044

08002d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0cc      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d80:	4b68      	ldr	r3, [pc, #416]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 030f 	and.w	r3, r3, #15
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d90c      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b65      	ldr	r3, [pc, #404]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b63      	ldr	r3, [pc, #396]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e0b8      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d020      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d005      	beq.n	8002dcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002dc0:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a58      	ldr	r2, [pc, #352]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002dca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0308 	and.w	r3, r3, #8
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d005      	beq.n	8002de4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dd8:	4b53      	ldr	r3, [pc, #332]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a52      	ldr	r2, [pc, #328]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002dde:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002de2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002de4:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	494d      	ldr	r1, [pc, #308]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d044      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d107      	bne.n	8002e1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e0a:	4b47      	ldr	r3, [pc, #284]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d119      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e07f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d003      	beq.n	8002e2a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e2a:	4b3f      	ldr	r3, [pc, #252]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d109      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e06f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3a:	4b3b      	ldr	r3, [pc, #236]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e067      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e4a:	4b37      	ldr	r3, [pc, #220]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f023 0203 	bic.w	r2, r3, #3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4934      	ldr	r1, [pc, #208]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e5c:	f7ff f8b2 	bl	8001fc4 <HAL_GetTick>
 8002e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e64:	f7ff f8ae 	bl	8001fc4 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e04f      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	4b2b      	ldr	r3, [pc, #172]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 020c 	and.w	r2, r3, #12
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d1eb      	bne.n	8002e64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b25      	ldr	r3, [pc, #148]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d20c      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b22      	ldr	r3, [pc, #136]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <HAL_RCC_ClockConfig+0x1b8>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e032      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4916      	ldr	r1, [pc, #88]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ede:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	490e      	ldr	r1, [pc, #56]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ef2:	f000 f821 	bl	8002f38 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b0b      	ldr	r3, [pc, #44]	; (8002f28 <HAL_RCC_ClockConfig+0x1bc>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	490a      	ldr	r1, [pc, #40]	; (8002f2c <HAL_RCC_ClockConfig+0x1c0>)
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
 8002f06:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0a:	4a09      	ldr	r2, [pc, #36]	; (8002f30 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f0e:	4b09      	ldr	r3, [pc, #36]	; (8002f34 <HAL_RCC_ClockConfig+0x1c8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7ff f812 	bl	8001f3c <HAL_InitTick>

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	40023c00 	.word	0x40023c00
 8002f28:	40023800 	.word	0x40023800
 8002f2c:	08008a64 	.word	0x08008a64
 8002f30:	20000000 	.word	0x20000000
 8002f34:	20000004 	.word	0x20000004

08002f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f3c:	b090      	sub	sp, #64	; 0x40
 8002f3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002f40:	2300      	movs	r3, #0
 8002f42:	637b      	str	r3, [r7, #52]	; 0x34
 8002f44:	2300      	movs	r3, #0
 8002f46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f48:	2300      	movs	r3, #0
 8002f4a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f50:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 030c 	and.w	r3, r3, #12
 8002f58:	2b08      	cmp	r3, #8
 8002f5a:	d00d      	beq.n	8002f78 <HAL_RCC_GetSysClockFreq+0x40>
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	f200 80a1 	bhi.w	80030a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d002      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x34>
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d003      	beq.n	8002f72 <HAL_RCC_GetSysClockFreq+0x3a>
 8002f6a:	e09b      	b.n	80030a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b53      	ldr	r3, [pc, #332]	; (80030bc <HAL_RCC_GetSysClockFreq+0x184>)
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002f70:	e09b      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f72:	4b53      	ldr	r3, [pc, #332]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002f74:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002f76:	e098      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f78:	4b4f      	ldr	r3, [pc, #316]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f82:	4b4d      	ldr	r3, [pc, #308]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d028      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f8e:	4b4a      	ldr	r3, [pc, #296]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	099b      	lsrs	r3, r3, #6
 8002f94:	2200      	movs	r2, #0
 8002f96:	623b      	str	r3, [r7, #32]
 8002f98:	627a      	str	r2, [r7, #36]	; 0x24
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002fa0:	2100      	movs	r1, #0
 8002fa2:	4b47      	ldr	r3, [pc, #284]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fa4:	fb03 f201 	mul.w	r2, r3, r1
 8002fa8:	2300      	movs	r3, #0
 8002faa:	fb00 f303 	mul.w	r3, r0, r3
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a43      	ldr	r2, [pc, #268]	; (80030c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002fb2:	fba0 1202 	umull	r1, r2, r0, r2
 8002fb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fb8:	460a      	mov	r2, r1
 8002fba:	62ba      	str	r2, [r7, #40]	; 0x28
 8002fbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fbe:	4413      	add	r3, r2
 8002fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	61bb      	str	r3, [r7, #24]
 8002fc8:	61fa      	str	r2, [r7, #28]
 8002fca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fd2:	f7fd fe01 	bl	8000bd8 <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4613      	mov	r3, r2
 8002fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fde:	e053      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe0:	4b35      	ldr	r3, [pc, #212]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	099b      	lsrs	r3, r3, #6
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	617a      	str	r2, [r7, #20]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ff2:	f04f 0b00 	mov.w	fp, #0
 8002ff6:	4652      	mov	r2, sl
 8002ff8:	465b      	mov	r3, fp
 8002ffa:	f04f 0000 	mov.w	r0, #0
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	0159      	lsls	r1, r3, #5
 8003004:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003008:	0150      	lsls	r0, r2, #5
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	ebb2 080a 	subs.w	r8, r2, sl
 8003012:	eb63 090b 	sbc.w	r9, r3, fp
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003022:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003026:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800302a:	ebb2 0408 	subs.w	r4, r2, r8
 800302e:	eb63 0509 	sbc.w	r5, r3, r9
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	00eb      	lsls	r3, r5, #3
 800303c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003040:	00e2      	lsls	r2, r4, #3
 8003042:	4614      	mov	r4, r2
 8003044:	461d      	mov	r5, r3
 8003046:	eb14 030a 	adds.w	r3, r4, sl
 800304a:	603b      	str	r3, [r7, #0]
 800304c:	eb45 030b 	adc.w	r3, r5, fp
 8003050:	607b      	str	r3, [r7, #4]
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800305e:	4629      	mov	r1, r5
 8003060:	028b      	lsls	r3, r1, #10
 8003062:	4621      	mov	r1, r4
 8003064:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003068:	4621      	mov	r1, r4
 800306a:	028a      	lsls	r2, r1, #10
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	2200      	movs	r2, #0
 8003074:	60bb      	str	r3, [r7, #8]
 8003076:	60fa      	str	r2, [r7, #12]
 8003078:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800307c:	f7fd fdac 	bl	8000bd8 <__aeabi_uldivmod>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4613      	mov	r3, r2
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	0c1b      	lsrs	r3, r3, #16
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	3301      	adds	r3, #1
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003098:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030a2:	e002      	b.n	80030aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80030a4:	4b05      	ldr	r3, [pc, #20]	; (80030bc <HAL_RCC_GetSysClockFreq+0x184>)
 80030a6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80030aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3740      	adds	r7, #64	; 0x40
 80030b0:	46bd      	mov	sp, r7
 80030b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b6:	bf00      	nop
 80030b8:	40023800 	.word	0x40023800
 80030bc:	00f42400 	.word	0x00f42400
 80030c0:	016e3600 	.word	0x016e3600

080030c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c8:	4b03      	ldr	r3, [pc, #12]	; (80030d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ca:	681b      	ldr	r3, [r3, #0]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	20000000 	.word	0x20000000

080030dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030e0:	f7ff fff0 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 80030e4:	4602      	mov	r2, r0
 80030e6:	4b05      	ldr	r3, [pc, #20]	; (80030fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	0a9b      	lsrs	r3, r3, #10
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	4903      	ldr	r1, [pc, #12]	; (8003100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030f2:	5ccb      	ldrb	r3, [r1, r3]
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40023800 	.word	0x40023800
 8003100:	08008a74 	.word	0x08008a74

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003108:	f7ff ffdc 	bl	80030c4 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b05      	ldr	r3, [pc, #20]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0b5b      	lsrs	r3, r3, #13
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4903      	ldr	r1, [pc, #12]	; (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40023800 	.word	0x40023800
 8003128:	08008a74 	.word	0x08008a74

0800312c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e273      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d075      	beq.n	8003236 <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800314a:	4b88      	ldr	r3, [pc, #544]	; (800336c <HAL_RCC_OscConfig+0x240>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 030c 	and.w	r3, r3, #12
 8003152:	2b04      	cmp	r3, #4
 8003154:	d00c      	beq.n	8003170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003156:	4b85      	ldr	r3, [pc, #532]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800315e:	2b08      	cmp	r3, #8
 8003160:	d112      	bne.n	8003188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003162:	4b82      	ldr	r3, [pc, #520]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800316a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800316e:	d10b      	bne.n	8003188 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	4b7e      	ldr	r3, [pc, #504]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05b      	beq.n	8003234 <HAL_RCC_OscConfig+0x108>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d157      	bne.n	8003234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e24e      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003190:	d106      	bne.n	80031a0 <HAL_RCC_OscConfig+0x74>
 8003192:	4b76      	ldr	r3, [pc, #472]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a75      	ldr	r2, [pc, #468]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800319c:	6013      	str	r3, [r2, #0]
 800319e:	e01d      	b.n	80031dc <HAL_RCC_OscConfig+0xb0>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x98>
 80031aa:	4b70      	ldr	r3, [pc, #448]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a6f      	ldr	r2, [pc, #444]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	4b6d      	ldr	r3, [pc, #436]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a6c      	ldr	r2, [pc, #432]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0xb0>
 80031c4:	4b69      	ldr	r3, [pc, #420]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a68      	ldr	r2, [pc, #416]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b66      	ldr	r3, [pc, #408]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a65      	ldr	r2, [pc, #404]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80031d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d013      	beq.n	800320c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe feee 	bl	8001fc4 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe feea 	bl	8001fc4 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e213      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031fe:	4b5b      	ldr	r3, [pc, #364]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d0f0      	beq.n	80031ec <HAL_RCC_OscConfig+0xc0>
 800320a:	e014      	b.n	8003236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320c:	f7fe feda 	bl	8001fc4 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003214:	f7fe fed6 	bl	8001fc4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b64      	cmp	r3, #100	; 0x64
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e1ff      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003226:	4b51      	ldr	r3, [pc, #324]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0xe8>
 8003232:	e000      	b.n	8003236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d063      	beq.n	800330a <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	f003 030c 	and.w	r3, r3, #12
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00b      	beq.n	8003266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003256:	2b08      	cmp	r3, #8
 8003258:	d11c      	bne.n	8003294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800325a:	4b44      	ldr	r3, [pc, #272]	; (800336c <HAL_RCC_OscConfig+0x240>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d116      	bne.n	8003294 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003266:	4b41      	ldr	r3, [pc, #260]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0302 	and.w	r3, r3, #2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d005      	beq.n	800327e <HAL_RCC_OscConfig+0x152>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d001      	beq.n	800327e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e1d3      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4937      	ldr	r1, [pc, #220]	; (800336c <HAL_RCC_OscConfig+0x240>)
 800328e:	4313      	orrs	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	e03a      	b.n	800330a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d020      	beq.n	80032de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800329c:	4b34      	ldr	r3, [pc, #208]	; (8003370 <HAL_RCC_OscConfig+0x244>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe fe8f 	bl	8001fc4 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032aa:	f7fe fe8b 	bl	8001fc4 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1b4      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032bc:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032c8:	4b28      	ldr	r3, [pc, #160]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4925      	ldr	r1, [pc, #148]	; (800336c <HAL_RCC_OscConfig+0x240>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
 80032dc:	e015      	b.n	800330a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032de:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCC_OscConfig+0x244>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fe6e 	bl	8001fc4 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032ec:	f7fe fe6a 	bl	8001fc4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e193      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032fe:	4b1b      	ldr	r3, [pc, #108]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d036      	beq.n	8003384 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d016      	beq.n	800334c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800331e:	4b15      	ldr	r3, [pc, #84]	; (8003374 <HAL_RCC_OscConfig+0x248>)
 8003320:	2201      	movs	r2, #1
 8003322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003324:	f7fe fe4e 	bl	8001fc4 <HAL_GetTick>
 8003328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800332c:	f7fe fe4a 	bl	8001fc4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e173      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800333e:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_OscConfig+0x240>)
 8003340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x200>
 800334a:	e01b      	b.n	8003384 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_OscConfig+0x248>)
 800334e:	2200      	movs	r2, #0
 8003350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003352:	f7fe fe37 	bl	8001fc4 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003358:	e00e      	b.n	8003378 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800335a:	f7fe fe33 	bl	8001fc4 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d907      	bls.n	8003378 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e15c      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
 800336c:	40023800 	.word	0x40023800
 8003370:	42470000 	.word	0x42470000
 8003374:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003378:	4b8a      	ldr	r3, [pc, #552]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 800337a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1ea      	bne.n	800335a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8097 	beq.w	80034c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003396:	4b83      	ldr	r3, [pc, #524]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10f      	bne.n	80033c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	2300      	movs	r3, #0
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	4b7f      	ldr	r3, [pc, #508]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 80033a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033aa:	4a7e      	ldr	r2, [pc, #504]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 80033ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033b0:	6413      	str	r3, [r2, #64]	; 0x40
 80033b2:	4b7c      	ldr	r3, [pc, #496]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033be:	2301      	movs	r3, #1
 80033c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c2:	4b79      	ldr	r3, [pc, #484]	; (80035a8 <HAL_RCC_OscConfig+0x47c>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d118      	bne.n	8003400 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ce:	4b76      	ldr	r3, [pc, #472]	; (80035a8 <HAL_RCC_OscConfig+0x47c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a75      	ldr	r2, [pc, #468]	; (80035a8 <HAL_RCC_OscConfig+0x47c>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033da:	f7fe fdf3 	bl	8001fc4 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fe fdef 	bl	8001fc4 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e118      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033f4:	4b6c      	ldr	r3, [pc, #432]	; (80035a8 <HAL_RCC_OscConfig+0x47c>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d106      	bne.n	8003416 <HAL_RCC_OscConfig+0x2ea>
 8003408:	4b66      	ldr	r3, [pc, #408]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	4a65      	ldr	r2, [pc, #404]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	6713      	str	r3, [r2, #112]	; 0x70
 8003414:	e01c      	b.n	8003450 <HAL_RCC_OscConfig+0x324>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	2b05      	cmp	r3, #5
 800341c:	d10c      	bne.n	8003438 <HAL_RCC_OscConfig+0x30c>
 800341e:	4b61      	ldr	r3, [pc, #388]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	4a60      	ldr	r2, [pc, #384]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003424:	f043 0304 	orr.w	r3, r3, #4
 8003428:	6713      	str	r3, [r2, #112]	; 0x70
 800342a:	4b5e      	ldr	r3, [pc, #376]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	4a5d      	ldr	r2, [pc, #372]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003430:	f043 0301 	orr.w	r3, r3, #1
 8003434:	6713      	str	r3, [r2, #112]	; 0x70
 8003436:	e00b      	b.n	8003450 <HAL_RCC_OscConfig+0x324>
 8003438:	4b5a      	ldr	r3, [pc, #360]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 800343a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343c:	4a59      	ldr	r2, [pc, #356]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 800343e:	f023 0301 	bic.w	r3, r3, #1
 8003442:	6713      	str	r3, [r2, #112]	; 0x70
 8003444:	4b57      	ldr	r3, [pc, #348]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003448:	4a56      	ldr	r2, [pc, #344]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 800344a:	f023 0304 	bic.w	r3, r3, #4
 800344e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d015      	beq.n	8003484 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003458:	f7fe fdb4 	bl	8001fc4 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800345e:	e00a      	b.n	8003476 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003460:	f7fe fdb0 	bl	8001fc4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	f241 3288 	movw	r2, #5000	; 0x1388
 800346e:	4293      	cmp	r3, r2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e0d7      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	4b4b      	ldr	r3, [pc, #300]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0ee      	beq.n	8003460 <HAL_RCC_OscConfig+0x334>
 8003482:	e014      	b.n	80034ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003484:	f7fe fd9e 	bl	8001fc4 <HAL_GetTick>
 8003488:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348a:	e00a      	b.n	80034a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800348c:	f7fe fd9a 	bl	8001fc4 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f241 3288 	movw	r2, #5000	; 0x1388
 800349a:	4293      	cmp	r3, r2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e0c1      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a2:	4b40      	ldr	r3, [pc, #256]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	f003 0302 	and.w	r3, r3, #2
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1ee      	bne.n	800348c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034ae:	7dfb      	ldrb	r3, [r7, #23]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d105      	bne.n	80034c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b4:	4b3b      	ldr	r3, [pc, #236]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	4a3a      	ldr	r2, [pc, #232]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 80034ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 80ad 	beq.w	8003624 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034ca:	4b36      	ldr	r3, [pc, #216]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d060      	beq.n	8003598 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d145      	bne.n	800356a <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034de:	4b33      	ldr	r3, [pc, #204]	; (80035ac <HAL_RCC_OscConfig+0x480>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fe fd6e 	bl	8001fc4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fe fd6a 	bl	8001fc4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e093      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	4b29      	ldr	r3, [pc, #164]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69da      	ldr	r2, [r3, #28]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	019b      	lsls	r3, r3, #6
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	085b      	lsrs	r3, r3, #1
 8003522:	3b01      	subs	r3, #1
 8003524:	041b      	lsls	r3, r3, #16
 8003526:	431a      	orrs	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352c:	061b      	lsls	r3, r3, #24
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003534:	071b      	lsls	r3, r3, #28
 8003536:	491b      	ldr	r1, [pc, #108]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 8003538:	4313      	orrs	r3, r2
 800353a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <HAL_RCC_OscConfig+0x480>)
 800353e:	2201      	movs	r2, #1
 8003540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003542:	f7fe fd3f 	bl	8001fc4 <HAL_GetTick>
 8003546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003548:	e008      	b.n	800355c <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800354a:	f7fe fd3b 	bl	8001fc4 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	2b02      	cmp	r3, #2
 8003556:	d901      	bls.n	800355c <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e064      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800355c:	4b11      	ldr	r3, [pc, #68]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0f0      	beq.n	800354a <HAL_RCC_OscConfig+0x41e>
 8003568:	e05c      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <HAL_RCC_OscConfig+0x480>)
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe fd28 	bl	8001fc4 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe fd24 	bl	8001fc4 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e04d      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358a:	4b06      	ldr	r3, [pc, #24]	; (80035a4 <HAL_RCC_OscConfig+0x478>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x44c>
 8003596:	e045      	b.n	8003624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d107      	bne.n	80035b0 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e040      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40007000 	.word	0x40007000
 80035ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80035b0:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <HAL_RCC_OscConfig+0x504>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d030      	beq.n	8003620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d129      	bne.n	8003620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d122      	bne.n	8003620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d119      	bne.n	8003620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d10f      	bne.n	8003620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d107      	bne.n	8003620 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d001      	beq.n	8003624 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800

08003634 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e07b      	b.n	800373e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	2b00      	cmp	r3, #0
 800364c:	d108      	bne.n	8003660 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003656:	d009      	beq.n	800366c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	61da      	str	r2, [r3, #28]
 800365e:	e005      	b.n	800366c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2200      	movs	r2, #0
 8003670:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fe f8b6 	bl	80017f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036f0:	ea42 0103 	orr.w	r1, r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	0c1b      	lsrs	r3, r3, #16
 800370a:	f003 0104 	and.w	r1, r3, #4
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	f003 0210 	and.w	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69da      	ldr	r2, [r3, #28]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800372c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3708      	adds	r7, #8
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}

08003746 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003746:	b580      	push	{r7, lr}
 8003748:	b088      	sub	sp, #32
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	603b      	str	r3, [r7, #0]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003756:	2300      	movs	r3, #0
 8003758:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003760:	2b01      	cmp	r3, #1
 8003762:	d101      	bne.n	8003768 <HAL_SPI_Transmit+0x22>
 8003764:	2302      	movs	r3, #2
 8003766:	e126      	b.n	80039b6 <HAL_SPI_Transmit+0x270>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003770:	f7fe fc28 	bl	8001fc4 <HAL_GetTick>
 8003774:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d002      	beq.n	800378c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003786:	2302      	movs	r3, #2
 8003788:	77fb      	strb	r3, [r7, #31]
    goto error;
 800378a:	e10b      	b.n	80039a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <HAL_SPI_Transmit+0x52>
 8003792:	88fb      	ldrh	r3, [r7, #6]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d102      	bne.n	800379e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800379c:	e102      	b.n	80039a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2203      	movs	r2, #3
 80037a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	88fa      	ldrh	r2, [r7, #6]
 80037b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	88fa      	ldrh	r2, [r7, #6]
 80037bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037e4:	d10f      	bne.n	8003806 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003804:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003810:	2b40      	cmp	r3, #64	; 0x40
 8003812:	d007      	beq.n	8003824 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003822:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800382c:	d14b      	bne.n	80038c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_SPI_Transmit+0xf6>
 8003836:	8afb      	ldrh	r3, [r7, #22]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d13e      	bne.n	80038ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	881a      	ldrh	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384c:	1c9a      	adds	r2, r3, #2
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003860:	e02b      	b.n	80038ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d112      	bne.n	8003896 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	881a      	ldrh	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003880:	1c9a      	adds	r2, r3, #2
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	86da      	strh	r2, [r3, #54]	; 0x36
 8003894:	e011      	b.n	80038ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003896:	f7fe fb95 	bl	8001fc4 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	69bb      	ldr	r3, [r7, #24]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d803      	bhi.n	80038ae <HAL_SPI_Transmit+0x168>
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ac:	d102      	bne.n	80038b4 <HAL_SPI_Transmit+0x16e>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d102      	bne.n	80038ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038b8:	e074      	b.n	80039a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ce      	bne.n	8003862 <HAL_SPI_Transmit+0x11c>
 80038c4:	e04c      	b.n	8003960 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d002      	beq.n	80038d4 <HAL_SPI_Transmit+0x18e>
 80038ce:	8afb      	ldrh	r3, [r7, #22]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d140      	bne.n	8003956 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	330c      	adds	r3, #12
 80038de:	7812      	ldrb	r2, [r2, #0]
 80038e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	3b01      	subs	r3, #1
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038fa:	e02c      	b.n	8003956 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 0302 	and.w	r3, r3, #2
 8003906:	2b02      	cmp	r3, #2
 8003908:	d113      	bne.n	8003932 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	330c      	adds	r3, #12
 8003914:	7812      	ldrb	r2, [r2, #0]
 8003916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	1c5a      	adds	r2, r3, #1
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003930:	e011      	b.n	8003956 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003932:	f7fe fb47 	bl	8001fc4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d803      	bhi.n	800394a <HAL_SPI_Transmit+0x204>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003948:	d102      	bne.n	8003950 <HAL_SPI_Transmit+0x20a>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003954:	e026      	b.n	80039a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1cd      	bne.n	80038fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	6839      	ldr	r1, [r7, #0]
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f000 fbcb 	bl	8004100 <SPI_EndRxTxTransaction>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2220      	movs	r2, #32
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	e000      	b.n	80039a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80039a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b088      	sub	sp, #32
 80039c2:	af02      	add	r7, sp, #8
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	603b      	str	r3, [r7, #0]
 80039ca:	4613      	mov	r3, r2
 80039cc:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80039ce:	2300      	movs	r3, #0
 80039d0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039da:	d112      	bne.n	8003a02 <HAL_SPI_Receive+0x44>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10e      	bne.n	8003a02 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2204      	movs	r2, #4
 80039e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80039ec:	88fa      	ldrh	r2, [r7, #6]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	9300      	str	r3, [sp, #0]
 80039f2:	4613      	mov	r3, r2
 80039f4:	68ba      	ldr	r2, [r7, #8]
 80039f6:	68b9      	ldr	r1, [r7, #8]
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f8f1 	bl	8003be0 <HAL_SPI_TransmitReceive>
 80039fe:	4603      	mov	r3, r0
 8003a00:	e0ea      	b.n	8003bd8 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d101      	bne.n	8003a10 <HAL_SPI_Receive+0x52>
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	e0e3      	b.n	8003bd8 <HAL_SPI_Receive+0x21a>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a18:	f7fe fad4 	bl	8001fc4 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d002      	beq.n	8003a30 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a2e:	e0ca      	b.n	8003bc6 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_SPI_Receive+0x7e>
 8003a36:	88fb      	ldrh	r3, [r7, #6]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d102      	bne.n	8003a42 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a40:	e0c1      	b.n	8003bc6 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2204      	movs	r2, #4
 8003a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	88fa      	ldrh	r2, [r7, #6]
 8003a60:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2200      	movs	r2, #0
 8003a72:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a88:	d10f      	bne.n	8003aaa <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a98:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aa8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab4:	2b40      	cmp	r3, #64	; 0x40
 8003ab6:	d007      	beq.n	8003ac8 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d162      	bne.n	8003b96 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ad0:	e02e      	b.n	8003b30 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d115      	bne.n	8003b0c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f103 020c 	add.w	r2, r3, #12
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b0a:	e011      	b.n	8003b30 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b0c:	f7fe fa5a 	bl	8001fc4 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d803      	bhi.n	8003b24 <HAL_SPI_Receive+0x166>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b22:	d102      	bne.n	8003b2a <HAL_SPI_Receive+0x16c>
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d102      	bne.n	8003b30 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b2e:	e04a      	b.n	8003bc6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d1cb      	bne.n	8003ad2 <HAL_SPI_Receive+0x114>
 8003b3a:	e031      	b.n	8003ba0 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d113      	bne.n	8003b72 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	b292      	uxth	r2, r2
 8003b56:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	1c9a      	adds	r2, r3, #2
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003b70:	e011      	b.n	8003b96 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b72:	f7fe fa27 	bl	8001fc4 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d803      	bhi.n	8003b8a <HAL_SPI_Receive+0x1cc>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b88:	d102      	bne.n	8003b90 <HAL_SPI_Receive+0x1d2>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d102      	bne.n	8003b96 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003b94:	e017      	b.n	8003bc6 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d1cd      	bne.n	8003b3c <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	6839      	ldr	r1, [r7, #0]
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fa45 	bl	8004034 <SPI_EndRxTransaction>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d002      	beq.n	8003bc4 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
 8003bc2:	e000      	b.n	8003bc6 <HAL_SPI_Receive+0x208>
  }

error :
 8003bc4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3718      	adds	r7, #24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	; 0x30
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d101      	bne.n	8003c06 <HAL_SPI_TransmitReceive+0x26>
 8003c02:	2302      	movs	r3, #2
 8003c04:	e18a      	b.n	8003f1c <HAL_SPI_TransmitReceive+0x33c>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c0e:	f7fe f9d9 	bl	8001fc4 <HAL_GetTick>
 8003c12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c24:	887b      	ldrh	r3, [r7, #2]
 8003c26:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d00f      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x70>
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c36:	d107      	bne.n	8003c48 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d103      	bne.n	8003c48 <HAL_SPI_TransmitReceive+0x68>
 8003c40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d003      	beq.n	8003c50 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c4e:	e15b      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d005      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x82>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x82>
 8003c5c:	887b      	ldrh	r3, [r7, #2]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d103      	bne.n	8003c6a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c68:	e14e      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b04      	cmp	r3, #4
 8003c74:	d003      	beq.n	8003c7e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2205      	movs	r2, #5
 8003c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	887a      	ldrh	r2, [r7, #2]
 8003c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	887a      	ldrh	r2, [r7, #2]
 8003c94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	887a      	ldrh	r2, [r7, #2]
 8003ca0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	887a      	ldrh	r2, [r7, #2]
 8003ca6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbe:	2b40      	cmp	r3, #64	; 0x40
 8003cc0:	d007      	beq.n	8003cd2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cda:	d178      	bne.n	8003dce <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_SPI_TransmitReceive+0x10a>
 8003ce4:	8b7b      	ldrh	r3, [r7, #26]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d166      	bne.n	8003db8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	881a      	ldrh	r2, [r3, #0]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	1c9a      	adds	r2, r3, #2
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	3b01      	subs	r3, #1
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d0e:	e053      	b.n	8003db8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d11b      	bne.n	8003d56 <HAL_SPI_TransmitReceive+0x176>
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d016      	beq.n	8003d56 <HAL_SPI_TransmitReceive+0x176>
 8003d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d113      	bne.n	8003d56 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	881a      	ldrh	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	1c9a      	adds	r2, r3, #2
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d119      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x1b8>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d014      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	b292      	uxth	r2, r2
 8003d7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	1c9a      	adds	r2, r3, #2
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d94:	2301      	movs	r3, #1
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d98:	f7fe f914 	bl	8001fc4 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d807      	bhi.n	8003db8 <HAL_SPI_TransmitReceive+0x1d8>
 8003da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d003      	beq.n	8003db8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003db6:	e0a7      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1a6      	bne.n	8003d10 <HAL_SPI_TransmitReceive+0x130>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1a1      	bne.n	8003d10 <HAL_SPI_TransmitReceive+0x130>
 8003dcc:	e07c      	b.n	8003ec8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_SPI_TransmitReceive+0x1fc>
 8003dd6:	8b7b      	ldrh	r3, [r7, #26]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d16b      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	330c      	adds	r3, #12
 8003de6:	7812      	ldrb	r2, [r2, #0]
 8003de8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e02:	e057      	b.n	8003eb4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d11c      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x26c>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d017      	beq.n	8003e4c <HAL_SPI_TransmitReceive+0x26c>
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d114      	bne.n	8003e4c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	7812      	ldrb	r2, [r2, #0]
 8003e2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e34:	1c5a      	adds	r2, r3, #1
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d119      	bne.n	8003e8e <HAL_SPI_TransmitReceive+0x2ae>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d014      	beq.n	8003e8e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6e:	b2d2      	uxtb	r2, r2
 8003e70:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e8e:	f7fe f899 	bl	8001fc4 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d803      	bhi.n	8003ea6 <HAL_SPI_TransmitReceive+0x2c6>
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d102      	bne.n	8003eac <HAL_SPI_TransmitReceive+0x2cc>
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d103      	bne.n	8003eb4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003eb2:	e029      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d1a2      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x224>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d19d      	bne.n	8003e04 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 f917 	bl	8004100 <SPI_EndRxTxTransaction>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d006      	beq.n	8003ee6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ee4:	e010      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	e000      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003f06:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3730      	adds	r7, #48	; 0x30
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}

08003f24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b088      	sub	sp, #32
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	603b      	str	r3, [r7, #0]
 8003f30:	4613      	mov	r3, r2
 8003f32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f34:	f7fe f846 	bl	8001fc4 <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	683a      	ldr	r2, [r7, #0]
 8003f40:	4413      	add	r3, r2
 8003f42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f44:	f7fe f83e 	bl	8001fc4 <HAL_GetTick>
 8003f48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f4a:	4b39      	ldr	r3, [pc, #228]	; (8004030 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	015b      	lsls	r3, r3, #5
 8003f50:	0d1b      	lsrs	r3, r3, #20
 8003f52:	69fa      	ldr	r2, [r7, #28]
 8003f54:	fb02 f303 	mul.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f5a:	e054      	b.n	8004006 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d050      	beq.n	8004006 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f64:	f7fe f82e 	bl	8001fc4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	69fa      	ldr	r2, [r7, #28]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d902      	bls.n	8003f7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d13d      	bne.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f92:	d111      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f9c:	d004      	beq.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fa6:	d107      	bne.n	8003fb8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc0:	d10f      	bne.n	8003fe2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e017      	b.n	8004026 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d101      	bne.n	8004000 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	3b01      	subs	r3, #1
 8004004:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4013      	ands	r3, r2
 8004010:	68ba      	ldr	r2, [r7, #8]
 8004012:	429a      	cmp	r2, r3
 8004014:	bf0c      	ite	eq
 8004016:	2301      	moveq	r3, #1
 8004018:	2300      	movne	r3, #0
 800401a:	b2db      	uxtb	r3, r3
 800401c:	461a      	mov	r2, r3
 800401e:	79fb      	ldrb	r3, [r7, #7]
 8004020:	429a      	cmp	r2, r3
 8004022:	d19b      	bne.n	8003f5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004024:	2300      	movs	r3, #0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3720      	adds	r7, #32
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20000000 	.word	0x20000000

08004034 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b086      	sub	sp, #24
 8004038:	af02      	add	r7, sp, #8
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004048:	d111      	bne.n	800406e <SPI_EndRxTransaction+0x3a>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004052:	d004      	beq.n	800405e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405c:	d107      	bne.n	800406e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800406c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004076:	d12a      	bne.n	80040ce <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004080:	d012      	beq.n	80040a8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	2200      	movs	r2, #0
 800408a:	2180      	movs	r1, #128	; 0x80
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7ff ff49 	bl	8003f24 <SPI_WaitFlagStateUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d02d      	beq.n	80040f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f043 0220 	orr.w	r2, r3, #32
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e026      	b.n	80040f6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	9300      	str	r3, [sp, #0]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	2200      	movs	r2, #0
 80040b0:	2101      	movs	r1, #1
 80040b2:	68f8      	ldr	r0, [r7, #12]
 80040b4:	f7ff ff36 	bl	8003f24 <SPI_WaitFlagStateUntilTimeout>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d01a      	beq.n	80040f4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f043 0220 	orr.w	r2, r3, #32
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e013      	b.n	80040f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	2200      	movs	r2, #0
 80040d6:	2101      	movs	r1, #1
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f7ff ff23 	bl	8003f24 <SPI_WaitFlagStateUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e000      	b.n	80040f6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
	...

08004100 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b088      	sub	sp, #32
 8004104:	af02      	add	r7, sp, #8
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800410c:	4b1b      	ldr	r3, [pc, #108]	; (800417c <SPI_EndRxTxTransaction+0x7c>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <SPI_EndRxTxTransaction+0x80>)
 8004112:	fba2 2303 	umull	r2, r3, r2, r3
 8004116:	0d5b      	lsrs	r3, r3, #21
 8004118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800411c:	fb02 f303 	mul.w	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800412a:	d112      	bne.n	8004152 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2200      	movs	r2, #0
 8004134:	2180      	movs	r1, #128	; 0x80
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f7ff fef4 	bl	8003f24 <SPI_WaitFlagStateUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f043 0220 	orr.w	r2, r3, #32
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e00f      	b.n	8004172 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	3b01      	subs	r3, #1
 800415c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004168:	2b80      	cmp	r3, #128	; 0x80
 800416a:	d0f2      	beq.n	8004152 <SPI_EndRxTxTransaction+0x52>
 800416c:	e000      	b.n	8004170 <SPI_EndRxTxTransaction+0x70>
        break;
 800416e:	bf00      	nop
  }

  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000000 	.word	0x20000000
 8004180:	165e9f81 	.word	0x165e9f81

08004184 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b082      	sub	sp, #8
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e041      	b.n	800421a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d106      	bne.n	80041b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fd fd28 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3304      	adds	r3, #4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f000 fabe 	bl	8004744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004232:	b2db      	uxtb	r3, r3
 8004234:	2b01      	cmp	r3, #1
 8004236:	d001      	beq.n	800423c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e046      	b.n	80042ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <HAL_TIM_Base_Start+0xb4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d022      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004256:	d01d      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a1f      	ldr	r2, [pc, #124]	; (80042dc <HAL_TIM_Base_Start+0xb8>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d018      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a1e      	ldr	r2, [pc, #120]	; (80042e0 <HAL_TIM_Base_Start+0xbc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d013      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <HAL_TIM_Base_Start+0xc0>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d00e      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a1b      	ldr	r2, [pc, #108]	; (80042e8 <HAL_TIM_Base_Start+0xc4>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d009      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a19      	ldr	r2, [pc, #100]	; (80042ec <HAL_TIM_Base_Start+0xc8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d004      	beq.n	8004294 <HAL_TIM_Base_Start+0x70>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a18      	ldr	r2, [pc, #96]	; (80042f0 <HAL_TIM_Base_Start+0xcc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d111      	bne.n	80042b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 0307 	and.w	r3, r3, #7
 800429e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d010      	beq.n	80042c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0201 	orr.w	r2, r2, #1
 80042b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042b6:	e007      	b.n	80042c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f042 0201 	orr.w	r2, r2, #1
 80042c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3714      	adds	r7, #20
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40010000 	.word	0x40010000
 80042dc:	40000400 	.word	0x40000400
 80042e0:	40000800 	.word	0x40000800
 80042e4:	40000c00 	.word	0x40000c00
 80042e8:	40010400 	.word	0x40010400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40001800 	.word	0x40001800

080042f4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	f241 1311 	movw	r3, #4369	; 0x1111
 8004306:	4013      	ands	r3, r2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10f      	bne.n	800432c <HAL_TIM_Base_Stop+0x38>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6a1a      	ldr	r2, [r3, #32]
 8004312:	f240 4344 	movw	r3, #1092	; 0x444
 8004316:	4013      	ands	r3, r2
 8004318:	2b00      	cmp	r3, #0
 800431a:	d107      	bne.n	800432c <HAL_TIM_Base_Stop+0x38>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0201 	bic.w	r2, r2, #1
 800432a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b02      	cmp	r3, #2
 8004356:	d122      	bne.n	800439e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b02      	cmp	r3, #2
 8004364:	d11b      	bne.n	800439e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f06f 0202 	mvn.w	r2, #2
 800436e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	f003 0303 	and.w	r3, r3, #3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d003      	beq.n	800438c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f9bf 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 800438a:	e005      	b.n	8004398 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f000 f9b1 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f9c2 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b04      	cmp	r3, #4
 80043aa:	d122      	bne.n	80043f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f003 0304 	and.w	r3, r3, #4
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d11b      	bne.n	80043f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f06f 0204 	mvn.w	r2, #4
 80043c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f000 f995 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 80043de:	e005      	b.n	80043ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 f987 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 f998 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f003 0308 	and.w	r3, r3, #8
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d122      	bne.n	8004446 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	f003 0308 	and.w	r3, r3, #8
 800440a:	2b08      	cmp	r3, #8
 800440c:	d11b      	bne.n	8004446 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f06f 0208 	mvn.w	r2, #8
 8004416:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2204      	movs	r2, #4
 800441c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	69db      	ldr	r3, [r3, #28]
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f96b 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 8004432:	e005      	b.n	8004440 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 f95d 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f96e 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	2b10      	cmp	r3, #16
 8004452:	d122      	bne.n	800449a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b10      	cmp	r3, #16
 8004460:	d11b      	bne.n	800449a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f06f 0210 	mvn.w	r2, #16
 800446a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2208      	movs	r2, #8
 8004470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f000 f941 	bl	8004708 <HAL_TIM_IC_CaptureCallback>
 8004486:	e005      	b.n	8004494 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 f933 	bl	80046f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f944 	bl	800471c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d10e      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d107      	bne.n	80044c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f06f 0201 	mvn.w	r2, #1
 80044be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f90d 	bl	80046e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d0:	2b80      	cmp	r3, #128	; 0x80
 80044d2:	d10e      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044de:	2b80      	cmp	r3, #128	; 0x80
 80044e0:	d107      	bne.n	80044f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fae9 	bl	8004ac4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044fc:	2b40      	cmp	r3, #64	; 0x40
 80044fe:	d10e      	bne.n	800451e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d107      	bne.n	800451e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f000 f909 	bl	8004730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b20      	cmp	r3, #32
 800452a:	d10e      	bne.n	800454a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b20      	cmp	r3, #32
 8004538:	d107      	bne.n	800454a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f06f 0220 	mvn.w	r2, #32
 8004542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 fab3 	bl	8004ab0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800454a:	bf00      	nop
 800454c:	3708      	adds	r7, #8
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004552:	b580      	push	{r7, lr}
 8004554:	b084      	sub	sp, #16
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
 800455a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800455c:	2300      	movs	r3, #0
 800455e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d101      	bne.n	800456e <HAL_TIM_ConfigClockSource+0x1c>
 800456a:	2302      	movs	r3, #2
 800456c:	e0b4      	b.n	80046d8 <HAL_TIM_ConfigClockSource+0x186>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2201      	movs	r2, #1
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2202      	movs	r2, #2
 800457a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800458c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004594:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a6:	d03e      	beq.n	8004626 <HAL_TIM_ConfigClockSource+0xd4>
 80045a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ac:	f200 8087 	bhi.w	80046be <HAL_TIM_ConfigClockSource+0x16c>
 80045b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b4:	f000 8086 	beq.w	80046c4 <HAL_TIM_ConfigClockSource+0x172>
 80045b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045bc:	d87f      	bhi.n	80046be <HAL_TIM_ConfigClockSource+0x16c>
 80045be:	2b70      	cmp	r3, #112	; 0x70
 80045c0:	d01a      	beq.n	80045f8 <HAL_TIM_ConfigClockSource+0xa6>
 80045c2:	2b70      	cmp	r3, #112	; 0x70
 80045c4:	d87b      	bhi.n	80046be <HAL_TIM_ConfigClockSource+0x16c>
 80045c6:	2b60      	cmp	r3, #96	; 0x60
 80045c8:	d050      	beq.n	800466c <HAL_TIM_ConfigClockSource+0x11a>
 80045ca:	2b60      	cmp	r3, #96	; 0x60
 80045cc:	d877      	bhi.n	80046be <HAL_TIM_ConfigClockSource+0x16c>
 80045ce:	2b50      	cmp	r3, #80	; 0x50
 80045d0:	d03c      	beq.n	800464c <HAL_TIM_ConfigClockSource+0xfa>
 80045d2:	2b50      	cmp	r3, #80	; 0x50
 80045d4:	d873      	bhi.n	80046be <HAL_TIM_ConfigClockSource+0x16c>
 80045d6:	2b40      	cmp	r3, #64	; 0x40
 80045d8:	d058      	beq.n	800468c <HAL_TIM_ConfigClockSource+0x13a>
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d86f      	bhi.n	80046be <HAL_TIM_ConfigClockSource+0x16c>
 80045de:	2b30      	cmp	r3, #48	; 0x30
 80045e0:	d064      	beq.n	80046ac <HAL_TIM_ConfigClockSource+0x15a>
 80045e2:	2b30      	cmp	r3, #48	; 0x30
 80045e4:	d86b      	bhi.n	80046be <HAL_TIM_ConfigClockSource+0x16c>
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d060      	beq.n	80046ac <HAL_TIM_ConfigClockSource+0x15a>
 80045ea:	2b20      	cmp	r3, #32
 80045ec:	d867      	bhi.n	80046be <HAL_TIM_ConfigClockSource+0x16c>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d05c      	beq.n	80046ac <HAL_TIM_ConfigClockSource+0x15a>
 80045f2:	2b10      	cmp	r3, #16
 80045f4:	d05a      	beq.n	80046ac <HAL_TIM_ConfigClockSource+0x15a>
 80045f6:	e062      	b.n	80046be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6818      	ldr	r0, [r3, #0]
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	6899      	ldr	r1, [r3, #8]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f000 f9b6 	bl	8004978 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800461a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	609a      	str	r2, [r3, #8]
      break;
 8004624:	e04f      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6899      	ldr	r1, [r3, #8]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	f000 f99f 	bl	8004978 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004648:	609a      	str	r2, [r3, #8]
      break;
 800464a:	e03c      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6859      	ldr	r1, [r3, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	461a      	mov	r2, r3
 800465a:	f000 f913 	bl	8004884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2150      	movs	r1, #80	; 0x50
 8004664:	4618      	mov	r0, r3
 8004666:	f000 f96c 	bl	8004942 <TIM_ITRx_SetConfig>
      break;
 800466a:	e02c      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6818      	ldr	r0, [r3, #0]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	6859      	ldr	r1, [r3, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	461a      	mov	r2, r3
 800467a:	f000 f932 	bl	80048e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2160      	movs	r1, #96	; 0x60
 8004684:	4618      	mov	r0, r3
 8004686:	f000 f95c 	bl	8004942 <TIM_ITRx_SetConfig>
      break;
 800468a:	e01c      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6818      	ldr	r0, [r3, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	461a      	mov	r2, r3
 800469a:	f000 f8f3 	bl	8004884 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2140      	movs	r1, #64	; 0x40
 80046a4:	4618      	mov	r0, r3
 80046a6:	f000 f94c 	bl	8004942 <TIM_ITRx_SetConfig>
      break;
 80046aa:	e00c      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f000 f943 	bl	8004942 <TIM_ITRx_SetConfig>
      break;
 80046bc:	e003      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	73fb      	strb	r3, [r7, #15]
      break;
 80046c2:	e000      	b.n	80046c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004738:	bf00      	nop
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr

08004744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a40      	ldr	r2, [pc, #256]	; (8004858 <TIM_Base_SetConfig+0x114>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004762:	d00f      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a3d      	ldr	r2, [pc, #244]	; (800485c <TIM_Base_SetConfig+0x118>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d00b      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a3c      	ldr	r2, [pc, #240]	; (8004860 <TIM_Base_SetConfig+0x11c>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d007      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	4a3b      	ldr	r2, [pc, #236]	; (8004864 <TIM_Base_SetConfig+0x120>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d003      	beq.n	8004784 <TIM_Base_SetConfig+0x40>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	4a3a      	ldr	r2, [pc, #232]	; (8004868 <TIM_Base_SetConfig+0x124>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d108      	bne.n	8004796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a2f      	ldr	r2, [pc, #188]	; (8004858 <TIM_Base_SetConfig+0x114>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d02b      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a4:	d027      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a2c      	ldr	r2, [pc, #176]	; (800485c <TIM_Base_SetConfig+0x118>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d023      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a2b      	ldr	r2, [pc, #172]	; (8004860 <TIM_Base_SetConfig+0x11c>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d01f      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a2a      	ldr	r2, [pc, #168]	; (8004864 <TIM_Base_SetConfig+0x120>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d01b      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a29      	ldr	r2, [pc, #164]	; (8004868 <TIM_Base_SetConfig+0x124>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d017      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a28      	ldr	r2, [pc, #160]	; (800486c <TIM_Base_SetConfig+0x128>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d013      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a27      	ldr	r2, [pc, #156]	; (8004870 <TIM_Base_SetConfig+0x12c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00f      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a26      	ldr	r2, [pc, #152]	; (8004874 <TIM_Base_SetConfig+0x130>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00b      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a25      	ldr	r2, [pc, #148]	; (8004878 <TIM_Base_SetConfig+0x134>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d007      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a24      	ldr	r2, [pc, #144]	; (800487c <TIM_Base_SetConfig+0x138>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d003      	beq.n	80047f6 <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a23      	ldr	r2, [pc, #140]	; (8004880 <TIM_Base_SetConfig+0x13c>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d108      	bne.n	8004808 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	4313      	orrs	r3, r2
 8004814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a0a      	ldr	r2, [pc, #40]	; (8004858 <TIM_Base_SetConfig+0x114>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d003      	beq.n	800483c <TIM_Base_SetConfig+0xf8>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a0c      	ldr	r2, [pc, #48]	; (8004868 <TIM_Base_SetConfig+0x124>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d103      	bne.n	8004844 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	615a      	str	r2, [r3, #20]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40010000 	.word	0x40010000
 800485c:	40000400 	.word	0x40000400
 8004860:	40000800 	.word	0x40000800
 8004864:	40000c00 	.word	0x40000c00
 8004868:	40010400 	.word	0x40010400
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800
 8004878:	40001800 	.word	0x40001800
 800487c:	40001c00 	.word	0x40001c00
 8004880:	40002000 	.word	0x40002000

08004884 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004884:	b480      	push	{r7}
 8004886:	b087      	sub	sp, #28
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	f023 0201 	bic.w	r2, r3, #1
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	693a      	ldr	r2, [r7, #16]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f023 030a 	bic.w	r3, r3, #10
 80048c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e2:	b480      	push	{r7}
 80048e4:	b087      	sub	sp, #28
 80048e6:	af00      	add	r7, sp, #0
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	60b9      	str	r1, [r7, #8]
 80048ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f023 0210 	bic.w	r2, r3, #16
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6a1b      	ldr	r3, [r3, #32]
 8004904:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800490c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	031b      	lsls	r3, r3, #12
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800491e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	011b      	lsls	r3, r3, #4
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	4313      	orrs	r3, r2
 8004928:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004958:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4313      	orrs	r3, r2
 8004960:	f043 0307 	orr.w	r3, r3, #7
 8004964:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68fa      	ldr	r2, [r7, #12]
 800496a:	609a      	str	r2, [r3, #8]
}
 800496c:	bf00      	nop
 800496e:	3714      	adds	r7, #20
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
 8004984:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004992:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	021a      	lsls	r2, r3, #8
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	431a      	orrs	r2, r3
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	4313      	orrs	r3, r2
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	697a      	ldr	r2, [r7, #20]
 80049aa:	609a      	str	r2, [r3, #8]
}
 80049ac:	bf00      	nop
 80049ae:	371c      	adds	r7, #28
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e05a      	b.n	8004a86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a21      	ldr	r2, [pc, #132]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d022      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a1c:	d01d      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1d      	ldr	r2, [pc, #116]	; (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d018      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1a      	ldr	r2, [pc, #104]	; (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d00e      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a18      	ldr	r2, [pc, #96]	; (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d009      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a17      	ldr	r2, [pc, #92]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d004      	beq.n	8004a5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a15      	ldr	r2, [pc, #84]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d10c      	bne.n	8004a74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	40010000 	.word	0x40010000
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800
 8004aa0:	40000c00 	.word	0x40000c00
 8004aa4:	40010400 	.word	0x40010400
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40001800 	.word	0x40001800

08004ab0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e03f      	b.n	8004b6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d106      	bne.n	8004b04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fd f8f8 	bl	8001cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2224      	movs	r2, #36	; 0x24
 8004b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68da      	ldr	r2, [r3, #12]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fd7b 	bl	8005618 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	691a      	ldr	r2, [r3, #16]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68da      	ldr	r2, [r3, #12]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2220      	movs	r2, #32
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}

08004b72 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b72:	b580      	push	{r7, lr}
 8004b74:	b08a      	sub	sp, #40	; 0x28
 8004b76:	af02      	add	r7, sp, #8
 8004b78:	60f8      	str	r0, [r7, #12]
 8004b7a:	60b9      	str	r1, [r7, #8]
 8004b7c:	603b      	str	r3, [r7, #0]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b82:	2300      	movs	r3, #0
 8004b84:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d17c      	bne.n	8004c8c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <HAL_UART_Transmit+0x2c>
 8004b98:	88fb      	ldrh	r3, [r7, #6]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d101      	bne.n	8004ba2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e075      	b.n	8004c8e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_UART_Transmit+0x3e>
 8004bac:	2302      	movs	r3, #2
 8004bae:	e06e      	b.n	8004c8e <HAL_UART_Transmit+0x11c>
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2221      	movs	r2, #33	; 0x21
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bc6:	f7fd f9fd 	bl	8001fc4 <HAL_GetTick>
 8004bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	88fa      	ldrh	r2, [r7, #6]
 8004bd0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	88fa      	ldrh	r2, [r7, #6]
 8004bd6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be0:	d108      	bne.n	8004bf4 <HAL_UART_Transmit+0x82>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d104      	bne.n	8004bf4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004bea:	2300      	movs	r3, #0
 8004bec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	61bb      	str	r3, [r7, #24]
 8004bf2:	e003      	b.n	8004bfc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c04:	e02a      	b.n	8004c5c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	2180      	movs	r1, #128	; 0x80
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 faf9 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e036      	b.n	8004c8e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10b      	bne.n	8004c3e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	3302      	adds	r3, #2
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	e007      	b.n	8004c4e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	781a      	ldrb	r2, [r3, #0]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c60:	b29b      	uxth	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1cf      	bne.n	8004c06 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	9300      	str	r3, [sp, #0]
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2140      	movs	r1, #64	; 0x40
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fac9 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d001      	beq.n	8004c80 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e006      	b.n	8004c8e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e000      	b.n	8004c8e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
  }
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3720      	adds	r7, #32
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
	...

08004c98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b0ba      	sub	sp, #232	; 0xe8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cce:	f003 030f 	and.w	r3, r3, #15
 8004cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004cd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10f      	bne.n	8004cfe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <HAL_UART_IRQHandler+0x66>
 8004cea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 fbd3 	bl	80054a2 <UART_Receive_IT>
      return;
 8004cfc:	e256      	b.n	80051ac <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cfe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f000 80de 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x22c>
 8004d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d0c:	f003 0301 	and.w	r3, r3, #1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d106      	bne.n	8004d22 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d18:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f000 80d1 	beq.w	8004ec4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_UART_IRQHandler+0xae>
 8004d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3e:	f043 0201 	orr.w	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4a:	f003 0304 	and.w	r3, r3, #4
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00b      	beq.n	8004d6a <HAL_UART_IRQHandler+0xd2>
 8004d52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d005      	beq.n	8004d6a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	f043 0202 	orr.w	r2, r3, #2
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <HAL_UART_IRQHandler+0xf6>
 8004d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f043 0204 	orr.w	r2, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d011      	beq.n	8004dbe <HAL_UART_IRQHandler+0x126>
 8004d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d9e:	f003 0320 	and.w	r3, r3, #32
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d105      	bne.n	8004db2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d005      	beq.n	8004dbe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f043 0208 	orr.w	r2, r3, #8
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 81ed 	beq.w	80051a2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dcc:	f003 0320 	and.w	r3, r3, #32
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_UART_IRQHandler+0x14e>
 8004dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fb5e 	bl	80054a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df0:	2b40      	cmp	r3, #64	; 0x40
 8004df2:	bf0c      	ite	eq
 8004df4:	2301      	moveq	r3, #1
 8004df6:	2300      	movne	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d103      	bne.n	8004e12 <HAL_UART_IRQHandler+0x17a>
 8004e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d04f      	beq.n	8004eb2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fa66 	bl	80052e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e22:	2b40      	cmp	r3, #64	; 0x40
 8004e24:	d141      	bne.n	8004eaa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3314      	adds	r3, #20
 8004e2c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004e3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004e40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3314      	adds	r3, #20
 8004e4e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004e52:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004e56:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004e5e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004e6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1d9      	bne.n	8004e26 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d013      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7e:	4a7d      	ldr	r2, [pc, #500]	; (8005074 <HAL_UART_IRQHandler+0x3dc>)
 8004e80:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fd fad8 	bl	800243c <HAL_DMA_Abort_IT>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d016      	beq.n	8004ec0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e00e      	b.n	8004ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f99a 	bl	80051dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea8:	e00a      	b.n	8004ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f996 	bl	80051dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	e006      	b.n	8004ec0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f992 	bl	80051dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004ebe:	e170      	b.n	80051a2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec0:	bf00      	nop
    return;
 8004ec2:	e16e      	b.n	80051a2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	f040 814a 	bne.w	8005162 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f000 8143 	beq.w	8005162 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee0:	f003 0310 	and.w	r3, r3, #16
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 813c 	beq.w	8005162 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eea:	2300      	movs	r3, #0
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	60bb      	str	r3, [r7, #8]
 8004efe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	f040 80b4 	bne.w	8005078 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f1c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8140 	beq.w	80051a6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	f080 8139 	bcs.w	80051a6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004f3a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f46:	f000 8088 	beq.w	800505a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	330c      	adds	r3, #12
 8004f50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	330c      	adds	r3, #12
 8004f72:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004f76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f82:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f86:	e841 2300 	strex	r3, r2, [r1]
 8004f8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1d9      	bne.n	8004f4a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3314      	adds	r3, #20
 8004f9c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fa0:	e853 3f00 	ldrex	r3, [r3]
 8004fa4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3314      	adds	r3, #20
 8004fb6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004fba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004fc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004fcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e1      	bne.n	8004f96 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3314      	adds	r3, #20
 8004fd8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004fe2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3314      	adds	r3, #20
 8004ff2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ff6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ff8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ffc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004ffe:	e841 2300 	strex	r3, r2, [r1]
 8005002:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005004:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1e3      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	330c      	adds	r3, #12
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005028:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800502a:	f023 0310 	bic.w	r3, r3, #16
 800502e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	330c      	adds	r3, #12
 8005038:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800503c:	65ba      	str	r2, [r7, #88]	; 0x58
 800503e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005040:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005042:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005044:	e841 2300 	strex	r3, r2, [r1]
 8005048:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800504a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1e3      	bne.n	8005018 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	4618      	mov	r0, r3
 8005056:	f7fd f981 	bl	800235c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005062:	b29b      	uxth	r3, r3
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	b29b      	uxth	r3, r3
 8005068:	4619      	mov	r1, r3
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f8c0 	bl	80051f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005070:	e099      	b.n	80051a6 <HAL_UART_IRQHandler+0x50e>
 8005072:	bf00      	nop
 8005074:	080053ab 	.word	0x080053ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005080:	b29b      	uxth	r3, r3
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800508c:	b29b      	uxth	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 808b 	beq.w	80051aa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005094:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005098:	2b00      	cmp	r3, #0
 800509a:	f000 8086 	beq.w	80051aa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	330c      	adds	r3, #12
 80050be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80050c2:	647a      	str	r2, [r7, #68]	; 0x44
 80050c4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050ca:	e841 2300 	strex	r3, r2, [r1]
 80050ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d1e3      	bne.n	800509e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3314      	adds	r3, #20
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	623b      	str	r3, [r7, #32]
   return(result);
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f023 0301 	bic.w	r3, r3, #1
 80050ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3314      	adds	r3, #20
 80050f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050fa:	633a      	str	r2, [r7, #48]	; 0x30
 80050fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e3      	bne.n	80050d6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2220      	movs	r2, #32
 8005112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	330c      	adds	r3, #12
 8005122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	e853 3f00 	ldrex	r3, [r3]
 800512a:	60fb      	str	r3, [r7, #12]
   return(result);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0310 	bic.w	r3, r3, #16
 8005132:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	330c      	adds	r3, #12
 800513c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005140:	61fa      	str	r2, [r7, #28]
 8005142:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005144:	69b9      	ldr	r1, [r7, #24]
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	e841 2300 	strex	r3, r2, [r1]
 800514c:	617b      	str	r3, [r7, #20]
   return(result);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d1e3      	bne.n	800511c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005154:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005158:	4619      	mov	r1, r3
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f848 	bl	80051f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005160:	e023      	b.n	80051aa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b00      	cmp	r3, #0
 800516c:	d009      	beq.n	8005182 <HAL_UART_IRQHandler+0x4ea>
 800516e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f929 	bl	80053d2 <UART_Transmit_IT>
    return;
 8005180:	e014      	b.n	80051ac <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00e      	beq.n	80051ac <HAL_UART_IRQHandler+0x514>
 800518e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d008      	beq.n	80051ac <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f969 	bl	8005472 <UART_EndTransmit_IT>
    return;
 80051a0:	e004      	b.n	80051ac <HAL_UART_IRQHandler+0x514>
    return;
 80051a2:	bf00      	nop
 80051a4:	e002      	b.n	80051ac <HAL_UART_IRQHandler+0x514>
      return;
 80051a6:	bf00      	nop
 80051a8:	e000      	b.n	80051ac <HAL_UART_IRQHandler+0x514>
      return;
 80051aa:	bf00      	nop
  }
}
 80051ac:	37e8      	adds	r7, #232	; 0xe8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop

080051b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051fc:	bf00      	nop
 80051fe:	370c      	adds	r7, #12
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b090      	sub	sp, #64	; 0x40
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005218:	e050      	b.n	80052bc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d04c      	beq.n	80052bc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005224:	2b00      	cmp	r3, #0
 8005226:	d007      	beq.n	8005238 <UART_WaitOnFlagUntilTimeout+0x30>
 8005228:	f7fc fecc 	bl	8001fc4 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005234:	429a      	cmp	r2, r3
 8005236:	d241      	bcs.n	80052bc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	330c      	adds	r3, #12
 800523e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005242:	e853 3f00 	ldrex	r3, [r3]
 8005246:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005258:	637a      	str	r2, [r7, #52]	; 0x34
 800525a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800525e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005260:	e841 2300 	strex	r3, r2, [r1]
 8005264:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1e5      	bne.n	8005238 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	3314      	adds	r3, #20
 8005272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	e853 3f00 	ldrex	r3, [r3]
 800527a:	613b      	str	r3, [r7, #16]
   return(result);
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	63bb      	str	r3, [r7, #56]	; 0x38
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3314      	adds	r3, #20
 800528a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800528c:	623a      	str	r2, [r7, #32]
 800528e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005290:	69f9      	ldr	r1, [r7, #28]
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	e841 2300 	strex	r3, r2, [r1]
 8005298:	61bb      	str	r3, [r7, #24]
   return(result);
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1e5      	bne.n	800526c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e00f      	b.n	80052dc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	4013      	ands	r3, r2
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	461a      	mov	r2, r3
 80052d4:	79fb      	ldrb	r3, [r7, #7]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d09f      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3740      	adds	r7, #64	; 0x40
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b095      	sub	sp, #84	; 0x54
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	330c      	adds	r3, #12
 800530a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800530c:	643a      	str	r2, [r7, #64]	; 0x40
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005312:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800531a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e5      	bne.n	80052ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3314      	adds	r3, #20
 8005326:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005330:	69fb      	ldr	r3, [r7, #28]
 8005332:	f023 0301 	bic.w	r3, r3, #1
 8005336:	64bb      	str	r3, [r7, #72]	; 0x48
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	3314      	adds	r3, #20
 800533e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005340:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005348:	e841 2300 	strex	r3, r2, [r1]
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e5      	bne.n	8005320 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	2b01      	cmp	r3, #1
 800535a:	d119      	bne.n	8005390 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	330c      	adds	r3, #12
 8005362:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	60bb      	str	r3, [r7, #8]
   return(result);
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f023 0310 	bic.w	r3, r3, #16
 8005372:	647b      	str	r3, [r7, #68]	; 0x44
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	330c      	adds	r3, #12
 800537a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800537c:	61ba      	str	r2, [r7, #24]
 800537e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6979      	ldr	r1, [r7, #20]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	613b      	str	r3, [r7, #16]
   return(result);
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e5      	bne.n	800535c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800539e:	bf00      	nop
 80053a0:	3754      	adds	r7, #84	; 0x54
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr

080053aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff ff09 	bl	80051dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b21      	cmp	r3, #33	; 0x21
 80053e4:	d13e      	bne.n	8005464 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ee:	d114      	bne.n	800541a <UART_Transmit_IT+0x48>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d110      	bne.n	800541a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800540c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	1c9a      	adds	r2, r3, #2
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	621a      	str	r2, [r3, #32]
 8005418:	e008      	b.n	800542c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	1c59      	adds	r1, r3, #1
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6211      	str	r1, [r2, #32]
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29b      	uxth	r3, r3
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	4619      	mov	r1, r3
 800543a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10f      	bne.n	8005460 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800544e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800545e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b082      	sub	sp, #8
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005488:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2220      	movs	r2, #32
 800548e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7ff fe8e 	bl	80051b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b08c      	sub	sp, #48	; 0x30
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b22      	cmp	r3, #34	; 0x22
 80054b4:	f040 80ab 	bne.w	800560e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c0:	d117      	bne.n	80054f2 <UART_Receive_IT+0x50>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d113      	bne.n	80054f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	b29b      	uxth	r3, r3
 80054dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e0:	b29a      	uxth	r2, r3
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ea:	1c9a      	adds	r2, r3, #2
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	629a      	str	r2, [r3, #40]	; 0x28
 80054f0:	e026      	b.n	8005540 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054f8:	2300      	movs	r3, #0
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005504:	d007      	beq.n	8005516 <UART_Receive_IT+0x74>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10a      	bne.n	8005524 <UART_Receive_IT+0x82>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d106      	bne.n	8005524 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	b2da      	uxtb	r2, r3
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	e008      	b.n	8005536 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005530:	b2da      	uxtb	r2, r3
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800553a:	1c5a      	adds	r2, r3, #1
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29b      	uxth	r3, r3
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4619      	mov	r1, r3
 800554e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005550:	2b00      	cmp	r3, #0
 8005552:	d15a      	bne.n	800560a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0220 	bic.w	r2, r2, #32
 8005562:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68da      	ldr	r2, [r3, #12]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005572:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695a      	ldr	r2, [r3, #20]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f022 0201 	bic.w	r2, r2, #1
 8005582:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005590:	2b01      	cmp	r3, #1
 8005592:	d135      	bne.n	8005600 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	613b      	str	r3, [r7, #16]
   return(result);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f023 0310 	bic.w	r3, r3, #16
 80055b0:	627b      	str	r3, [r7, #36]	; 0x24
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	330c      	adds	r3, #12
 80055b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ba:	623a      	str	r2, [r7, #32]
 80055bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055be:	69f9      	ldr	r1, [r7, #28]
 80055c0:	6a3a      	ldr	r2, [r7, #32]
 80055c2:	e841 2300 	strex	r3, r2, [r1]
 80055c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1e5      	bne.n	800559a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b10      	cmp	r3, #16
 80055da:	d10a      	bne.n	80055f2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055dc:	2300      	movs	r3, #0
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60fb      	str	r3, [r7, #12]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff fdf9 	bl	80051f0 <HAL_UARTEx_RxEventCallback>
 80055fe:	e002      	b.n	8005606 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fde1 	bl	80051c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e002      	b.n	8005610 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	e000      	b.n	8005610 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800560e:	2302      	movs	r3, #2
  }
}
 8005610:	4618      	mov	r0, r3
 8005612:	3730      	adds	r7, #48	; 0x30
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005618:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800561c:	b0c0      	sub	sp, #256	; 0x100
 800561e:	af00      	add	r7, sp, #0
 8005620:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005624:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	68d9      	ldr	r1, [r3, #12]
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	ea40 0301 	orr.w	r3, r0, r1
 8005640:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	431a      	orrs	r2, r3
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005654:	695b      	ldr	r3, [r3, #20]
 8005656:	431a      	orrs	r2, r3
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005670:	f021 010c 	bic.w	r1, r1, #12
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800567e:	430b      	orrs	r3, r1
 8005680:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005692:	6999      	ldr	r1, [r3, #24]
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	ea40 0301 	orr.w	r3, r0, r1
 800569e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4b8f      	ldr	r3, [pc, #572]	; (80058e4 <UART_SetConfig+0x2cc>)
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d005      	beq.n	80056b8 <UART_SetConfig+0xa0>
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4b8d      	ldr	r3, [pc, #564]	; (80058e8 <UART_SetConfig+0x2d0>)
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d104      	bne.n	80056c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056b8:	f7fd fd24 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 80056bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056c0:	e003      	b.n	80056ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056c2:	f7fd fd0b 	bl	80030dc <HAL_RCC_GetPCLK1Freq>
 80056c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d4:	f040 810c 	bne.w	80058f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056dc:	2200      	movs	r2, #0
 80056de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056ea:	4622      	mov	r2, r4
 80056ec:	462b      	mov	r3, r5
 80056ee:	1891      	adds	r1, r2, r2
 80056f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80056f2:	415b      	adcs	r3, r3
 80056f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056fa:	4621      	mov	r1, r4
 80056fc:	eb12 0801 	adds.w	r8, r2, r1
 8005700:	4629      	mov	r1, r5
 8005702:	eb43 0901 	adc.w	r9, r3, r1
 8005706:	f04f 0200 	mov.w	r2, #0
 800570a:	f04f 0300 	mov.w	r3, #0
 800570e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005712:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005716:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800571a:	4690      	mov	r8, r2
 800571c:	4699      	mov	r9, r3
 800571e:	4623      	mov	r3, r4
 8005720:	eb18 0303 	adds.w	r3, r8, r3
 8005724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005728:	462b      	mov	r3, r5
 800572a:	eb49 0303 	adc.w	r3, r9, r3
 800572e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800573e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005742:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005746:	460b      	mov	r3, r1
 8005748:	18db      	adds	r3, r3, r3
 800574a:	653b      	str	r3, [r7, #80]	; 0x50
 800574c:	4613      	mov	r3, r2
 800574e:	eb42 0303 	adc.w	r3, r2, r3
 8005752:	657b      	str	r3, [r7, #84]	; 0x54
 8005754:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005758:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800575c:	f7fb fa3c 	bl	8000bd8 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4b61      	ldr	r3, [pc, #388]	; (80058ec <UART_SetConfig+0x2d4>)
 8005766:	fba3 2302 	umull	r2, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	011c      	lsls	r4, r3, #4
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005778:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800577c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005780:	4642      	mov	r2, r8
 8005782:	464b      	mov	r3, r9
 8005784:	1891      	adds	r1, r2, r2
 8005786:	64b9      	str	r1, [r7, #72]	; 0x48
 8005788:	415b      	adcs	r3, r3
 800578a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800578c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005790:	4641      	mov	r1, r8
 8005792:	eb12 0a01 	adds.w	sl, r2, r1
 8005796:	4649      	mov	r1, r9
 8005798:	eb43 0b01 	adc.w	fp, r3, r1
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057b0:	4692      	mov	sl, r2
 80057b2:	469b      	mov	fp, r3
 80057b4:	4643      	mov	r3, r8
 80057b6:	eb1a 0303 	adds.w	r3, sl, r3
 80057ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057be:	464b      	mov	r3, r9
 80057c0:	eb4b 0303 	adc.w	r3, fp, r3
 80057c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057dc:	460b      	mov	r3, r1
 80057de:	18db      	adds	r3, r3, r3
 80057e0:	643b      	str	r3, [r7, #64]	; 0x40
 80057e2:	4613      	mov	r3, r2
 80057e4:	eb42 0303 	adc.w	r3, r2, r3
 80057e8:	647b      	str	r3, [r7, #68]	; 0x44
 80057ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057f2:	f7fb f9f1 	bl	8000bd8 <__aeabi_uldivmod>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4611      	mov	r1, r2
 80057fc:	4b3b      	ldr	r3, [pc, #236]	; (80058ec <UART_SetConfig+0x2d4>)
 80057fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005802:	095b      	lsrs	r3, r3, #5
 8005804:	2264      	movs	r2, #100	; 0x64
 8005806:	fb02 f303 	mul.w	r3, r2, r3
 800580a:	1acb      	subs	r3, r1, r3
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005812:	4b36      	ldr	r3, [pc, #216]	; (80058ec <UART_SetConfig+0x2d4>)
 8005814:	fba3 2302 	umull	r2, r3, r3, r2
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005820:	441c      	add	r4, r3
 8005822:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005826:	2200      	movs	r2, #0
 8005828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800582c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005830:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	1891      	adds	r1, r2, r2
 800583a:	63b9      	str	r1, [r7, #56]	; 0x38
 800583c:	415b      	adcs	r3, r3
 800583e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005840:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005844:	4641      	mov	r1, r8
 8005846:	1851      	adds	r1, r2, r1
 8005848:	6339      	str	r1, [r7, #48]	; 0x30
 800584a:	4649      	mov	r1, r9
 800584c:	414b      	adcs	r3, r1
 800584e:	637b      	str	r3, [r7, #52]	; 0x34
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800585c:	4659      	mov	r1, fp
 800585e:	00cb      	lsls	r3, r1, #3
 8005860:	4651      	mov	r1, sl
 8005862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005866:	4651      	mov	r1, sl
 8005868:	00ca      	lsls	r2, r1, #3
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	4603      	mov	r3, r0
 8005870:	4642      	mov	r2, r8
 8005872:	189b      	adds	r3, r3, r2
 8005874:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005878:	464b      	mov	r3, r9
 800587a:	460a      	mov	r2, r1
 800587c:	eb42 0303 	adc.w	r3, r2, r3
 8005880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005890:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005894:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005898:	460b      	mov	r3, r1
 800589a:	18db      	adds	r3, r3, r3
 800589c:	62bb      	str	r3, [r7, #40]	; 0x28
 800589e:	4613      	mov	r3, r2
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058ae:	f7fb f993 	bl	8000bd8 <__aeabi_uldivmod>
 80058b2:	4602      	mov	r2, r0
 80058b4:	460b      	mov	r3, r1
 80058b6:	4b0d      	ldr	r3, [pc, #52]	; (80058ec <UART_SetConfig+0x2d4>)
 80058b8:	fba3 1302 	umull	r1, r3, r3, r2
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	2164      	movs	r1, #100	; 0x64
 80058c0:	fb01 f303 	mul.w	r3, r1, r3
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	3332      	adds	r3, #50	; 0x32
 80058ca:	4a08      	ldr	r2, [pc, #32]	; (80058ec <UART_SetConfig+0x2d4>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	095b      	lsrs	r3, r3, #5
 80058d2:	f003 0207 	and.w	r2, r3, #7
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4422      	add	r2, r4
 80058de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058e0:	e105      	b.n	8005aee <UART_SetConfig+0x4d6>
 80058e2:	bf00      	nop
 80058e4:	40011000 	.word	0x40011000
 80058e8:	40011400 	.word	0x40011400
 80058ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058fa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005902:	4642      	mov	r2, r8
 8005904:	464b      	mov	r3, r9
 8005906:	1891      	adds	r1, r2, r2
 8005908:	6239      	str	r1, [r7, #32]
 800590a:	415b      	adcs	r3, r3
 800590c:	627b      	str	r3, [r7, #36]	; 0x24
 800590e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005912:	4641      	mov	r1, r8
 8005914:	1854      	adds	r4, r2, r1
 8005916:	4649      	mov	r1, r9
 8005918:	eb43 0501 	adc.w	r5, r3, r1
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	f04f 0300 	mov.w	r3, #0
 8005924:	00eb      	lsls	r3, r5, #3
 8005926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800592a:	00e2      	lsls	r2, r4, #3
 800592c:	4614      	mov	r4, r2
 800592e:	461d      	mov	r5, r3
 8005930:	4643      	mov	r3, r8
 8005932:	18e3      	adds	r3, r4, r3
 8005934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005938:	464b      	mov	r3, r9
 800593a:	eb45 0303 	adc.w	r3, r5, r3
 800593e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005942:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800594e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005952:	f04f 0200 	mov.w	r2, #0
 8005956:	f04f 0300 	mov.w	r3, #0
 800595a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800595e:	4629      	mov	r1, r5
 8005960:	008b      	lsls	r3, r1, #2
 8005962:	4621      	mov	r1, r4
 8005964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005968:	4621      	mov	r1, r4
 800596a:	008a      	lsls	r2, r1, #2
 800596c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005970:	f7fb f932 	bl	8000bd8 <__aeabi_uldivmod>
 8005974:	4602      	mov	r2, r0
 8005976:	460b      	mov	r3, r1
 8005978:	4b60      	ldr	r3, [pc, #384]	; (8005afc <UART_SetConfig+0x4e4>)
 800597a:	fba3 2302 	umull	r2, r3, r3, r2
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	011c      	lsls	r4, r3, #4
 8005982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005986:	2200      	movs	r2, #0
 8005988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800598c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005990:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005994:	4642      	mov	r2, r8
 8005996:	464b      	mov	r3, r9
 8005998:	1891      	adds	r1, r2, r2
 800599a:	61b9      	str	r1, [r7, #24]
 800599c:	415b      	adcs	r3, r3
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059a4:	4641      	mov	r1, r8
 80059a6:	1851      	adds	r1, r2, r1
 80059a8:	6139      	str	r1, [r7, #16]
 80059aa:	4649      	mov	r1, r9
 80059ac:	414b      	adcs	r3, r1
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059bc:	4659      	mov	r1, fp
 80059be:	00cb      	lsls	r3, r1, #3
 80059c0:	4651      	mov	r1, sl
 80059c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c6:	4651      	mov	r1, sl
 80059c8:	00ca      	lsls	r2, r1, #3
 80059ca:	4610      	mov	r0, r2
 80059cc:	4619      	mov	r1, r3
 80059ce:	4603      	mov	r3, r0
 80059d0:	4642      	mov	r2, r8
 80059d2:	189b      	adds	r3, r3, r2
 80059d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059d8:	464b      	mov	r3, r9
 80059da:	460a      	mov	r2, r1
 80059dc:	eb42 0303 	adc.w	r3, r2, r3
 80059e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	67bb      	str	r3, [r7, #120]	; 0x78
 80059ee:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059f0:	f04f 0200 	mov.w	r2, #0
 80059f4:	f04f 0300 	mov.w	r3, #0
 80059f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059fc:	4649      	mov	r1, r9
 80059fe:	008b      	lsls	r3, r1, #2
 8005a00:	4641      	mov	r1, r8
 8005a02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a06:	4641      	mov	r1, r8
 8005a08:	008a      	lsls	r2, r1, #2
 8005a0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a0e:	f7fb f8e3 	bl	8000bd8 <__aeabi_uldivmod>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
 8005a16:	4b39      	ldr	r3, [pc, #228]	; (8005afc <UART_SetConfig+0x4e4>)
 8005a18:	fba3 1302 	umull	r1, r3, r3, r2
 8005a1c:	095b      	lsrs	r3, r3, #5
 8005a1e:	2164      	movs	r1, #100	; 0x64
 8005a20:	fb01 f303 	mul.w	r3, r1, r3
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	011b      	lsls	r3, r3, #4
 8005a28:	3332      	adds	r3, #50	; 0x32
 8005a2a:	4a34      	ldr	r2, [pc, #208]	; (8005afc <UART_SetConfig+0x4e4>)
 8005a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a30:	095b      	lsrs	r3, r3, #5
 8005a32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a36:	441c      	add	r4, r3
 8005a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005a40:	677a      	str	r2, [r7, #116]	; 0x74
 8005a42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a46:	4642      	mov	r2, r8
 8005a48:	464b      	mov	r3, r9
 8005a4a:	1891      	adds	r1, r2, r2
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	415b      	adcs	r3, r3
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a56:	4641      	mov	r1, r8
 8005a58:	1851      	adds	r1, r2, r1
 8005a5a:	6039      	str	r1, [r7, #0]
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	414b      	adcs	r3, r1
 8005a60:	607b      	str	r3, [r7, #4]
 8005a62:	f04f 0200 	mov.w	r2, #0
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a6e:	4659      	mov	r1, fp
 8005a70:	00cb      	lsls	r3, r1, #3
 8005a72:	4651      	mov	r1, sl
 8005a74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a78:	4651      	mov	r1, sl
 8005a7a:	00ca      	lsls	r2, r1, #3
 8005a7c:	4610      	mov	r0, r2
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4603      	mov	r3, r0
 8005a82:	4642      	mov	r2, r8
 8005a84:	189b      	adds	r3, r3, r2
 8005a86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a88:	464b      	mov	r3, r9
 8005a8a:	460a      	mov	r2, r1
 8005a8c:	eb42 0303 	adc.w	r3, r2, r3
 8005a90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	663b      	str	r3, [r7, #96]	; 0x60
 8005a9c:	667a      	str	r2, [r7, #100]	; 0x64
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005aaa:	4649      	mov	r1, r9
 8005aac:	008b      	lsls	r3, r1, #2
 8005aae:	4641      	mov	r1, r8
 8005ab0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ab4:	4641      	mov	r1, r8
 8005ab6:	008a      	lsls	r2, r1, #2
 8005ab8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005abc:	f7fb f88c 	bl	8000bd8 <__aeabi_uldivmod>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	460b      	mov	r3, r1
 8005ac4:	4b0d      	ldr	r3, [pc, #52]	; (8005afc <UART_SetConfig+0x4e4>)
 8005ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8005aca:	095b      	lsrs	r3, r3, #5
 8005acc:	2164      	movs	r1, #100	; 0x64
 8005ace:	fb01 f303 	mul.w	r3, r1, r3
 8005ad2:	1ad3      	subs	r3, r2, r3
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	3332      	adds	r3, #50	; 0x32
 8005ad8:	4a08      	ldr	r2, [pc, #32]	; (8005afc <UART_SetConfig+0x4e4>)
 8005ada:	fba2 2303 	umull	r2, r3, r2, r3
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	f003 020f 	and.w	r2, r3, #15
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4422      	add	r2, r4
 8005aec:	609a      	str	r2, [r3, #8]
}
 8005aee:	bf00      	nop
 8005af0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005af4:	46bd      	mov	sp, r7
 8005af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005afa:	bf00      	nop
 8005afc:	51eb851f 	.word	0x51eb851f

08005b00 <__errno>:
 8005b00:	4b01      	ldr	r3, [pc, #4]	; (8005b08 <__errno+0x8>)
 8005b02:	6818      	ldr	r0, [r3, #0]
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	2000000c 	.word	0x2000000c

08005b0c <__libc_init_array>:
 8005b0c:	b570      	push	{r4, r5, r6, lr}
 8005b0e:	4d0d      	ldr	r5, [pc, #52]	; (8005b44 <__libc_init_array+0x38>)
 8005b10:	4c0d      	ldr	r4, [pc, #52]	; (8005b48 <__libc_init_array+0x3c>)
 8005b12:	1b64      	subs	r4, r4, r5
 8005b14:	10a4      	asrs	r4, r4, #2
 8005b16:	2600      	movs	r6, #0
 8005b18:	42a6      	cmp	r6, r4
 8005b1a:	d109      	bne.n	8005b30 <__libc_init_array+0x24>
 8005b1c:	4d0b      	ldr	r5, [pc, #44]	; (8005b4c <__libc_init_array+0x40>)
 8005b1e:	4c0c      	ldr	r4, [pc, #48]	; (8005b50 <__libc_init_array+0x44>)
 8005b20:	f002 ff02 	bl	8008928 <_init>
 8005b24:	1b64      	subs	r4, r4, r5
 8005b26:	10a4      	asrs	r4, r4, #2
 8005b28:	2600      	movs	r6, #0
 8005b2a:	42a6      	cmp	r6, r4
 8005b2c:	d105      	bne.n	8005b3a <__libc_init_array+0x2e>
 8005b2e:	bd70      	pop	{r4, r5, r6, pc}
 8005b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b34:	4798      	blx	r3
 8005b36:	3601      	adds	r6, #1
 8005b38:	e7ee      	b.n	8005b18 <__libc_init_array+0xc>
 8005b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3e:	4798      	blx	r3
 8005b40:	3601      	adds	r6, #1
 8005b42:	e7f2      	b.n	8005b2a <__libc_init_array+0x1e>
 8005b44:	08008e64 	.word	0x08008e64
 8005b48:	08008e64 	.word	0x08008e64
 8005b4c:	08008e64 	.word	0x08008e64
 8005b50:	08008e68 	.word	0x08008e68

08005b54 <memset>:
 8005b54:	4402      	add	r2, r0
 8005b56:	4603      	mov	r3, r0
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d100      	bne.n	8005b5e <memset+0xa>
 8005b5c:	4770      	bx	lr
 8005b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b62:	e7f9      	b.n	8005b58 <memset+0x4>

08005b64 <__cvt>:
 8005b64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b68:	ec55 4b10 	vmov	r4, r5, d0
 8005b6c:	2d00      	cmp	r5, #0
 8005b6e:	460e      	mov	r6, r1
 8005b70:	4619      	mov	r1, r3
 8005b72:	462b      	mov	r3, r5
 8005b74:	bfbb      	ittet	lt
 8005b76:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005b7a:	461d      	movlt	r5, r3
 8005b7c:	2300      	movge	r3, #0
 8005b7e:	232d      	movlt	r3, #45	; 0x2d
 8005b80:	700b      	strb	r3, [r1, #0]
 8005b82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b84:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005b88:	4691      	mov	r9, r2
 8005b8a:	f023 0820 	bic.w	r8, r3, #32
 8005b8e:	bfbc      	itt	lt
 8005b90:	4622      	movlt	r2, r4
 8005b92:	4614      	movlt	r4, r2
 8005b94:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005b98:	d005      	beq.n	8005ba6 <__cvt+0x42>
 8005b9a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005b9e:	d100      	bne.n	8005ba2 <__cvt+0x3e>
 8005ba0:	3601      	adds	r6, #1
 8005ba2:	2102      	movs	r1, #2
 8005ba4:	e000      	b.n	8005ba8 <__cvt+0x44>
 8005ba6:	2103      	movs	r1, #3
 8005ba8:	ab03      	add	r3, sp, #12
 8005baa:	9301      	str	r3, [sp, #4]
 8005bac:	ab02      	add	r3, sp, #8
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	ec45 4b10 	vmov	d0, r4, r5
 8005bb4:	4653      	mov	r3, sl
 8005bb6:	4632      	mov	r2, r6
 8005bb8:	f000 fcea 	bl	8006590 <_dtoa_r>
 8005bbc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005bc0:	4607      	mov	r7, r0
 8005bc2:	d102      	bne.n	8005bca <__cvt+0x66>
 8005bc4:	f019 0f01 	tst.w	r9, #1
 8005bc8:	d022      	beq.n	8005c10 <__cvt+0xac>
 8005bca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005bce:	eb07 0906 	add.w	r9, r7, r6
 8005bd2:	d110      	bne.n	8005bf6 <__cvt+0x92>
 8005bd4:	783b      	ldrb	r3, [r7, #0]
 8005bd6:	2b30      	cmp	r3, #48	; 0x30
 8005bd8:	d10a      	bne.n	8005bf0 <__cvt+0x8c>
 8005bda:	2200      	movs	r2, #0
 8005bdc:	2300      	movs	r3, #0
 8005bde:	4620      	mov	r0, r4
 8005be0:	4629      	mov	r1, r5
 8005be2:	f7fa ff89 	bl	8000af8 <__aeabi_dcmpeq>
 8005be6:	b918      	cbnz	r0, 8005bf0 <__cvt+0x8c>
 8005be8:	f1c6 0601 	rsb	r6, r6, #1
 8005bec:	f8ca 6000 	str.w	r6, [sl]
 8005bf0:	f8da 3000 	ldr.w	r3, [sl]
 8005bf4:	4499      	add	r9, r3
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	4620      	mov	r0, r4
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	f7fa ff7b 	bl	8000af8 <__aeabi_dcmpeq>
 8005c02:	b108      	cbz	r0, 8005c08 <__cvt+0xa4>
 8005c04:	f8cd 900c 	str.w	r9, [sp, #12]
 8005c08:	2230      	movs	r2, #48	; 0x30
 8005c0a:	9b03      	ldr	r3, [sp, #12]
 8005c0c:	454b      	cmp	r3, r9
 8005c0e:	d307      	bcc.n	8005c20 <__cvt+0xbc>
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005c14:	1bdb      	subs	r3, r3, r7
 8005c16:	4638      	mov	r0, r7
 8005c18:	6013      	str	r3, [r2, #0]
 8005c1a:	b004      	add	sp, #16
 8005c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c20:	1c59      	adds	r1, r3, #1
 8005c22:	9103      	str	r1, [sp, #12]
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	e7f0      	b.n	8005c0a <__cvt+0xa6>

08005c28 <__exponent>:
 8005c28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2900      	cmp	r1, #0
 8005c2e:	bfb8      	it	lt
 8005c30:	4249      	neglt	r1, r1
 8005c32:	f803 2b02 	strb.w	r2, [r3], #2
 8005c36:	bfb4      	ite	lt
 8005c38:	222d      	movlt	r2, #45	; 0x2d
 8005c3a:	222b      	movge	r2, #43	; 0x2b
 8005c3c:	2909      	cmp	r1, #9
 8005c3e:	7042      	strb	r2, [r0, #1]
 8005c40:	dd2a      	ble.n	8005c98 <__exponent+0x70>
 8005c42:	f10d 0407 	add.w	r4, sp, #7
 8005c46:	46a4      	mov	ip, r4
 8005c48:	270a      	movs	r7, #10
 8005c4a:	46a6      	mov	lr, r4
 8005c4c:	460a      	mov	r2, r1
 8005c4e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005c52:	fb07 1516 	mls	r5, r7, r6, r1
 8005c56:	3530      	adds	r5, #48	; 0x30
 8005c58:	2a63      	cmp	r2, #99	; 0x63
 8005c5a:	f104 34ff 	add.w	r4, r4, #4294967295
 8005c5e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005c62:	4631      	mov	r1, r6
 8005c64:	dcf1      	bgt.n	8005c4a <__exponent+0x22>
 8005c66:	3130      	adds	r1, #48	; 0x30
 8005c68:	f1ae 0502 	sub.w	r5, lr, #2
 8005c6c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005c70:	1c44      	adds	r4, r0, #1
 8005c72:	4629      	mov	r1, r5
 8005c74:	4561      	cmp	r1, ip
 8005c76:	d30a      	bcc.n	8005c8e <__exponent+0x66>
 8005c78:	f10d 0209 	add.w	r2, sp, #9
 8005c7c:	eba2 020e 	sub.w	r2, r2, lr
 8005c80:	4565      	cmp	r5, ip
 8005c82:	bf88      	it	hi
 8005c84:	2200      	movhi	r2, #0
 8005c86:	4413      	add	r3, r2
 8005c88:	1a18      	subs	r0, r3, r0
 8005c8a:	b003      	add	sp, #12
 8005c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c92:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005c96:	e7ed      	b.n	8005c74 <__exponent+0x4c>
 8005c98:	2330      	movs	r3, #48	; 0x30
 8005c9a:	3130      	adds	r1, #48	; 0x30
 8005c9c:	7083      	strb	r3, [r0, #2]
 8005c9e:	70c1      	strb	r1, [r0, #3]
 8005ca0:	1d03      	adds	r3, r0, #4
 8005ca2:	e7f1      	b.n	8005c88 <__exponent+0x60>

08005ca4 <_printf_float>:
 8005ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca8:	ed2d 8b02 	vpush	{d8}
 8005cac:	b08d      	sub	sp, #52	; 0x34
 8005cae:	460c      	mov	r4, r1
 8005cb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	461f      	mov	r7, r3
 8005cb8:	4605      	mov	r5, r0
 8005cba:	f001 fa57 	bl	800716c <_localeconv_r>
 8005cbe:	f8d0 a000 	ldr.w	sl, [r0]
 8005cc2:	4650      	mov	r0, sl
 8005cc4:	f7fa fa9c 	bl	8000200 <strlen>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	930a      	str	r3, [sp, #40]	; 0x28
 8005ccc:	6823      	ldr	r3, [r4, #0]
 8005cce:	9305      	str	r3, [sp, #20]
 8005cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8005cd4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005cd8:	3307      	adds	r3, #7
 8005cda:	f023 0307 	bic.w	r3, r3, #7
 8005cde:	f103 0208 	add.w	r2, r3, #8
 8005ce2:	f8c8 2000 	str.w	r2, [r8]
 8005ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005cee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005cf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005cf6:	9307      	str	r3, [sp, #28]
 8005cf8:	f8cd 8018 	str.w	r8, [sp, #24]
 8005cfc:	ee08 0a10 	vmov	s16, r0
 8005d00:	4b9f      	ldr	r3, [pc, #636]	; (8005f80 <_printf_float+0x2dc>)
 8005d02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d06:	f04f 32ff 	mov.w	r2, #4294967295
 8005d0a:	f7fa ff27 	bl	8000b5c <__aeabi_dcmpun>
 8005d0e:	bb88      	cbnz	r0, 8005d74 <_printf_float+0xd0>
 8005d10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d14:	4b9a      	ldr	r3, [pc, #616]	; (8005f80 <_printf_float+0x2dc>)
 8005d16:	f04f 32ff 	mov.w	r2, #4294967295
 8005d1a:	f7fa ff01 	bl	8000b20 <__aeabi_dcmple>
 8005d1e:	bb48      	cbnz	r0, 8005d74 <_printf_float+0xd0>
 8005d20:	2200      	movs	r2, #0
 8005d22:	2300      	movs	r3, #0
 8005d24:	4640      	mov	r0, r8
 8005d26:	4649      	mov	r1, r9
 8005d28:	f7fa fef0 	bl	8000b0c <__aeabi_dcmplt>
 8005d2c:	b110      	cbz	r0, 8005d34 <_printf_float+0x90>
 8005d2e:	232d      	movs	r3, #45	; 0x2d
 8005d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d34:	4b93      	ldr	r3, [pc, #588]	; (8005f84 <_printf_float+0x2e0>)
 8005d36:	4894      	ldr	r0, [pc, #592]	; (8005f88 <_printf_float+0x2e4>)
 8005d38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005d3c:	bf94      	ite	ls
 8005d3e:	4698      	movls	r8, r3
 8005d40:	4680      	movhi	r8, r0
 8005d42:	2303      	movs	r3, #3
 8005d44:	6123      	str	r3, [r4, #16]
 8005d46:	9b05      	ldr	r3, [sp, #20]
 8005d48:	f023 0204 	bic.w	r2, r3, #4
 8005d4c:	6022      	str	r2, [r4, #0]
 8005d4e:	f04f 0900 	mov.w	r9, #0
 8005d52:	9700      	str	r7, [sp, #0]
 8005d54:	4633      	mov	r3, r6
 8005d56:	aa0b      	add	r2, sp, #44	; 0x2c
 8005d58:	4621      	mov	r1, r4
 8005d5a:	4628      	mov	r0, r5
 8005d5c:	f000 f9d8 	bl	8006110 <_printf_common>
 8005d60:	3001      	adds	r0, #1
 8005d62:	f040 8090 	bne.w	8005e86 <_printf_float+0x1e2>
 8005d66:	f04f 30ff 	mov.w	r0, #4294967295
 8005d6a:	b00d      	add	sp, #52	; 0x34
 8005d6c:	ecbd 8b02 	vpop	{d8}
 8005d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d74:	4642      	mov	r2, r8
 8005d76:	464b      	mov	r3, r9
 8005d78:	4640      	mov	r0, r8
 8005d7a:	4649      	mov	r1, r9
 8005d7c:	f7fa feee 	bl	8000b5c <__aeabi_dcmpun>
 8005d80:	b140      	cbz	r0, 8005d94 <_printf_float+0xf0>
 8005d82:	464b      	mov	r3, r9
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bfbc      	itt	lt
 8005d88:	232d      	movlt	r3, #45	; 0x2d
 8005d8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005d8e:	487f      	ldr	r0, [pc, #508]	; (8005f8c <_printf_float+0x2e8>)
 8005d90:	4b7f      	ldr	r3, [pc, #508]	; (8005f90 <_printf_float+0x2ec>)
 8005d92:	e7d1      	b.n	8005d38 <_printf_float+0x94>
 8005d94:	6863      	ldr	r3, [r4, #4]
 8005d96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005d9a:	9206      	str	r2, [sp, #24]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	d13f      	bne.n	8005e20 <_printf_float+0x17c>
 8005da0:	2306      	movs	r3, #6
 8005da2:	6063      	str	r3, [r4, #4]
 8005da4:	9b05      	ldr	r3, [sp, #20]
 8005da6:	6861      	ldr	r1, [r4, #4]
 8005da8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005dac:	2300      	movs	r3, #0
 8005dae:	9303      	str	r3, [sp, #12]
 8005db0:	ab0a      	add	r3, sp, #40	; 0x28
 8005db2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005db6:	ab09      	add	r3, sp, #36	; 0x24
 8005db8:	ec49 8b10 	vmov	d0, r8, r9
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	6022      	str	r2, [r4, #0]
 8005dc0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005dc4:	4628      	mov	r0, r5
 8005dc6:	f7ff fecd 	bl	8005b64 <__cvt>
 8005dca:	9b06      	ldr	r3, [sp, #24]
 8005dcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005dce:	2b47      	cmp	r3, #71	; 0x47
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	d108      	bne.n	8005de6 <_printf_float+0x142>
 8005dd4:	1cc8      	adds	r0, r1, #3
 8005dd6:	db02      	blt.n	8005dde <_printf_float+0x13a>
 8005dd8:	6863      	ldr	r3, [r4, #4]
 8005dda:	4299      	cmp	r1, r3
 8005ddc:	dd41      	ble.n	8005e62 <_printf_float+0x1be>
 8005dde:	f1ab 0b02 	sub.w	fp, fp, #2
 8005de2:	fa5f fb8b 	uxtb.w	fp, fp
 8005de6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005dea:	d820      	bhi.n	8005e2e <_printf_float+0x18a>
 8005dec:	3901      	subs	r1, #1
 8005dee:	465a      	mov	r2, fp
 8005df0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005df4:	9109      	str	r1, [sp, #36]	; 0x24
 8005df6:	f7ff ff17 	bl	8005c28 <__exponent>
 8005dfa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005dfc:	1813      	adds	r3, r2, r0
 8005dfe:	2a01      	cmp	r2, #1
 8005e00:	4681      	mov	r9, r0
 8005e02:	6123      	str	r3, [r4, #16]
 8005e04:	dc02      	bgt.n	8005e0c <_printf_float+0x168>
 8005e06:	6822      	ldr	r2, [r4, #0]
 8005e08:	07d2      	lsls	r2, r2, #31
 8005e0a:	d501      	bpl.n	8005e10 <_printf_float+0x16c>
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	6123      	str	r3, [r4, #16]
 8005e10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d09c      	beq.n	8005d52 <_printf_float+0xae>
 8005e18:	232d      	movs	r3, #45	; 0x2d
 8005e1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e1e:	e798      	b.n	8005d52 <_printf_float+0xae>
 8005e20:	9a06      	ldr	r2, [sp, #24]
 8005e22:	2a47      	cmp	r2, #71	; 0x47
 8005e24:	d1be      	bne.n	8005da4 <_printf_float+0x100>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d1bc      	bne.n	8005da4 <_printf_float+0x100>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e7b9      	b.n	8005da2 <_printf_float+0xfe>
 8005e2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005e32:	d118      	bne.n	8005e66 <_printf_float+0x1c2>
 8005e34:	2900      	cmp	r1, #0
 8005e36:	6863      	ldr	r3, [r4, #4]
 8005e38:	dd0b      	ble.n	8005e52 <_printf_float+0x1ae>
 8005e3a:	6121      	str	r1, [r4, #16]
 8005e3c:	b913      	cbnz	r3, 8005e44 <_printf_float+0x1a0>
 8005e3e:	6822      	ldr	r2, [r4, #0]
 8005e40:	07d0      	lsls	r0, r2, #31
 8005e42:	d502      	bpl.n	8005e4a <_printf_float+0x1a6>
 8005e44:	3301      	adds	r3, #1
 8005e46:	440b      	add	r3, r1
 8005e48:	6123      	str	r3, [r4, #16]
 8005e4a:	65a1      	str	r1, [r4, #88]	; 0x58
 8005e4c:	f04f 0900 	mov.w	r9, #0
 8005e50:	e7de      	b.n	8005e10 <_printf_float+0x16c>
 8005e52:	b913      	cbnz	r3, 8005e5a <_printf_float+0x1b6>
 8005e54:	6822      	ldr	r2, [r4, #0]
 8005e56:	07d2      	lsls	r2, r2, #31
 8005e58:	d501      	bpl.n	8005e5e <_printf_float+0x1ba>
 8005e5a:	3302      	adds	r3, #2
 8005e5c:	e7f4      	b.n	8005e48 <_printf_float+0x1a4>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e7f2      	b.n	8005e48 <_printf_float+0x1a4>
 8005e62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005e66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e68:	4299      	cmp	r1, r3
 8005e6a:	db05      	blt.n	8005e78 <_printf_float+0x1d4>
 8005e6c:	6823      	ldr	r3, [r4, #0]
 8005e6e:	6121      	str	r1, [r4, #16]
 8005e70:	07d8      	lsls	r0, r3, #31
 8005e72:	d5ea      	bpl.n	8005e4a <_printf_float+0x1a6>
 8005e74:	1c4b      	adds	r3, r1, #1
 8005e76:	e7e7      	b.n	8005e48 <_printf_float+0x1a4>
 8005e78:	2900      	cmp	r1, #0
 8005e7a:	bfd4      	ite	le
 8005e7c:	f1c1 0202 	rsble	r2, r1, #2
 8005e80:	2201      	movgt	r2, #1
 8005e82:	4413      	add	r3, r2
 8005e84:	e7e0      	b.n	8005e48 <_printf_float+0x1a4>
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	055a      	lsls	r2, r3, #21
 8005e8a:	d407      	bmi.n	8005e9c <_printf_float+0x1f8>
 8005e8c:	6923      	ldr	r3, [r4, #16]
 8005e8e:	4642      	mov	r2, r8
 8005e90:	4631      	mov	r1, r6
 8005e92:	4628      	mov	r0, r5
 8005e94:	47b8      	blx	r7
 8005e96:	3001      	adds	r0, #1
 8005e98:	d12c      	bne.n	8005ef4 <_printf_float+0x250>
 8005e9a:	e764      	b.n	8005d66 <_printf_float+0xc2>
 8005e9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ea0:	f240 80e0 	bls.w	8006064 <_printf_float+0x3c0>
 8005ea4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	2300      	movs	r3, #0
 8005eac:	f7fa fe24 	bl	8000af8 <__aeabi_dcmpeq>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d034      	beq.n	8005f1e <_printf_float+0x27a>
 8005eb4:	4a37      	ldr	r2, [pc, #220]	; (8005f94 <_printf_float+0x2f0>)
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	4631      	mov	r1, r6
 8005eba:	4628      	mov	r0, r5
 8005ebc:	47b8      	blx	r7
 8005ebe:	3001      	adds	r0, #1
 8005ec0:	f43f af51 	beq.w	8005d66 <_printf_float+0xc2>
 8005ec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	db02      	blt.n	8005ed2 <_printf_float+0x22e>
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	07d8      	lsls	r0, r3, #31
 8005ed0:	d510      	bpl.n	8005ef4 <_printf_float+0x250>
 8005ed2:	ee18 3a10 	vmov	r3, s16
 8005ed6:	4652      	mov	r2, sl
 8005ed8:	4631      	mov	r1, r6
 8005eda:	4628      	mov	r0, r5
 8005edc:	47b8      	blx	r7
 8005ede:	3001      	adds	r0, #1
 8005ee0:	f43f af41 	beq.w	8005d66 <_printf_float+0xc2>
 8005ee4:	f04f 0800 	mov.w	r8, #0
 8005ee8:	f104 091a 	add.w	r9, r4, #26
 8005eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	4543      	cmp	r3, r8
 8005ef2:	dc09      	bgt.n	8005f08 <_printf_float+0x264>
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	079b      	lsls	r3, r3, #30
 8005ef8:	f100 8105 	bmi.w	8006106 <_printf_float+0x462>
 8005efc:	68e0      	ldr	r0, [r4, #12]
 8005efe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f00:	4298      	cmp	r0, r3
 8005f02:	bfb8      	it	lt
 8005f04:	4618      	movlt	r0, r3
 8005f06:	e730      	b.n	8005d6a <_printf_float+0xc6>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	464a      	mov	r2, r9
 8005f0c:	4631      	mov	r1, r6
 8005f0e:	4628      	mov	r0, r5
 8005f10:	47b8      	blx	r7
 8005f12:	3001      	adds	r0, #1
 8005f14:	f43f af27 	beq.w	8005d66 <_printf_float+0xc2>
 8005f18:	f108 0801 	add.w	r8, r8, #1
 8005f1c:	e7e6      	b.n	8005eec <_printf_float+0x248>
 8005f1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	dc39      	bgt.n	8005f98 <_printf_float+0x2f4>
 8005f24:	4a1b      	ldr	r2, [pc, #108]	; (8005f94 <_printf_float+0x2f0>)
 8005f26:	2301      	movs	r3, #1
 8005f28:	4631      	mov	r1, r6
 8005f2a:	4628      	mov	r0, r5
 8005f2c:	47b8      	blx	r7
 8005f2e:	3001      	adds	r0, #1
 8005f30:	f43f af19 	beq.w	8005d66 <_printf_float+0xc2>
 8005f34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	d102      	bne.n	8005f42 <_printf_float+0x29e>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	07d9      	lsls	r1, r3, #31
 8005f40:	d5d8      	bpl.n	8005ef4 <_printf_float+0x250>
 8005f42:	ee18 3a10 	vmov	r3, s16
 8005f46:	4652      	mov	r2, sl
 8005f48:	4631      	mov	r1, r6
 8005f4a:	4628      	mov	r0, r5
 8005f4c:	47b8      	blx	r7
 8005f4e:	3001      	adds	r0, #1
 8005f50:	f43f af09 	beq.w	8005d66 <_printf_float+0xc2>
 8005f54:	f04f 0900 	mov.w	r9, #0
 8005f58:	f104 0a1a 	add.w	sl, r4, #26
 8005f5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f5e:	425b      	negs	r3, r3
 8005f60:	454b      	cmp	r3, r9
 8005f62:	dc01      	bgt.n	8005f68 <_printf_float+0x2c4>
 8005f64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f66:	e792      	b.n	8005e8e <_printf_float+0x1ea>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	4652      	mov	r2, sl
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	4628      	mov	r0, r5
 8005f70:	47b8      	blx	r7
 8005f72:	3001      	adds	r0, #1
 8005f74:	f43f aef7 	beq.w	8005d66 <_printf_float+0xc2>
 8005f78:	f109 0901 	add.w	r9, r9, #1
 8005f7c:	e7ee      	b.n	8005f5c <_printf_float+0x2b8>
 8005f7e:	bf00      	nop
 8005f80:	7fefffff 	.word	0x7fefffff
 8005f84:	08008a88 	.word	0x08008a88
 8005f88:	08008a8c 	.word	0x08008a8c
 8005f8c:	08008a94 	.word	0x08008a94
 8005f90:	08008a90 	.word	0x08008a90
 8005f94:	08008a98 	.word	0x08008a98
 8005f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	bfa8      	it	ge
 8005fa0:	461a      	movge	r2, r3
 8005fa2:	2a00      	cmp	r2, #0
 8005fa4:	4691      	mov	r9, r2
 8005fa6:	dc37      	bgt.n	8006018 <_printf_float+0x374>
 8005fa8:	f04f 0b00 	mov.w	fp, #0
 8005fac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fb0:	f104 021a 	add.w	r2, r4, #26
 8005fb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fb6:	9305      	str	r3, [sp, #20]
 8005fb8:	eba3 0309 	sub.w	r3, r3, r9
 8005fbc:	455b      	cmp	r3, fp
 8005fbe:	dc33      	bgt.n	8006028 <_printf_float+0x384>
 8005fc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	db3b      	blt.n	8006040 <_printf_float+0x39c>
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	07da      	lsls	r2, r3, #31
 8005fcc:	d438      	bmi.n	8006040 <_printf_float+0x39c>
 8005fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd0:	9a05      	ldr	r2, [sp, #20]
 8005fd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005fd4:	1a9a      	subs	r2, r3, r2
 8005fd6:	eba3 0901 	sub.w	r9, r3, r1
 8005fda:	4591      	cmp	r9, r2
 8005fdc:	bfa8      	it	ge
 8005fde:	4691      	movge	r9, r2
 8005fe0:	f1b9 0f00 	cmp.w	r9, #0
 8005fe4:	dc35      	bgt.n	8006052 <_printf_float+0x3ae>
 8005fe6:	f04f 0800 	mov.w	r8, #0
 8005fea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005fee:	f104 0a1a 	add.w	sl, r4, #26
 8005ff2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	eba3 0309 	sub.w	r3, r3, r9
 8005ffc:	4543      	cmp	r3, r8
 8005ffe:	f77f af79 	ble.w	8005ef4 <_printf_float+0x250>
 8006002:	2301      	movs	r3, #1
 8006004:	4652      	mov	r2, sl
 8006006:	4631      	mov	r1, r6
 8006008:	4628      	mov	r0, r5
 800600a:	47b8      	blx	r7
 800600c:	3001      	adds	r0, #1
 800600e:	f43f aeaa 	beq.w	8005d66 <_printf_float+0xc2>
 8006012:	f108 0801 	add.w	r8, r8, #1
 8006016:	e7ec      	b.n	8005ff2 <_printf_float+0x34e>
 8006018:	4613      	mov	r3, r2
 800601a:	4631      	mov	r1, r6
 800601c:	4642      	mov	r2, r8
 800601e:	4628      	mov	r0, r5
 8006020:	47b8      	blx	r7
 8006022:	3001      	adds	r0, #1
 8006024:	d1c0      	bne.n	8005fa8 <_printf_float+0x304>
 8006026:	e69e      	b.n	8005d66 <_printf_float+0xc2>
 8006028:	2301      	movs	r3, #1
 800602a:	4631      	mov	r1, r6
 800602c:	4628      	mov	r0, r5
 800602e:	9205      	str	r2, [sp, #20]
 8006030:	47b8      	blx	r7
 8006032:	3001      	adds	r0, #1
 8006034:	f43f ae97 	beq.w	8005d66 <_printf_float+0xc2>
 8006038:	9a05      	ldr	r2, [sp, #20]
 800603a:	f10b 0b01 	add.w	fp, fp, #1
 800603e:	e7b9      	b.n	8005fb4 <_printf_float+0x310>
 8006040:	ee18 3a10 	vmov	r3, s16
 8006044:	4652      	mov	r2, sl
 8006046:	4631      	mov	r1, r6
 8006048:	4628      	mov	r0, r5
 800604a:	47b8      	blx	r7
 800604c:	3001      	adds	r0, #1
 800604e:	d1be      	bne.n	8005fce <_printf_float+0x32a>
 8006050:	e689      	b.n	8005d66 <_printf_float+0xc2>
 8006052:	9a05      	ldr	r2, [sp, #20]
 8006054:	464b      	mov	r3, r9
 8006056:	4442      	add	r2, r8
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	d1c1      	bne.n	8005fe6 <_printf_float+0x342>
 8006062:	e680      	b.n	8005d66 <_printf_float+0xc2>
 8006064:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006066:	2a01      	cmp	r2, #1
 8006068:	dc01      	bgt.n	800606e <_printf_float+0x3ca>
 800606a:	07db      	lsls	r3, r3, #31
 800606c:	d538      	bpl.n	80060e0 <_printf_float+0x43c>
 800606e:	2301      	movs	r3, #1
 8006070:	4642      	mov	r2, r8
 8006072:	4631      	mov	r1, r6
 8006074:	4628      	mov	r0, r5
 8006076:	47b8      	blx	r7
 8006078:	3001      	adds	r0, #1
 800607a:	f43f ae74 	beq.w	8005d66 <_printf_float+0xc2>
 800607e:	ee18 3a10 	vmov	r3, s16
 8006082:	4652      	mov	r2, sl
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	f43f ae6b 	beq.w	8005d66 <_printf_float+0xc2>
 8006090:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006094:	2200      	movs	r2, #0
 8006096:	2300      	movs	r3, #0
 8006098:	f7fa fd2e 	bl	8000af8 <__aeabi_dcmpeq>
 800609c:	b9d8      	cbnz	r0, 80060d6 <_printf_float+0x432>
 800609e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060a0:	f108 0201 	add.w	r2, r8, #1
 80060a4:	3b01      	subs	r3, #1
 80060a6:	4631      	mov	r1, r6
 80060a8:	4628      	mov	r0, r5
 80060aa:	47b8      	blx	r7
 80060ac:	3001      	adds	r0, #1
 80060ae:	d10e      	bne.n	80060ce <_printf_float+0x42a>
 80060b0:	e659      	b.n	8005d66 <_printf_float+0xc2>
 80060b2:	2301      	movs	r3, #1
 80060b4:	4652      	mov	r2, sl
 80060b6:	4631      	mov	r1, r6
 80060b8:	4628      	mov	r0, r5
 80060ba:	47b8      	blx	r7
 80060bc:	3001      	adds	r0, #1
 80060be:	f43f ae52 	beq.w	8005d66 <_printf_float+0xc2>
 80060c2:	f108 0801 	add.w	r8, r8, #1
 80060c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060c8:	3b01      	subs	r3, #1
 80060ca:	4543      	cmp	r3, r8
 80060cc:	dcf1      	bgt.n	80060b2 <_printf_float+0x40e>
 80060ce:	464b      	mov	r3, r9
 80060d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80060d4:	e6dc      	b.n	8005e90 <_printf_float+0x1ec>
 80060d6:	f04f 0800 	mov.w	r8, #0
 80060da:	f104 0a1a 	add.w	sl, r4, #26
 80060de:	e7f2      	b.n	80060c6 <_printf_float+0x422>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4642      	mov	r2, r8
 80060e4:	e7df      	b.n	80060a6 <_printf_float+0x402>
 80060e6:	2301      	movs	r3, #1
 80060e8:	464a      	mov	r2, r9
 80060ea:	4631      	mov	r1, r6
 80060ec:	4628      	mov	r0, r5
 80060ee:	47b8      	blx	r7
 80060f0:	3001      	adds	r0, #1
 80060f2:	f43f ae38 	beq.w	8005d66 <_printf_float+0xc2>
 80060f6:	f108 0801 	add.w	r8, r8, #1
 80060fa:	68e3      	ldr	r3, [r4, #12]
 80060fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060fe:	1a5b      	subs	r3, r3, r1
 8006100:	4543      	cmp	r3, r8
 8006102:	dcf0      	bgt.n	80060e6 <_printf_float+0x442>
 8006104:	e6fa      	b.n	8005efc <_printf_float+0x258>
 8006106:	f04f 0800 	mov.w	r8, #0
 800610a:	f104 0919 	add.w	r9, r4, #25
 800610e:	e7f4      	b.n	80060fa <_printf_float+0x456>

08006110 <_printf_common>:
 8006110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006114:	4616      	mov	r6, r2
 8006116:	4699      	mov	r9, r3
 8006118:	688a      	ldr	r2, [r1, #8]
 800611a:	690b      	ldr	r3, [r1, #16]
 800611c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006120:	4293      	cmp	r3, r2
 8006122:	bfb8      	it	lt
 8006124:	4613      	movlt	r3, r2
 8006126:	6033      	str	r3, [r6, #0]
 8006128:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800612c:	4607      	mov	r7, r0
 800612e:	460c      	mov	r4, r1
 8006130:	b10a      	cbz	r2, 8006136 <_printf_common+0x26>
 8006132:	3301      	adds	r3, #1
 8006134:	6033      	str	r3, [r6, #0]
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	0699      	lsls	r1, r3, #26
 800613a:	bf42      	ittt	mi
 800613c:	6833      	ldrmi	r3, [r6, #0]
 800613e:	3302      	addmi	r3, #2
 8006140:	6033      	strmi	r3, [r6, #0]
 8006142:	6825      	ldr	r5, [r4, #0]
 8006144:	f015 0506 	ands.w	r5, r5, #6
 8006148:	d106      	bne.n	8006158 <_printf_common+0x48>
 800614a:	f104 0a19 	add.w	sl, r4, #25
 800614e:	68e3      	ldr	r3, [r4, #12]
 8006150:	6832      	ldr	r2, [r6, #0]
 8006152:	1a9b      	subs	r3, r3, r2
 8006154:	42ab      	cmp	r3, r5
 8006156:	dc26      	bgt.n	80061a6 <_printf_common+0x96>
 8006158:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800615c:	1e13      	subs	r3, r2, #0
 800615e:	6822      	ldr	r2, [r4, #0]
 8006160:	bf18      	it	ne
 8006162:	2301      	movne	r3, #1
 8006164:	0692      	lsls	r2, r2, #26
 8006166:	d42b      	bmi.n	80061c0 <_printf_common+0xb0>
 8006168:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800616c:	4649      	mov	r1, r9
 800616e:	4638      	mov	r0, r7
 8006170:	47c0      	blx	r8
 8006172:	3001      	adds	r0, #1
 8006174:	d01e      	beq.n	80061b4 <_printf_common+0xa4>
 8006176:	6823      	ldr	r3, [r4, #0]
 8006178:	68e5      	ldr	r5, [r4, #12]
 800617a:	6832      	ldr	r2, [r6, #0]
 800617c:	f003 0306 	and.w	r3, r3, #6
 8006180:	2b04      	cmp	r3, #4
 8006182:	bf08      	it	eq
 8006184:	1aad      	subeq	r5, r5, r2
 8006186:	68a3      	ldr	r3, [r4, #8]
 8006188:	6922      	ldr	r2, [r4, #16]
 800618a:	bf0c      	ite	eq
 800618c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006190:	2500      	movne	r5, #0
 8006192:	4293      	cmp	r3, r2
 8006194:	bfc4      	itt	gt
 8006196:	1a9b      	subgt	r3, r3, r2
 8006198:	18ed      	addgt	r5, r5, r3
 800619a:	2600      	movs	r6, #0
 800619c:	341a      	adds	r4, #26
 800619e:	42b5      	cmp	r5, r6
 80061a0:	d11a      	bne.n	80061d8 <_printf_common+0xc8>
 80061a2:	2000      	movs	r0, #0
 80061a4:	e008      	b.n	80061b8 <_printf_common+0xa8>
 80061a6:	2301      	movs	r3, #1
 80061a8:	4652      	mov	r2, sl
 80061aa:	4649      	mov	r1, r9
 80061ac:	4638      	mov	r0, r7
 80061ae:	47c0      	blx	r8
 80061b0:	3001      	adds	r0, #1
 80061b2:	d103      	bne.n	80061bc <_printf_common+0xac>
 80061b4:	f04f 30ff 	mov.w	r0, #4294967295
 80061b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061bc:	3501      	adds	r5, #1
 80061be:	e7c6      	b.n	800614e <_printf_common+0x3e>
 80061c0:	18e1      	adds	r1, r4, r3
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	2030      	movs	r0, #48	; 0x30
 80061c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061ca:	4422      	add	r2, r4
 80061cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061d4:	3302      	adds	r3, #2
 80061d6:	e7c7      	b.n	8006168 <_printf_common+0x58>
 80061d8:	2301      	movs	r3, #1
 80061da:	4622      	mov	r2, r4
 80061dc:	4649      	mov	r1, r9
 80061de:	4638      	mov	r0, r7
 80061e0:	47c0      	blx	r8
 80061e2:	3001      	adds	r0, #1
 80061e4:	d0e6      	beq.n	80061b4 <_printf_common+0xa4>
 80061e6:	3601      	adds	r6, #1
 80061e8:	e7d9      	b.n	800619e <_printf_common+0x8e>
	...

080061ec <_printf_i>:
 80061ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061f0:	7e0f      	ldrb	r7, [r1, #24]
 80061f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061f4:	2f78      	cmp	r7, #120	; 0x78
 80061f6:	4691      	mov	r9, r2
 80061f8:	4680      	mov	r8, r0
 80061fa:	460c      	mov	r4, r1
 80061fc:	469a      	mov	sl, r3
 80061fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006202:	d807      	bhi.n	8006214 <_printf_i+0x28>
 8006204:	2f62      	cmp	r7, #98	; 0x62
 8006206:	d80a      	bhi.n	800621e <_printf_i+0x32>
 8006208:	2f00      	cmp	r7, #0
 800620a:	f000 80d8 	beq.w	80063be <_printf_i+0x1d2>
 800620e:	2f58      	cmp	r7, #88	; 0x58
 8006210:	f000 80a3 	beq.w	800635a <_printf_i+0x16e>
 8006214:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006218:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800621c:	e03a      	b.n	8006294 <_printf_i+0xa8>
 800621e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006222:	2b15      	cmp	r3, #21
 8006224:	d8f6      	bhi.n	8006214 <_printf_i+0x28>
 8006226:	a101      	add	r1, pc, #4	; (adr r1, 800622c <_printf_i+0x40>)
 8006228:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800622c:	08006285 	.word	0x08006285
 8006230:	08006299 	.word	0x08006299
 8006234:	08006215 	.word	0x08006215
 8006238:	08006215 	.word	0x08006215
 800623c:	08006215 	.word	0x08006215
 8006240:	08006215 	.word	0x08006215
 8006244:	08006299 	.word	0x08006299
 8006248:	08006215 	.word	0x08006215
 800624c:	08006215 	.word	0x08006215
 8006250:	08006215 	.word	0x08006215
 8006254:	08006215 	.word	0x08006215
 8006258:	080063a5 	.word	0x080063a5
 800625c:	080062c9 	.word	0x080062c9
 8006260:	08006387 	.word	0x08006387
 8006264:	08006215 	.word	0x08006215
 8006268:	08006215 	.word	0x08006215
 800626c:	080063c7 	.word	0x080063c7
 8006270:	08006215 	.word	0x08006215
 8006274:	080062c9 	.word	0x080062c9
 8006278:	08006215 	.word	0x08006215
 800627c:	08006215 	.word	0x08006215
 8006280:	0800638f 	.word	0x0800638f
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	1d1a      	adds	r2, r3, #4
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	602a      	str	r2, [r5, #0]
 800628c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006290:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006294:	2301      	movs	r3, #1
 8006296:	e0a3      	b.n	80063e0 <_printf_i+0x1f4>
 8006298:	6820      	ldr	r0, [r4, #0]
 800629a:	6829      	ldr	r1, [r5, #0]
 800629c:	0606      	lsls	r6, r0, #24
 800629e:	f101 0304 	add.w	r3, r1, #4
 80062a2:	d50a      	bpl.n	80062ba <_printf_i+0xce>
 80062a4:	680e      	ldr	r6, [r1, #0]
 80062a6:	602b      	str	r3, [r5, #0]
 80062a8:	2e00      	cmp	r6, #0
 80062aa:	da03      	bge.n	80062b4 <_printf_i+0xc8>
 80062ac:	232d      	movs	r3, #45	; 0x2d
 80062ae:	4276      	negs	r6, r6
 80062b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062b4:	485e      	ldr	r0, [pc, #376]	; (8006430 <_printf_i+0x244>)
 80062b6:	230a      	movs	r3, #10
 80062b8:	e019      	b.n	80062ee <_printf_i+0x102>
 80062ba:	680e      	ldr	r6, [r1, #0]
 80062bc:	602b      	str	r3, [r5, #0]
 80062be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80062c2:	bf18      	it	ne
 80062c4:	b236      	sxthne	r6, r6
 80062c6:	e7ef      	b.n	80062a8 <_printf_i+0xbc>
 80062c8:	682b      	ldr	r3, [r5, #0]
 80062ca:	6820      	ldr	r0, [r4, #0]
 80062cc:	1d19      	adds	r1, r3, #4
 80062ce:	6029      	str	r1, [r5, #0]
 80062d0:	0601      	lsls	r1, r0, #24
 80062d2:	d501      	bpl.n	80062d8 <_printf_i+0xec>
 80062d4:	681e      	ldr	r6, [r3, #0]
 80062d6:	e002      	b.n	80062de <_printf_i+0xf2>
 80062d8:	0646      	lsls	r6, r0, #25
 80062da:	d5fb      	bpl.n	80062d4 <_printf_i+0xe8>
 80062dc:	881e      	ldrh	r6, [r3, #0]
 80062de:	4854      	ldr	r0, [pc, #336]	; (8006430 <_printf_i+0x244>)
 80062e0:	2f6f      	cmp	r7, #111	; 0x6f
 80062e2:	bf0c      	ite	eq
 80062e4:	2308      	moveq	r3, #8
 80062e6:	230a      	movne	r3, #10
 80062e8:	2100      	movs	r1, #0
 80062ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062ee:	6865      	ldr	r5, [r4, #4]
 80062f0:	60a5      	str	r5, [r4, #8]
 80062f2:	2d00      	cmp	r5, #0
 80062f4:	bfa2      	ittt	ge
 80062f6:	6821      	ldrge	r1, [r4, #0]
 80062f8:	f021 0104 	bicge.w	r1, r1, #4
 80062fc:	6021      	strge	r1, [r4, #0]
 80062fe:	b90e      	cbnz	r6, 8006304 <_printf_i+0x118>
 8006300:	2d00      	cmp	r5, #0
 8006302:	d04d      	beq.n	80063a0 <_printf_i+0x1b4>
 8006304:	4615      	mov	r5, r2
 8006306:	fbb6 f1f3 	udiv	r1, r6, r3
 800630a:	fb03 6711 	mls	r7, r3, r1, r6
 800630e:	5dc7      	ldrb	r7, [r0, r7]
 8006310:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006314:	4637      	mov	r7, r6
 8006316:	42bb      	cmp	r3, r7
 8006318:	460e      	mov	r6, r1
 800631a:	d9f4      	bls.n	8006306 <_printf_i+0x11a>
 800631c:	2b08      	cmp	r3, #8
 800631e:	d10b      	bne.n	8006338 <_printf_i+0x14c>
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	07de      	lsls	r6, r3, #31
 8006324:	d508      	bpl.n	8006338 <_printf_i+0x14c>
 8006326:	6923      	ldr	r3, [r4, #16]
 8006328:	6861      	ldr	r1, [r4, #4]
 800632a:	4299      	cmp	r1, r3
 800632c:	bfde      	ittt	le
 800632e:	2330      	movle	r3, #48	; 0x30
 8006330:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006334:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006338:	1b52      	subs	r2, r2, r5
 800633a:	6122      	str	r2, [r4, #16]
 800633c:	f8cd a000 	str.w	sl, [sp]
 8006340:	464b      	mov	r3, r9
 8006342:	aa03      	add	r2, sp, #12
 8006344:	4621      	mov	r1, r4
 8006346:	4640      	mov	r0, r8
 8006348:	f7ff fee2 	bl	8006110 <_printf_common>
 800634c:	3001      	adds	r0, #1
 800634e:	d14c      	bne.n	80063ea <_printf_i+0x1fe>
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	b004      	add	sp, #16
 8006356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800635a:	4835      	ldr	r0, [pc, #212]	; (8006430 <_printf_i+0x244>)
 800635c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006360:	6829      	ldr	r1, [r5, #0]
 8006362:	6823      	ldr	r3, [r4, #0]
 8006364:	f851 6b04 	ldr.w	r6, [r1], #4
 8006368:	6029      	str	r1, [r5, #0]
 800636a:	061d      	lsls	r5, r3, #24
 800636c:	d514      	bpl.n	8006398 <_printf_i+0x1ac>
 800636e:	07df      	lsls	r7, r3, #31
 8006370:	bf44      	itt	mi
 8006372:	f043 0320 	orrmi.w	r3, r3, #32
 8006376:	6023      	strmi	r3, [r4, #0]
 8006378:	b91e      	cbnz	r6, 8006382 <_printf_i+0x196>
 800637a:	6823      	ldr	r3, [r4, #0]
 800637c:	f023 0320 	bic.w	r3, r3, #32
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	2310      	movs	r3, #16
 8006384:	e7b0      	b.n	80062e8 <_printf_i+0xfc>
 8006386:	6823      	ldr	r3, [r4, #0]
 8006388:	f043 0320 	orr.w	r3, r3, #32
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	2378      	movs	r3, #120	; 0x78
 8006390:	4828      	ldr	r0, [pc, #160]	; (8006434 <_printf_i+0x248>)
 8006392:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006396:	e7e3      	b.n	8006360 <_printf_i+0x174>
 8006398:	0659      	lsls	r1, r3, #25
 800639a:	bf48      	it	mi
 800639c:	b2b6      	uxthmi	r6, r6
 800639e:	e7e6      	b.n	800636e <_printf_i+0x182>
 80063a0:	4615      	mov	r5, r2
 80063a2:	e7bb      	b.n	800631c <_printf_i+0x130>
 80063a4:	682b      	ldr	r3, [r5, #0]
 80063a6:	6826      	ldr	r6, [r4, #0]
 80063a8:	6961      	ldr	r1, [r4, #20]
 80063aa:	1d18      	adds	r0, r3, #4
 80063ac:	6028      	str	r0, [r5, #0]
 80063ae:	0635      	lsls	r5, r6, #24
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	d501      	bpl.n	80063b8 <_printf_i+0x1cc>
 80063b4:	6019      	str	r1, [r3, #0]
 80063b6:	e002      	b.n	80063be <_printf_i+0x1d2>
 80063b8:	0670      	lsls	r0, r6, #25
 80063ba:	d5fb      	bpl.n	80063b4 <_printf_i+0x1c8>
 80063bc:	8019      	strh	r1, [r3, #0]
 80063be:	2300      	movs	r3, #0
 80063c0:	6123      	str	r3, [r4, #16]
 80063c2:	4615      	mov	r5, r2
 80063c4:	e7ba      	b.n	800633c <_printf_i+0x150>
 80063c6:	682b      	ldr	r3, [r5, #0]
 80063c8:	1d1a      	adds	r2, r3, #4
 80063ca:	602a      	str	r2, [r5, #0]
 80063cc:	681d      	ldr	r5, [r3, #0]
 80063ce:	6862      	ldr	r2, [r4, #4]
 80063d0:	2100      	movs	r1, #0
 80063d2:	4628      	mov	r0, r5
 80063d4:	f7f9 ff1c 	bl	8000210 <memchr>
 80063d8:	b108      	cbz	r0, 80063de <_printf_i+0x1f2>
 80063da:	1b40      	subs	r0, r0, r5
 80063dc:	6060      	str	r0, [r4, #4]
 80063de:	6863      	ldr	r3, [r4, #4]
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	2300      	movs	r3, #0
 80063e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063e8:	e7a8      	b.n	800633c <_printf_i+0x150>
 80063ea:	6923      	ldr	r3, [r4, #16]
 80063ec:	462a      	mov	r2, r5
 80063ee:	4649      	mov	r1, r9
 80063f0:	4640      	mov	r0, r8
 80063f2:	47d0      	blx	sl
 80063f4:	3001      	adds	r0, #1
 80063f6:	d0ab      	beq.n	8006350 <_printf_i+0x164>
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	079b      	lsls	r3, r3, #30
 80063fc:	d413      	bmi.n	8006426 <_printf_i+0x23a>
 80063fe:	68e0      	ldr	r0, [r4, #12]
 8006400:	9b03      	ldr	r3, [sp, #12]
 8006402:	4298      	cmp	r0, r3
 8006404:	bfb8      	it	lt
 8006406:	4618      	movlt	r0, r3
 8006408:	e7a4      	b.n	8006354 <_printf_i+0x168>
 800640a:	2301      	movs	r3, #1
 800640c:	4632      	mov	r2, r6
 800640e:	4649      	mov	r1, r9
 8006410:	4640      	mov	r0, r8
 8006412:	47d0      	blx	sl
 8006414:	3001      	adds	r0, #1
 8006416:	d09b      	beq.n	8006350 <_printf_i+0x164>
 8006418:	3501      	adds	r5, #1
 800641a:	68e3      	ldr	r3, [r4, #12]
 800641c:	9903      	ldr	r1, [sp, #12]
 800641e:	1a5b      	subs	r3, r3, r1
 8006420:	42ab      	cmp	r3, r5
 8006422:	dcf2      	bgt.n	800640a <_printf_i+0x21e>
 8006424:	e7eb      	b.n	80063fe <_printf_i+0x212>
 8006426:	2500      	movs	r5, #0
 8006428:	f104 0619 	add.w	r6, r4, #25
 800642c:	e7f5      	b.n	800641a <_printf_i+0x22e>
 800642e:	bf00      	nop
 8006430:	08008a9a 	.word	0x08008a9a
 8006434:	08008aab 	.word	0x08008aab

08006438 <siprintf>:
 8006438:	b40e      	push	{r1, r2, r3}
 800643a:	b500      	push	{lr}
 800643c:	b09c      	sub	sp, #112	; 0x70
 800643e:	ab1d      	add	r3, sp, #116	; 0x74
 8006440:	9002      	str	r0, [sp, #8]
 8006442:	9006      	str	r0, [sp, #24]
 8006444:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006448:	4809      	ldr	r0, [pc, #36]	; (8006470 <siprintf+0x38>)
 800644a:	9107      	str	r1, [sp, #28]
 800644c:	9104      	str	r1, [sp, #16]
 800644e:	4909      	ldr	r1, [pc, #36]	; (8006474 <siprintf+0x3c>)
 8006450:	f853 2b04 	ldr.w	r2, [r3], #4
 8006454:	9105      	str	r1, [sp, #20]
 8006456:	6800      	ldr	r0, [r0, #0]
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	a902      	add	r1, sp, #8
 800645c:	f001 fb76 	bl	8007b4c <_svfiprintf_r>
 8006460:	9b02      	ldr	r3, [sp, #8]
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	b01c      	add	sp, #112	; 0x70
 8006468:	f85d eb04 	ldr.w	lr, [sp], #4
 800646c:	b003      	add	sp, #12
 800646e:	4770      	bx	lr
 8006470:	2000000c 	.word	0x2000000c
 8006474:	ffff0208 	.word	0xffff0208

08006478 <quorem>:
 8006478:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	6903      	ldr	r3, [r0, #16]
 800647e:	690c      	ldr	r4, [r1, #16]
 8006480:	42a3      	cmp	r3, r4
 8006482:	4607      	mov	r7, r0
 8006484:	f2c0 8081 	blt.w	800658a <quorem+0x112>
 8006488:	3c01      	subs	r4, #1
 800648a:	f101 0814 	add.w	r8, r1, #20
 800648e:	f100 0514 	add.w	r5, r0, #20
 8006492:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006496:	9301      	str	r3, [sp, #4]
 8006498:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800649c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064a0:	3301      	adds	r3, #1
 80064a2:	429a      	cmp	r2, r3
 80064a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80064a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80064ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80064b0:	d331      	bcc.n	8006516 <quorem+0x9e>
 80064b2:	f04f 0e00 	mov.w	lr, #0
 80064b6:	4640      	mov	r0, r8
 80064b8:	46ac      	mov	ip, r5
 80064ba:	46f2      	mov	sl, lr
 80064bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80064c0:	b293      	uxth	r3, r2
 80064c2:	fb06 e303 	mla	r3, r6, r3, lr
 80064c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	ebaa 0303 	sub.w	r3, sl, r3
 80064d0:	f8dc a000 	ldr.w	sl, [ip]
 80064d4:	0c12      	lsrs	r2, r2, #16
 80064d6:	fa13 f38a 	uxtah	r3, r3, sl
 80064da:	fb06 e202 	mla	r2, r6, r2, lr
 80064de:	9300      	str	r3, [sp, #0]
 80064e0:	9b00      	ldr	r3, [sp, #0]
 80064e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80064e6:	b292      	uxth	r2, r2
 80064e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80064ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80064f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80064f4:	4581      	cmp	r9, r0
 80064f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064fa:	f84c 3b04 	str.w	r3, [ip], #4
 80064fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006502:	d2db      	bcs.n	80064bc <quorem+0x44>
 8006504:	f855 300b 	ldr.w	r3, [r5, fp]
 8006508:	b92b      	cbnz	r3, 8006516 <quorem+0x9e>
 800650a:	9b01      	ldr	r3, [sp, #4]
 800650c:	3b04      	subs	r3, #4
 800650e:	429d      	cmp	r5, r3
 8006510:	461a      	mov	r2, r3
 8006512:	d32e      	bcc.n	8006572 <quorem+0xfa>
 8006514:	613c      	str	r4, [r7, #16]
 8006516:	4638      	mov	r0, r7
 8006518:	f001 f8c4 	bl	80076a4 <__mcmp>
 800651c:	2800      	cmp	r0, #0
 800651e:	db24      	blt.n	800656a <quorem+0xf2>
 8006520:	3601      	adds	r6, #1
 8006522:	4628      	mov	r0, r5
 8006524:	f04f 0c00 	mov.w	ip, #0
 8006528:	f858 2b04 	ldr.w	r2, [r8], #4
 800652c:	f8d0 e000 	ldr.w	lr, [r0]
 8006530:	b293      	uxth	r3, r2
 8006532:	ebac 0303 	sub.w	r3, ip, r3
 8006536:	0c12      	lsrs	r2, r2, #16
 8006538:	fa13 f38e 	uxtah	r3, r3, lr
 800653c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006540:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006544:	b29b      	uxth	r3, r3
 8006546:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800654a:	45c1      	cmp	r9, r8
 800654c:	f840 3b04 	str.w	r3, [r0], #4
 8006550:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006554:	d2e8      	bcs.n	8006528 <quorem+0xb0>
 8006556:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800655a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800655e:	b922      	cbnz	r2, 800656a <quorem+0xf2>
 8006560:	3b04      	subs	r3, #4
 8006562:	429d      	cmp	r5, r3
 8006564:	461a      	mov	r2, r3
 8006566:	d30a      	bcc.n	800657e <quorem+0x106>
 8006568:	613c      	str	r4, [r7, #16]
 800656a:	4630      	mov	r0, r6
 800656c:	b003      	add	sp, #12
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	6812      	ldr	r2, [r2, #0]
 8006574:	3b04      	subs	r3, #4
 8006576:	2a00      	cmp	r2, #0
 8006578:	d1cc      	bne.n	8006514 <quorem+0x9c>
 800657a:	3c01      	subs	r4, #1
 800657c:	e7c7      	b.n	800650e <quorem+0x96>
 800657e:	6812      	ldr	r2, [r2, #0]
 8006580:	3b04      	subs	r3, #4
 8006582:	2a00      	cmp	r2, #0
 8006584:	d1f0      	bne.n	8006568 <quorem+0xf0>
 8006586:	3c01      	subs	r4, #1
 8006588:	e7eb      	b.n	8006562 <quorem+0xea>
 800658a:	2000      	movs	r0, #0
 800658c:	e7ee      	b.n	800656c <quorem+0xf4>
	...

08006590 <_dtoa_r>:
 8006590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	ed2d 8b04 	vpush	{d8-d9}
 8006598:	ec57 6b10 	vmov	r6, r7, d0
 800659c:	b093      	sub	sp, #76	; 0x4c
 800659e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80065a4:	9106      	str	r1, [sp, #24]
 80065a6:	ee10 aa10 	vmov	sl, s0
 80065aa:	4604      	mov	r4, r0
 80065ac:	9209      	str	r2, [sp, #36]	; 0x24
 80065ae:	930c      	str	r3, [sp, #48]	; 0x30
 80065b0:	46bb      	mov	fp, r7
 80065b2:	b975      	cbnz	r5, 80065d2 <_dtoa_r+0x42>
 80065b4:	2010      	movs	r0, #16
 80065b6:	f000 fddd 	bl	8007174 <malloc>
 80065ba:	4602      	mov	r2, r0
 80065bc:	6260      	str	r0, [r4, #36]	; 0x24
 80065be:	b920      	cbnz	r0, 80065ca <_dtoa_r+0x3a>
 80065c0:	4ba7      	ldr	r3, [pc, #668]	; (8006860 <_dtoa_r+0x2d0>)
 80065c2:	21ea      	movs	r1, #234	; 0xea
 80065c4:	48a7      	ldr	r0, [pc, #668]	; (8006864 <_dtoa_r+0x2d4>)
 80065c6:	f001 fbd1 	bl	8007d6c <__assert_func>
 80065ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80065ce:	6005      	str	r5, [r0, #0]
 80065d0:	60c5      	str	r5, [r0, #12]
 80065d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065d4:	6819      	ldr	r1, [r3, #0]
 80065d6:	b151      	cbz	r1, 80065ee <_dtoa_r+0x5e>
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	604a      	str	r2, [r1, #4]
 80065dc:	2301      	movs	r3, #1
 80065de:	4093      	lsls	r3, r2
 80065e0:	608b      	str	r3, [r1, #8]
 80065e2:	4620      	mov	r0, r4
 80065e4:	f000 fe1c 	bl	8007220 <_Bfree>
 80065e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065ea:	2200      	movs	r2, #0
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	1e3b      	subs	r3, r7, #0
 80065f0:	bfaa      	itet	ge
 80065f2:	2300      	movge	r3, #0
 80065f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80065f8:	f8c8 3000 	strge.w	r3, [r8]
 80065fc:	4b9a      	ldr	r3, [pc, #616]	; (8006868 <_dtoa_r+0x2d8>)
 80065fe:	bfbc      	itt	lt
 8006600:	2201      	movlt	r2, #1
 8006602:	f8c8 2000 	strlt.w	r2, [r8]
 8006606:	ea33 030b 	bics.w	r3, r3, fp
 800660a:	d11b      	bne.n	8006644 <_dtoa_r+0xb4>
 800660c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800660e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006618:	4333      	orrs	r3, r6
 800661a:	f000 8592 	beq.w	8007142 <_dtoa_r+0xbb2>
 800661e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006620:	b963      	cbnz	r3, 800663c <_dtoa_r+0xac>
 8006622:	4b92      	ldr	r3, [pc, #584]	; (800686c <_dtoa_r+0x2dc>)
 8006624:	e022      	b.n	800666c <_dtoa_r+0xdc>
 8006626:	4b92      	ldr	r3, [pc, #584]	; (8006870 <_dtoa_r+0x2e0>)
 8006628:	9301      	str	r3, [sp, #4]
 800662a:	3308      	adds	r3, #8
 800662c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800662e:	6013      	str	r3, [r2, #0]
 8006630:	9801      	ldr	r0, [sp, #4]
 8006632:	b013      	add	sp, #76	; 0x4c
 8006634:	ecbd 8b04 	vpop	{d8-d9}
 8006638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800663c:	4b8b      	ldr	r3, [pc, #556]	; (800686c <_dtoa_r+0x2dc>)
 800663e:	9301      	str	r3, [sp, #4]
 8006640:	3303      	adds	r3, #3
 8006642:	e7f3      	b.n	800662c <_dtoa_r+0x9c>
 8006644:	2200      	movs	r2, #0
 8006646:	2300      	movs	r3, #0
 8006648:	4650      	mov	r0, sl
 800664a:	4659      	mov	r1, fp
 800664c:	f7fa fa54 	bl	8000af8 <__aeabi_dcmpeq>
 8006650:	ec4b ab19 	vmov	d9, sl, fp
 8006654:	4680      	mov	r8, r0
 8006656:	b158      	cbz	r0, 8006670 <_dtoa_r+0xe0>
 8006658:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800665a:	2301      	movs	r3, #1
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 856b 	beq.w	800713c <_dtoa_r+0xbac>
 8006666:	4883      	ldr	r0, [pc, #524]	; (8006874 <_dtoa_r+0x2e4>)
 8006668:	6018      	str	r0, [r3, #0]
 800666a:	1e43      	subs	r3, r0, #1
 800666c:	9301      	str	r3, [sp, #4]
 800666e:	e7df      	b.n	8006630 <_dtoa_r+0xa0>
 8006670:	ec4b ab10 	vmov	d0, sl, fp
 8006674:	aa10      	add	r2, sp, #64	; 0x40
 8006676:	a911      	add	r1, sp, #68	; 0x44
 8006678:	4620      	mov	r0, r4
 800667a:	f001 f8b9 	bl	80077f0 <__d2b>
 800667e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006682:	ee08 0a10 	vmov	s16, r0
 8006686:	2d00      	cmp	r5, #0
 8006688:	f000 8084 	beq.w	8006794 <_dtoa_r+0x204>
 800668c:	ee19 3a90 	vmov	r3, s19
 8006690:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006694:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006698:	4656      	mov	r6, sl
 800669a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800669e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80066a6:	4b74      	ldr	r3, [pc, #464]	; (8006878 <_dtoa_r+0x2e8>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	4630      	mov	r0, r6
 80066ac:	4639      	mov	r1, r7
 80066ae:	f7f9 fe03 	bl	80002b8 <__aeabi_dsub>
 80066b2:	a365      	add	r3, pc, #404	; (adr r3, 8006848 <_dtoa_r+0x2b8>)
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f7f9 ffb6 	bl	8000628 <__aeabi_dmul>
 80066bc:	a364      	add	r3, pc, #400	; (adr r3, 8006850 <_dtoa_r+0x2c0>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f7f9 fdfb 	bl	80002bc <__adddf3>
 80066c6:	4606      	mov	r6, r0
 80066c8:	4628      	mov	r0, r5
 80066ca:	460f      	mov	r7, r1
 80066cc:	f7f9 ff42 	bl	8000554 <__aeabi_i2d>
 80066d0:	a361      	add	r3, pc, #388	; (adr r3, 8006858 <_dtoa_r+0x2c8>)
 80066d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d6:	f7f9 ffa7 	bl	8000628 <__aeabi_dmul>
 80066da:	4602      	mov	r2, r0
 80066dc:	460b      	mov	r3, r1
 80066de:	4630      	mov	r0, r6
 80066e0:	4639      	mov	r1, r7
 80066e2:	f7f9 fdeb 	bl	80002bc <__adddf3>
 80066e6:	4606      	mov	r6, r0
 80066e8:	460f      	mov	r7, r1
 80066ea:	f7fa fa4d 	bl	8000b88 <__aeabi_d2iz>
 80066ee:	2200      	movs	r2, #0
 80066f0:	9000      	str	r0, [sp, #0]
 80066f2:	2300      	movs	r3, #0
 80066f4:	4630      	mov	r0, r6
 80066f6:	4639      	mov	r1, r7
 80066f8:	f7fa fa08 	bl	8000b0c <__aeabi_dcmplt>
 80066fc:	b150      	cbz	r0, 8006714 <_dtoa_r+0x184>
 80066fe:	9800      	ldr	r0, [sp, #0]
 8006700:	f7f9 ff28 	bl	8000554 <__aeabi_i2d>
 8006704:	4632      	mov	r2, r6
 8006706:	463b      	mov	r3, r7
 8006708:	f7fa f9f6 	bl	8000af8 <__aeabi_dcmpeq>
 800670c:	b910      	cbnz	r0, 8006714 <_dtoa_r+0x184>
 800670e:	9b00      	ldr	r3, [sp, #0]
 8006710:	3b01      	subs	r3, #1
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	9b00      	ldr	r3, [sp, #0]
 8006716:	2b16      	cmp	r3, #22
 8006718:	d85a      	bhi.n	80067d0 <_dtoa_r+0x240>
 800671a:	9a00      	ldr	r2, [sp, #0]
 800671c:	4b57      	ldr	r3, [pc, #348]	; (800687c <_dtoa_r+0x2ec>)
 800671e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	ec51 0b19 	vmov	r0, r1, d9
 800672a:	f7fa f9ef 	bl	8000b0c <__aeabi_dcmplt>
 800672e:	2800      	cmp	r0, #0
 8006730:	d050      	beq.n	80067d4 <_dtoa_r+0x244>
 8006732:	9b00      	ldr	r3, [sp, #0]
 8006734:	3b01      	subs	r3, #1
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	2300      	movs	r3, #0
 800673a:	930b      	str	r3, [sp, #44]	; 0x2c
 800673c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800673e:	1b5d      	subs	r5, r3, r5
 8006740:	1e6b      	subs	r3, r5, #1
 8006742:	9305      	str	r3, [sp, #20]
 8006744:	bf45      	ittet	mi
 8006746:	f1c5 0301 	rsbmi	r3, r5, #1
 800674a:	9304      	strmi	r3, [sp, #16]
 800674c:	2300      	movpl	r3, #0
 800674e:	2300      	movmi	r3, #0
 8006750:	bf4c      	ite	mi
 8006752:	9305      	strmi	r3, [sp, #20]
 8006754:	9304      	strpl	r3, [sp, #16]
 8006756:	9b00      	ldr	r3, [sp, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	db3d      	blt.n	80067d8 <_dtoa_r+0x248>
 800675c:	9b05      	ldr	r3, [sp, #20]
 800675e:	9a00      	ldr	r2, [sp, #0]
 8006760:	920a      	str	r2, [sp, #40]	; 0x28
 8006762:	4413      	add	r3, r2
 8006764:	9305      	str	r3, [sp, #20]
 8006766:	2300      	movs	r3, #0
 8006768:	9307      	str	r3, [sp, #28]
 800676a:	9b06      	ldr	r3, [sp, #24]
 800676c:	2b09      	cmp	r3, #9
 800676e:	f200 8089 	bhi.w	8006884 <_dtoa_r+0x2f4>
 8006772:	2b05      	cmp	r3, #5
 8006774:	bfc4      	itt	gt
 8006776:	3b04      	subgt	r3, #4
 8006778:	9306      	strgt	r3, [sp, #24]
 800677a:	9b06      	ldr	r3, [sp, #24]
 800677c:	f1a3 0302 	sub.w	r3, r3, #2
 8006780:	bfcc      	ite	gt
 8006782:	2500      	movgt	r5, #0
 8006784:	2501      	movle	r5, #1
 8006786:	2b03      	cmp	r3, #3
 8006788:	f200 8087 	bhi.w	800689a <_dtoa_r+0x30a>
 800678c:	e8df f003 	tbb	[pc, r3]
 8006790:	59383a2d 	.word	0x59383a2d
 8006794:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006798:	441d      	add	r5, r3
 800679a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800679e:	2b20      	cmp	r3, #32
 80067a0:	bfc1      	itttt	gt
 80067a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80067a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80067aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80067ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80067b2:	bfda      	itte	le
 80067b4:	f1c3 0320 	rsble	r3, r3, #32
 80067b8:	fa06 f003 	lslle.w	r0, r6, r3
 80067bc:	4318      	orrgt	r0, r3
 80067be:	f7f9 feb9 	bl	8000534 <__aeabi_ui2d>
 80067c2:	2301      	movs	r3, #1
 80067c4:	4606      	mov	r6, r0
 80067c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80067ca:	3d01      	subs	r5, #1
 80067cc:	930e      	str	r3, [sp, #56]	; 0x38
 80067ce:	e76a      	b.n	80066a6 <_dtoa_r+0x116>
 80067d0:	2301      	movs	r3, #1
 80067d2:	e7b2      	b.n	800673a <_dtoa_r+0x1aa>
 80067d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80067d6:	e7b1      	b.n	800673c <_dtoa_r+0x1ac>
 80067d8:	9b04      	ldr	r3, [sp, #16]
 80067da:	9a00      	ldr	r2, [sp, #0]
 80067dc:	1a9b      	subs	r3, r3, r2
 80067de:	9304      	str	r3, [sp, #16]
 80067e0:	4253      	negs	r3, r2
 80067e2:	9307      	str	r3, [sp, #28]
 80067e4:	2300      	movs	r3, #0
 80067e6:	930a      	str	r3, [sp, #40]	; 0x28
 80067e8:	e7bf      	b.n	800676a <_dtoa_r+0x1da>
 80067ea:	2300      	movs	r3, #0
 80067ec:	9308      	str	r3, [sp, #32]
 80067ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	dc55      	bgt.n	80068a0 <_dtoa_r+0x310>
 80067f4:	2301      	movs	r3, #1
 80067f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80067fa:	461a      	mov	r2, r3
 80067fc:	9209      	str	r2, [sp, #36]	; 0x24
 80067fe:	e00c      	b.n	800681a <_dtoa_r+0x28a>
 8006800:	2301      	movs	r3, #1
 8006802:	e7f3      	b.n	80067ec <_dtoa_r+0x25c>
 8006804:	2300      	movs	r3, #0
 8006806:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006808:	9308      	str	r3, [sp, #32]
 800680a:	9b00      	ldr	r3, [sp, #0]
 800680c:	4413      	add	r3, r2
 800680e:	9302      	str	r3, [sp, #8]
 8006810:	3301      	adds	r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	bfb8      	it	lt
 8006818:	2301      	movlt	r3, #1
 800681a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800681c:	2200      	movs	r2, #0
 800681e:	6042      	str	r2, [r0, #4]
 8006820:	2204      	movs	r2, #4
 8006822:	f102 0614 	add.w	r6, r2, #20
 8006826:	429e      	cmp	r6, r3
 8006828:	6841      	ldr	r1, [r0, #4]
 800682a:	d93d      	bls.n	80068a8 <_dtoa_r+0x318>
 800682c:	4620      	mov	r0, r4
 800682e:	f000 fcb7 	bl	80071a0 <_Balloc>
 8006832:	9001      	str	r0, [sp, #4]
 8006834:	2800      	cmp	r0, #0
 8006836:	d13b      	bne.n	80068b0 <_dtoa_r+0x320>
 8006838:	4b11      	ldr	r3, [pc, #68]	; (8006880 <_dtoa_r+0x2f0>)
 800683a:	4602      	mov	r2, r0
 800683c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006840:	e6c0      	b.n	80065c4 <_dtoa_r+0x34>
 8006842:	2301      	movs	r3, #1
 8006844:	e7df      	b.n	8006806 <_dtoa_r+0x276>
 8006846:	bf00      	nop
 8006848:	636f4361 	.word	0x636f4361
 800684c:	3fd287a7 	.word	0x3fd287a7
 8006850:	8b60c8b3 	.word	0x8b60c8b3
 8006854:	3fc68a28 	.word	0x3fc68a28
 8006858:	509f79fb 	.word	0x509f79fb
 800685c:	3fd34413 	.word	0x3fd34413
 8006860:	08008ac9 	.word	0x08008ac9
 8006864:	08008ae0 	.word	0x08008ae0
 8006868:	7ff00000 	.word	0x7ff00000
 800686c:	08008ac5 	.word	0x08008ac5
 8006870:	08008abc 	.word	0x08008abc
 8006874:	08008a99 	.word	0x08008a99
 8006878:	3ff80000 	.word	0x3ff80000
 800687c:	08008bd0 	.word	0x08008bd0
 8006880:	08008b3b 	.word	0x08008b3b
 8006884:	2501      	movs	r5, #1
 8006886:	2300      	movs	r3, #0
 8006888:	9306      	str	r3, [sp, #24]
 800688a:	9508      	str	r5, [sp, #32]
 800688c:	f04f 33ff 	mov.w	r3, #4294967295
 8006890:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006894:	2200      	movs	r2, #0
 8006896:	2312      	movs	r3, #18
 8006898:	e7b0      	b.n	80067fc <_dtoa_r+0x26c>
 800689a:	2301      	movs	r3, #1
 800689c:	9308      	str	r3, [sp, #32]
 800689e:	e7f5      	b.n	800688c <_dtoa_r+0x2fc>
 80068a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068a6:	e7b8      	b.n	800681a <_dtoa_r+0x28a>
 80068a8:	3101      	adds	r1, #1
 80068aa:	6041      	str	r1, [r0, #4]
 80068ac:	0052      	lsls	r2, r2, #1
 80068ae:	e7b8      	b.n	8006822 <_dtoa_r+0x292>
 80068b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80068b2:	9a01      	ldr	r2, [sp, #4]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	9b03      	ldr	r3, [sp, #12]
 80068b8:	2b0e      	cmp	r3, #14
 80068ba:	f200 809d 	bhi.w	80069f8 <_dtoa_r+0x468>
 80068be:	2d00      	cmp	r5, #0
 80068c0:	f000 809a 	beq.w	80069f8 <_dtoa_r+0x468>
 80068c4:	9b00      	ldr	r3, [sp, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd32      	ble.n	8006930 <_dtoa_r+0x3a0>
 80068ca:	4ab7      	ldr	r2, [pc, #732]	; (8006ba8 <_dtoa_r+0x618>)
 80068cc:	f003 030f 	and.w	r3, r3, #15
 80068d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80068d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068d8:	9b00      	ldr	r3, [sp, #0]
 80068da:	05d8      	lsls	r0, r3, #23
 80068dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80068e0:	d516      	bpl.n	8006910 <_dtoa_r+0x380>
 80068e2:	4bb2      	ldr	r3, [pc, #712]	; (8006bac <_dtoa_r+0x61c>)
 80068e4:	ec51 0b19 	vmov	r0, r1, d9
 80068e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068ec:	f7f9 ffc6 	bl	800087c <__aeabi_ddiv>
 80068f0:	f007 070f 	and.w	r7, r7, #15
 80068f4:	4682      	mov	sl, r0
 80068f6:	468b      	mov	fp, r1
 80068f8:	2503      	movs	r5, #3
 80068fa:	4eac      	ldr	r6, [pc, #688]	; (8006bac <_dtoa_r+0x61c>)
 80068fc:	b957      	cbnz	r7, 8006914 <_dtoa_r+0x384>
 80068fe:	4642      	mov	r2, r8
 8006900:	464b      	mov	r3, r9
 8006902:	4650      	mov	r0, sl
 8006904:	4659      	mov	r1, fp
 8006906:	f7f9 ffb9 	bl	800087c <__aeabi_ddiv>
 800690a:	4682      	mov	sl, r0
 800690c:	468b      	mov	fp, r1
 800690e:	e028      	b.n	8006962 <_dtoa_r+0x3d2>
 8006910:	2502      	movs	r5, #2
 8006912:	e7f2      	b.n	80068fa <_dtoa_r+0x36a>
 8006914:	07f9      	lsls	r1, r7, #31
 8006916:	d508      	bpl.n	800692a <_dtoa_r+0x39a>
 8006918:	4640      	mov	r0, r8
 800691a:	4649      	mov	r1, r9
 800691c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006920:	f7f9 fe82 	bl	8000628 <__aeabi_dmul>
 8006924:	3501      	adds	r5, #1
 8006926:	4680      	mov	r8, r0
 8006928:	4689      	mov	r9, r1
 800692a:	107f      	asrs	r7, r7, #1
 800692c:	3608      	adds	r6, #8
 800692e:	e7e5      	b.n	80068fc <_dtoa_r+0x36c>
 8006930:	f000 809b 	beq.w	8006a6a <_dtoa_r+0x4da>
 8006934:	9b00      	ldr	r3, [sp, #0]
 8006936:	4f9d      	ldr	r7, [pc, #628]	; (8006bac <_dtoa_r+0x61c>)
 8006938:	425e      	negs	r6, r3
 800693a:	4b9b      	ldr	r3, [pc, #620]	; (8006ba8 <_dtoa_r+0x618>)
 800693c:	f006 020f 	and.w	r2, r6, #15
 8006940:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006948:	ec51 0b19 	vmov	r0, r1, d9
 800694c:	f7f9 fe6c 	bl	8000628 <__aeabi_dmul>
 8006950:	1136      	asrs	r6, r6, #4
 8006952:	4682      	mov	sl, r0
 8006954:	468b      	mov	fp, r1
 8006956:	2300      	movs	r3, #0
 8006958:	2502      	movs	r5, #2
 800695a:	2e00      	cmp	r6, #0
 800695c:	d17a      	bne.n	8006a54 <_dtoa_r+0x4c4>
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1d3      	bne.n	800690a <_dtoa_r+0x37a>
 8006962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 8082 	beq.w	8006a6e <_dtoa_r+0x4de>
 800696a:	4b91      	ldr	r3, [pc, #580]	; (8006bb0 <_dtoa_r+0x620>)
 800696c:	2200      	movs	r2, #0
 800696e:	4650      	mov	r0, sl
 8006970:	4659      	mov	r1, fp
 8006972:	f7fa f8cb 	bl	8000b0c <__aeabi_dcmplt>
 8006976:	2800      	cmp	r0, #0
 8006978:	d079      	beq.n	8006a6e <_dtoa_r+0x4de>
 800697a:	9b03      	ldr	r3, [sp, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d076      	beq.n	8006a6e <_dtoa_r+0x4de>
 8006980:	9b02      	ldr	r3, [sp, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	dd36      	ble.n	80069f4 <_dtoa_r+0x464>
 8006986:	9b00      	ldr	r3, [sp, #0]
 8006988:	4650      	mov	r0, sl
 800698a:	4659      	mov	r1, fp
 800698c:	1e5f      	subs	r7, r3, #1
 800698e:	2200      	movs	r2, #0
 8006990:	4b88      	ldr	r3, [pc, #544]	; (8006bb4 <_dtoa_r+0x624>)
 8006992:	f7f9 fe49 	bl	8000628 <__aeabi_dmul>
 8006996:	9e02      	ldr	r6, [sp, #8]
 8006998:	4682      	mov	sl, r0
 800699a:	468b      	mov	fp, r1
 800699c:	3501      	adds	r5, #1
 800699e:	4628      	mov	r0, r5
 80069a0:	f7f9 fdd8 	bl	8000554 <__aeabi_i2d>
 80069a4:	4652      	mov	r2, sl
 80069a6:	465b      	mov	r3, fp
 80069a8:	f7f9 fe3e 	bl	8000628 <__aeabi_dmul>
 80069ac:	4b82      	ldr	r3, [pc, #520]	; (8006bb8 <_dtoa_r+0x628>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	f7f9 fc84 	bl	80002bc <__adddf3>
 80069b4:	46d0      	mov	r8, sl
 80069b6:	46d9      	mov	r9, fp
 80069b8:	4682      	mov	sl, r0
 80069ba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80069be:	2e00      	cmp	r6, #0
 80069c0:	d158      	bne.n	8006a74 <_dtoa_r+0x4e4>
 80069c2:	4b7e      	ldr	r3, [pc, #504]	; (8006bbc <_dtoa_r+0x62c>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	4640      	mov	r0, r8
 80069c8:	4649      	mov	r1, r9
 80069ca:	f7f9 fc75 	bl	80002b8 <__aeabi_dsub>
 80069ce:	4652      	mov	r2, sl
 80069d0:	465b      	mov	r3, fp
 80069d2:	4680      	mov	r8, r0
 80069d4:	4689      	mov	r9, r1
 80069d6:	f7fa f8b7 	bl	8000b48 <__aeabi_dcmpgt>
 80069da:	2800      	cmp	r0, #0
 80069dc:	f040 8295 	bne.w	8006f0a <_dtoa_r+0x97a>
 80069e0:	4652      	mov	r2, sl
 80069e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80069e6:	4640      	mov	r0, r8
 80069e8:	4649      	mov	r1, r9
 80069ea:	f7fa f88f 	bl	8000b0c <__aeabi_dcmplt>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	f040 8289 	bne.w	8006f06 <_dtoa_r+0x976>
 80069f4:	ec5b ab19 	vmov	sl, fp, d9
 80069f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f2c0 8148 	blt.w	8006c90 <_dtoa_r+0x700>
 8006a00:	9a00      	ldr	r2, [sp, #0]
 8006a02:	2a0e      	cmp	r2, #14
 8006a04:	f300 8144 	bgt.w	8006c90 <_dtoa_r+0x700>
 8006a08:	4b67      	ldr	r3, [pc, #412]	; (8006ba8 <_dtoa_r+0x618>)
 8006a0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f280 80d5 	bge.w	8006bc4 <_dtoa_r+0x634>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f300 80d1 	bgt.w	8006bc4 <_dtoa_r+0x634>
 8006a22:	f040 826f 	bne.w	8006f04 <_dtoa_r+0x974>
 8006a26:	4b65      	ldr	r3, [pc, #404]	; (8006bbc <_dtoa_r+0x62c>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f7f9 fdfb 	bl	8000628 <__aeabi_dmul>
 8006a32:	4652      	mov	r2, sl
 8006a34:	465b      	mov	r3, fp
 8006a36:	f7fa f87d 	bl	8000b34 <__aeabi_dcmpge>
 8006a3a:	9e03      	ldr	r6, [sp, #12]
 8006a3c:	4637      	mov	r7, r6
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	f040 8245 	bne.w	8006ece <_dtoa_r+0x93e>
 8006a44:	9d01      	ldr	r5, [sp, #4]
 8006a46:	2331      	movs	r3, #49	; 0x31
 8006a48:	f805 3b01 	strb.w	r3, [r5], #1
 8006a4c:	9b00      	ldr	r3, [sp, #0]
 8006a4e:	3301      	adds	r3, #1
 8006a50:	9300      	str	r3, [sp, #0]
 8006a52:	e240      	b.n	8006ed6 <_dtoa_r+0x946>
 8006a54:	07f2      	lsls	r2, r6, #31
 8006a56:	d505      	bpl.n	8006a64 <_dtoa_r+0x4d4>
 8006a58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a5c:	f7f9 fde4 	bl	8000628 <__aeabi_dmul>
 8006a60:	3501      	adds	r5, #1
 8006a62:	2301      	movs	r3, #1
 8006a64:	1076      	asrs	r6, r6, #1
 8006a66:	3708      	adds	r7, #8
 8006a68:	e777      	b.n	800695a <_dtoa_r+0x3ca>
 8006a6a:	2502      	movs	r5, #2
 8006a6c:	e779      	b.n	8006962 <_dtoa_r+0x3d2>
 8006a6e:	9f00      	ldr	r7, [sp, #0]
 8006a70:	9e03      	ldr	r6, [sp, #12]
 8006a72:	e794      	b.n	800699e <_dtoa_r+0x40e>
 8006a74:	9901      	ldr	r1, [sp, #4]
 8006a76:	4b4c      	ldr	r3, [pc, #304]	; (8006ba8 <_dtoa_r+0x618>)
 8006a78:	4431      	add	r1, r6
 8006a7a:	910d      	str	r1, [sp, #52]	; 0x34
 8006a7c:	9908      	ldr	r1, [sp, #32]
 8006a7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006a82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a86:	2900      	cmp	r1, #0
 8006a88:	d043      	beq.n	8006b12 <_dtoa_r+0x582>
 8006a8a:	494d      	ldr	r1, [pc, #308]	; (8006bc0 <_dtoa_r+0x630>)
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	f7f9 fef5 	bl	800087c <__aeabi_ddiv>
 8006a92:	4652      	mov	r2, sl
 8006a94:	465b      	mov	r3, fp
 8006a96:	f7f9 fc0f 	bl	80002b8 <__aeabi_dsub>
 8006a9a:	9d01      	ldr	r5, [sp, #4]
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	468b      	mov	fp, r1
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	f7fa f870 	bl	8000b88 <__aeabi_d2iz>
 8006aa8:	4606      	mov	r6, r0
 8006aaa:	f7f9 fd53 	bl	8000554 <__aeabi_i2d>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	f7f9 fbff 	bl	80002b8 <__aeabi_dsub>
 8006aba:	3630      	adds	r6, #48	; 0x30
 8006abc:	f805 6b01 	strb.w	r6, [r5], #1
 8006ac0:	4652      	mov	r2, sl
 8006ac2:	465b      	mov	r3, fp
 8006ac4:	4680      	mov	r8, r0
 8006ac6:	4689      	mov	r9, r1
 8006ac8:	f7fa f820 	bl	8000b0c <__aeabi_dcmplt>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d163      	bne.n	8006b98 <_dtoa_r+0x608>
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	4936      	ldr	r1, [pc, #216]	; (8006bb0 <_dtoa_r+0x620>)
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	f7f9 fbee 	bl	80002b8 <__aeabi_dsub>
 8006adc:	4652      	mov	r2, sl
 8006ade:	465b      	mov	r3, fp
 8006ae0:	f7fa f814 	bl	8000b0c <__aeabi_dcmplt>
 8006ae4:	2800      	cmp	r0, #0
 8006ae6:	f040 80b5 	bne.w	8006c54 <_dtoa_r+0x6c4>
 8006aea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006aec:	429d      	cmp	r5, r3
 8006aee:	d081      	beq.n	80069f4 <_dtoa_r+0x464>
 8006af0:	4b30      	ldr	r3, [pc, #192]	; (8006bb4 <_dtoa_r+0x624>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	4650      	mov	r0, sl
 8006af6:	4659      	mov	r1, fp
 8006af8:	f7f9 fd96 	bl	8000628 <__aeabi_dmul>
 8006afc:	4b2d      	ldr	r3, [pc, #180]	; (8006bb4 <_dtoa_r+0x624>)
 8006afe:	4682      	mov	sl, r0
 8006b00:	468b      	mov	fp, r1
 8006b02:	4640      	mov	r0, r8
 8006b04:	4649      	mov	r1, r9
 8006b06:	2200      	movs	r2, #0
 8006b08:	f7f9 fd8e 	bl	8000628 <__aeabi_dmul>
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	4689      	mov	r9, r1
 8006b10:	e7c6      	b.n	8006aa0 <_dtoa_r+0x510>
 8006b12:	4650      	mov	r0, sl
 8006b14:	4659      	mov	r1, fp
 8006b16:	f7f9 fd87 	bl	8000628 <__aeabi_dmul>
 8006b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b1c:	9d01      	ldr	r5, [sp, #4]
 8006b1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b20:	4682      	mov	sl, r0
 8006b22:	468b      	mov	fp, r1
 8006b24:	4649      	mov	r1, r9
 8006b26:	4640      	mov	r0, r8
 8006b28:	f7fa f82e 	bl	8000b88 <__aeabi_d2iz>
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	f7f9 fd11 	bl	8000554 <__aeabi_i2d>
 8006b32:	3630      	adds	r6, #48	; 0x30
 8006b34:	4602      	mov	r2, r0
 8006b36:	460b      	mov	r3, r1
 8006b38:	4640      	mov	r0, r8
 8006b3a:	4649      	mov	r1, r9
 8006b3c:	f7f9 fbbc 	bl	80002b8 <__aeabi_dsub>
 8006b40:	f805 6b01 	strb.w	r6, [r5], #1
 8006b44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006b46:	429d      	cmp	r5, r3
 8006b48:	4680      	mov	r8, r0
 8006b4a:	4689      	mov	r9, r1
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	d124      	bne.n	8006b9c <_dtoa_r+0x60c>
 8006b52:	4b1b      	ldr	r3, [pc, #108]	; (8006bc0 <_dtoa_r+0x630>)
 8006b54:	4650      	mov	r0, sl
 8006b56:	4659      	mov	r1, fp
 8006b58:	f7f9 fbb0 	bl	80002bc <__adddf3>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	460b      	mov	r3, r1
 8006b60:	4640      	mov	r0, r8
 8006b62:	4649      	mov	r1, r9
 8006b64:	f7f9 fff0 	bl	8000b48 <__aeabi_dcmpgt>
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d173      	bne.n	8006c54 <_dtoa_r+0x6c4>
 8006b6c:	4652      	mov	r2, sl
 8006b6e:	465b      	mov	r3, fp
 8006b70:	4913      	ldr	r1, [pc, #76]	; (8006bc0 <_dtoa_r+0x630>)
 8006b72:	2000      	movs	r0, #0
 8006b74:	f7f9 fba0 	bl	80002b8 <__aeabi_dsub>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	4640      	mov	r0, r8
 8006b7e:	4649      	mov	r1, r9
 8006b80:	f7f9 ffc4 	bl	8000b0c <__aeabi_dcmplt>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	f43f af35 	beq.w	80069f4 <_dtoa_r+0x464>
 8006b8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006b8c:	1e6b      	subs	r3, r5, #1
 8006b8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006b90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b94:	2b30      	cmp	r3, #48	; 0x30
 8006b96:	d0f8      	beq.n	8006b8a <_dtoa_r+0x5fa>
 8006b98:	9700      	str	r7, [sp, #0]
 8006b9a:	e049      	b.n	8006c30 <_dtoa_r+0x6a0>
 8006b9c:	4b05      	ldr	r3, [pc, #20]	; (8006bb4 <_dtoa_r+0x624>)
 8006b9e:	f7f9 fd43 	bl	8000628 <__aeabi_dmul>
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	4689      	mov	r9, r1
 8006ba6:	e7bd      	b.n	8006b24 <_dtoa_r+0x594>
 8006ba8:	08008bd0 	.word	0x08008bd0
 8006bac:	08008ba8 	.word	0x08008ba8
 8006bb0:	3ff00000 	.word	0x3ff00000
 8006bb4:	40240000 	.word	0x40240000
 8006bb8:	401c0000 	.word	0x401c0000
 8006bbc:	40140000 	.word	0x40140000
 8006bc0:	3fe00000 	.word	0x3fe00000
 8006bc4:	9d01      	ldr	r5, [sp, #4]
 8006bc6:	4656      	mov	r6, sl
 8006bc8:	465f      	mov	r7, fp
 8006bca:	4642      	mov	r2, r8
 8006bcc:	464b      	mov	r3, r9
 8006bce:	4630      	mov	r0, r6
 8006bd0:	4639      	mov	r1, r7
 8006bd2:	f7f9 fe53 	bl	800087c <__aeabi_ddiv>
 8006bd6:	f7f9 ffd7 	bl	8000b88 <__aeabi_d2iz>
 8006bda:	4682      	mov	sl, r0
 8006bdc:	f7f9 fcba 	bl	8000554 <__aeabi_i2d>
 8006be0:	4642      	mov	r2, r8
 8006be2:	464b      	mov	r3, r9
 8006be4:	f7f9 fd20 	bl	8000628 <__aeabi_dmul>
 8006be8:	4602      	mov	r2, r0
 8006bea:	460b      	mov	r3, r1
 8006bec:	4630      	mov	r0, r6
 8006bee:	4639      	mov	r1, r7
 8006bf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006bf4:	f7f9 fb60 	bl	80002b8 <__aeabi_dsub>
 8006bf8:	f805 6b01 	strb.w	r6, [r5], #1
 8006bfc:	9e01      	ldr	r6, [sp, #4]
 8006bfe:	9f03      	ldr	r7, [sp, #12]
 8006c00:	1bae      	subs	r6, r5, r6
 8006c02:	42b7      	cmp	r7, r6
 8006c04:	4602      	mov	r2, r0
 8006c06:	460b      	mov	r3, r1
 8006c08:	d135      	bne.n	8006c76 <_dtoa_r+0x6e6>
 8006c0a:	f7f9 fb57 	bl	80002bc <__adddf3>
 8006c0e:	4642      	mov	r2, r8
 8006c10:	464b      	mov	r3, r9
 8006c12:	4606      	mov	r6, r0
 8006c14:	460f      	mov	r7, r1
 8006c16:	f7f9 ff97 	bl	8000b48 <__aeabi_dcmpgt>
 8006c1a:	b9d0      	cbnz	r0, 8006c52 <_dtoa_r+0x6c2>
 8006c1c:	4642      	mov	r2, r8
 8006c1e:	464b      	mov	r3, r9
 8006c20:	4630      	mov	r0, r6
 8006c22:	4639      	mov	r1, r7
 8006c24:	f7f9 ff68 	bl	8000af8 <__aeabi_dcmpeq>
 8006c28:	b110      	cbz	r0, 8006c30 <_dtoa_r+0x6a0>
 8006c2a:	f01a 0f01 	tst.w	sl, #1
 8006c2e:	d110      	bne.n	8006c52 <_dtoa_r+0x6c2>
 8006c30:	4620      	mov	r0, r4
 8006c32:	ee18 1a10 	vmov	r1, s16
 8006c36:	f000 faf3 	bl	8007220 <_Bfree>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9800      	ldr	r0, [sp, #0]
 8006c3e:	702b      	strb	r3, [r5, #0]
 8006c40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c42:	3001      	adds	r0, #1
 8006c44:	6018      	str	r0, [r3, #0]
 8006c46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f43f acf1 	beq.w	8006630 <_dtoa_r+0xa0>
 8006c4e:	601d      	str	r5, [r3, #0]
 8006c50:	e4ee      	b.n	8006630 <_dtoa_r+0xa0>
 8006c52:	9f00      	ldr	r7, [sp, #0]
 8006c54:	462b      	mov	r3, r5
 8006c56:	461d      	mov	r5, r3
 8006c58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c5c:	2a39      	cmp	r2, #57	; 0x39
 8006c5e:	d106      	bne.n	8006c6e <_dtoa_r+0x6de>
 8006c60:	9a01      	ldr	r2, [sp, #4]
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d1f7      	bne.n	8006c56 <_dtoa_r+0x6c6>
 8006c66:	9901      	ldr	r1, [sp, #4]
 8006c68:	2230      	movs	r2, #48	; 0x30
 8006c6a:	3701      	adds	r7, #1
 8006c6c:	700a      	strb	r2, [r1, #0]
 8006c6e:	781a      	ldrb	r2, [r3, #0]
 8006c70:	3201      	adds	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
 8006c74:	e790      	b.n	8006b98 <_dtoa_r+0x608>
 8006c76:	4ba6      	ldr	r3, [pc, #664]	; (8006f10 <_dtoa_r+0x980>)
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f7f9 fcd5 	bl	8000628 <__aeabi_dmul>
 8006c7e:	2200      	movs	r2, #0
 8006c80:	2300      	movs	r3, #0
 8006c82:	4606      	mov	r6, r0
 8006c84:	460f      	mov	r7, r1
 8006c86:	f7f9 ff37 	bl	8000af8 <__aeabi_dcmpeq>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	d09d      	beq.n	8006bca <_dtoa_r+0x63a>
 8006c8e:	e7cf      	b.n	8006c30 <_dtoa_r+0x6a0>
 8006c90:	9a08      	ldr	r2, [sp, #32]
 8006c92:	2a00      	cmp	r2, #0
 8006c94:	f000 80d7 	beq.w	8006e46 <_dtoa_r+0x8b6>
 8006c98:	9a06      	ldr	r2, [sp, #24]
 8006c9a:	2a01      	cmp	r2, #1
 8006c9c:	f300 80ba 	bgt.w	8006e14 <_dtoa_r+0x884>
 8006ca0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ca2:	2a00      	cmp	r2, #0
 8006ca4:	f000 80b2 	beq.w	8006e0c <_dtoa_r+0x87c>
 8006ca8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cac:	9e07      	ldr	r6, [sp, #28]
 8006cae:	9d04      	ldr	r5, [sp, #16]
 8006cb0:	9a04      	ldr	r2, [sp, #16]
 8006cb2:	441a      	add	r2, r3
 8006cb4:	9204      	str	r2, [sp, #16]
 8006cb6:	9a05      	ldr	r2, [sp, #20]
 8006cb8:	2101      	movs	r1, #1
 8006cba:	441a      	add	r2, r3
 8006cbc:	4620      	mov	r0, r4
 8006cbe:	9205      	str	r2, [sp, #20]
 8006cc0:	f000 fb66 	bl	8007390 <__i2b>
 8006cc4:	4607      	mov	r7, r0
 8006cc6:	2d00      	cmp	r5, #0
 8006cc8:	dd0c      	ble.n	8006ce4 <_dtoa_r+0x754>
 8006cca:	9b05      	ldr	r3, [sp, #20]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	dd09      	ble.n	8006ce4 <_dtoa_r+0x754>
 8006cd0:	42ab      	cmp	r3, r5
 8006cd2:	9a04      	ldr	r2, [sp, #16]
 8006cd4:	bfa8      	it	ge
 8006cd6:	462b      	movge	r3, r5
 8006cd8:	1ad2      	subs	r2, r2, r3
 8006cda:	9204      	str	r2, [sp, #16]
 8006cdc:	9a05      	ldr	r2, [sp, #20]
 8006cde:	1aed      	subs	r5, r5, r3
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	9b07      	ldr	r3, [sp, #28]
 8006ce6:	b31b      	cbz	r3, 8006d30 <_dtoa_r+0x7a0>
 8006ce8:	9b08      	ldr	r3, [sp, #32]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f000 80af 	beq.w	8006e4e <_dtoa_r+0x8be>
 8006cf0:	2e00      	cmp	r6, #0
 8006cf2:	dd13      	ble.n	8006d1c <_dtoa_r+0x78c>
 8006cf4:	4639      	mov	r1, r7
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 fc09 	bl	8007510 <__pow5mult>
 8006cfe:	ee18 2a10 	vmov	r2, s16
 8006d02:	4601      	mov	r1, r0
 8006d04:	4607      	mov	r7, r0
 8006d06:	4620      	mov	r0, r4
 8006d08:	f000 fb58 	bl	80073bc <__multiply>
 8006d0c:	ee18 1a10 	vmov	r1, s16
 8006d10:	4680      	mov	r8, r0
 8006d12:	4620      	mov	r0, r4
 8006d14:	f000 fa84 	bl	8007220 <_Bfree>
 8006d18:	ee08 8a10 	vmov	s16, r8
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	1b9a      	subs	r2, r3, r6
 8006d20:	d006      	beq.n	8006d30 <_dtoa_r+0x7a0>
 8006d22:	ee18 1a10 	vmov	r1, s16
 8006d26:	4620      	mov	r0, r4
 8006d28:	f000 fbf2 	bl	8007510 <__pow5mult>
 8006d2c:	ee08 0a10 	vmov	s16, r0
 8006d30:	2101      	movs	r1, #1
 8006d32:	4620      	mov	r0, r4
 8006d34:	f000 fb2c 	bl	8007390 <__i2b>
 8006d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	4606      	mov	r6, r0
 8006d3e:	f340 8088 	ble.w	8006e52 <_dtoa_r+0x8c2>
 8006d42:	461a      	mov	r2, r3
 8006d44:	4601      	mov	r1, r0
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 fbe2 	bl	8007510 <__pow5mult>
 8006d4c:	9b06      	ldr	r3, [sp, #24]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	4606      	mov	r6, r0
 8006d52:	f340 8081 	ble.w	8006e58 <_dtoa_r+0x8c8>
 8006d56:	f04f 0800 	mov.w	r8, #0
 8006d5a:	6933      	ldr	r3, [r6, #16]
 8006d5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d60:	6918      	ldr	r0, [r3, #16]
 8006d62:	f000 fac5 	bl	80072f0 <__hi0bits>
 8006d66:	f1c0 0020 	rsb	r0, r0, #32
 8006d6a:	9b05      	ldr	r3, [sp, #20]
 8006d6c:	4418      	add	r0, r3
 8006d6e:	f010 001f 	ands.w	r0, r0, #31
 8006d72:	f000 8092 	beq.w	8006e9a <_dtoa_r+0x90a>
 8006d76:	f1c0 0320 	rsb	r3, r0, #32
 8006d7a:	2b04      	cmp	r3, #4
 8006d7c:	f340 808a 	ble.w	8006e94 <_dtoa_r+0x904>
 8006d80:	f1c0 001c 	rsb	r0, r0, #28
 8006d84:	9b04      	ldr	r3, [sp, #16]
 8006d86:	4403      	add	r3, r0
 8006d88:	9304      	str	r3, [sp, #16]
 8006d8a:	9b05      	ldr	r3, [sp, #20]
 8006d8c:	4403      	add	r3, r0
 8006d8e:	4405      	add	r5, r0
 8006d90:	9305      	str	r3, [sp, #20]
 8006d92:	9b04      	ldr	r3, [sp, #16]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	dd07      	ble.n	8006da8 <_dtoa_r+0x818>
 8006d98:	ee18 1a10 	vmov	r1, s16
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f000 fc10 	bl	80075c4 <__lshift>
 8006da4:	ee08 0a10 	vmov	s16, r0
 8006da8:	9b05      	ldr	r3, [sp, #20]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	dd05      	ble.n	8006dba <_dtoa_r+0x82a>
 8006dae:	4631      	mov	r1, r6
 8006db0:	461a      	mov	r2, r3
 8006db2:	4620      	mov	r0, r4
 8006db4:	f000 fc06 	bl	80075c4 <__lshift>
 8006db8:	4606      	mov	r6, r0
 8006dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d06e      	beq.n	8006e9e <_dtoa_r+0x90e>
 8006dc0:	ee18 0a10 	vmov	r0, s16
 8006dc4:	4631      	mov	r1, r6
 8006dc6:	f000 fc6d 	bl	80076a4 <__mcmp>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	da67      	bge.n	8006e9e <_dtoa_r+0x90e>
 8006dce:	9b00      	ldr	r3, [sp, #0]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	ee18 1a10 	vmov	r1, s16
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	220a      	movs	r2, #10
 8006dda:	2300      	movs	r3, #0
 8006ddc:	4620      	mov	r0, r4
 8006dde:	f000 fa41 	bl	8007264 <__multadd>
 8006de2:	9b08      	ldr	r3, [sp, #32]
 8006de4:	ee08 0a10 	vmov	s16, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 81b1 	beq.w	8007150 <_dtoa_r+0xbc0>
 8006dee:	2300      	movs	r3, #0
 8006df0:	4639      	mov	r1, r7
 8006df2:	220a      	movs	r2, #10
 8006df4:	4620      	mov	r0, r4
 8006df6:	f000 fa35 	bl	8007264 <__multadd>
 8006dfa:	9b02      	ldr	r3, [sp, #8]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	4607      	mov	r7, r0
 8006e00:	f300 808e 	bgt.w	8006f20 <_dtoa_r+0x990>
 8006e04:	9b06      	ldr	r3, [sp, #24]
 8006e06:	2b02      	cmp	r3, #2
 8006e08:	dc51      	bgt.n	8006eae <_dtoa_r+0x91e>
 8006e0a:	e089      	b.n	8006f20 <_dtoa_r+0x990>
 8006e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006e12:	e74b      	b.n	8006cac <_dtoa_r+0x71c>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	1e5e      	subs	r6, r3, #1
 8006e18:	9b07      	ldr	r3, [sp, #28]
 8006e1a:	42b3      	cmp	r3, r6
 8006e1c:	bfbf      	itttt	lt
 8006e1e:	9b07      	ldrlt	r3, [sp, #28]
 8006e20:	9607      	strlt	r6, [sp, #28]
 8006e22:	1af2      	sublt	r2, r6, r3
 8006e24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006e26:	bfb6      	itet	lt
 8006e28:	189b      	addlt	r3, r3, r2
 8006e2a:	1b9e      	subge	r6, r3, r6
 8006e2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006e2e:	9b03      	ldr	r3, [sp, #12]
 8006e30:	bfb8      	it	lt
 8006e32:	2600      	movlt	r6, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bfb7      	itett	lt
 8006e38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006e3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006e40:	1a9d      	sublt	r5, r3, r2
 8006e42:	2300      	movlt	r3, #0
 8006e44:	e734      	b.n	8006cb0 <_dtoa_r+0x720>
 8006e46:	9e07      	ldr	r6, [sp, #28]
 8006e48:	9d04      	ldr	r5, [sp, #16]
 8006e4a:	9f08      	ldr	r7, [sp, #32]
 8006e4c:	e73b      	b.n	8006cc6 <_dtoa_r+0x736>
 8006e4e:	9a07      	ldr	r2, [sp, #28]
 8006e50:	e767      	b.n	8006d22 <_dtoa_r+0x792>
 8006e52:	9b06      	ldr	r3, [sp, #24]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	dc18      	bgt.n	8006e8a <_dtoa_r+0x8fa>
 8006e58:	f1ba 0f00 	cmp.w	sl, #0
 8006e5c:	d115      	bne.n	8006e8a <_dtoa_r+0x8fa>
 8006e5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e62:	b993      	cbnz	r3, 8006e8a <_dtoa_r+0x8fa>
 8006e64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006e68:	0d1b      	lsrs	r3, r3, #20
 8006e6a:	051b      	lsls	r3, r3, #20
 8006e6c:	b183      	cbz	r3, 8006e90 <_dtoa_r+0x900>
 8006e6e:	9b04      	ldr	r3, [sp, #16]
 8006e70:	3301      	adds	r3, #1
 8006e72:	9304      	str	r3, [sp, #16]
 8006e74:	9b05      	ldr	r3, [sp, #20]
 8006e76:	3301      	adds	r3, #1
 8006e78:	9305      	str	r3, [sp, #20]
 8006e7a:	f04f 0801 	mov.w	r8, #1
 8006e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	f47f af6a 	bne.w	8006d5a <_dtoa_r+0x7ca>
 8006e86:	2001      	movs	r0, #1
 8006e88:	e76f      	b.n	8006d6a <_dtoa_r+0x7da>
 8006e8a:	f04f 0800 	mov.w	r8, #0
 8006e8e:	e7f6      	b.n	8006e7e <_dtoa_r+0x8ee>
 8006e90:	4698      	mov	r8, r3
 8006e92:	e7f4      	b.n	8006e7e <_dtoa_r+0x8ee>
 8006e94:	f43f af7d 	beq.w	8006d92 <_dtoa_r+0x802>
 8006e98:	4618      	mov	r0, r3
 8006e9a:	301c      	adds	r0, #28
 8006e9c:	e772      	b.n	8006d84 <_dtoa_r+0x7f4>
 8006e9e:	9b03      	ldr	r3, [sp, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	dc37      	bgt.n	8006f14 <_dtoa_r+0x984>
 8006ea4:	9b06      	ldr	r3, [sp, #24]
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	dd34      	ble.n	8006f14 <_dtoa_r+0x984>
 8006eaa:	9b03      	ldr	r3, [sp, #12]
 8006eac:	9302      	str	r3, [sp, #8]
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	b96b      	cbnz	r3, 8006ece <_dtoa_r+0x93e>
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	2205      	movs	r2, #5
 8006eb6:	4620      	mov	r0, r4
 8006eb8:	f000 f9d4 	bl	8007264 <__multadd>
 8006ebc:	4601      	mov	r1, r0
 8006ebe:	4606      	mov	r6, r0
 8006ec0:	ee18 0a10 	vmov	r0, s16
 8006ec4:	f000 fbee 	bl	80076a4 <__mcmp>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f73f adbb 	bgt.w	8006a44 <_dtoa_r+0x4b4>
 8006ece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ed0:	9d01      	ldr	r5, [sp, #4]
 8006ed2:	43db      	mvns	r3, r3
 8006ed4:	9300      	str	r3, [sp, #0]
 8006ed6:	f04f 0800 	mov.w	r8, #0
 8006eda:	4631      	mov	r1, r6
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 f99f 	bl	8007220 <_Bfree>
 8006ee2:	2f00      	cmp	r7, #0
 8006ee4:	f43f aea4 	beq.w	8006c30 <_dtoa_r+0x6a0>
 8006ee8:	f1b8 0f00 	cmp.w	r8, #0
 8006eec:	d005      	beq.n	8006efa <_dtoa_r+0x96a>
 8006eee:	45b8      	cmp	r8, r7
 8006ef0:	d003      	beq.n	8006efa <_dtoa_r+0x96a>
 8006ef2:	4641      	mov	r1, r8
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f000 f993 	bl	8007220 <_Bfree>
 8006efa:	4639      	mov	r1, r7
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 f98f 	bl	8007220 <_Bfree>
 8006f02:	e695      	b.n	8006c30 <_dtoa_r+0x6a0>
 8006f04:	2600      	movs	r6, #0
 8006f06:	4637      	mov	r7, r6
 8006f08:	e7e1      	b.n	8006ece <_dtoa_r+0x93e>
 8006f0a:	9700      	str	r7, [sp, #0]
 8006f0c:	4637      	mov	r7, r6
 8006f0e:	e599      	b.n	8006a44 <_dtoa_r+0x4b4>
 8006f10:	40240000 	.word	0x40240000
 8006f14:	9b08      	ldr	r3, [sp, #32]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	f000 80ca 	beq.w	80070b0 <_dtoa_r+0xb20>
 8006f1c:	9b03      	ldr	r3, [sp, #12]
 8006f1e:	9302      	str	r3, [sp, #8]
 8006f20:	2d00      	cmp	r5, #0
 8006f22:	dd05      	ble.n	8006f30 <_dtoa_r+0x9a0>
 8006f24:	4639      	mov	r1, r7
 8006f26:	462a      	mov	r2, r5
 8006f28:	4620      	mov	r0, r4
 8006f2a:	f000 fb4b 	bl	80075c4 <__lshift>
 8006f2e:	4607      	mov	r7, r0
 8006f30:	f1b8 0f00 	cmp.w	r8, #0
 8006f34:	d05b      	beq.n	8006fee <_dtoa_r+0xa5e>
 8006f36:	6879      	ldr	r1, [r7, #4]
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 f931 	bl	80071a0 <_Balloc>
 8006f3e:	4605      	mov	r5, r0
 8006f40:	b928      	cbnz	r0, 8006f4e <_dtoa_r+0x9be>
 8006f42:	4b87      	ldr	r3, [pc, #540]	; (8007160 <_dtoa_r+0xbd0>)
 8006f44:	4602      	mov	r2, r0
 8006f46:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006f4a:	f7ff bb3b 	b.w	80065c4 <_dtoa_r+0x34>
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	3202      	adds	r2, #2
 8006f52:	0092      	lsls	r2, r2, #2
 8006f54:	f107 010c 	add.w	r1, r7, #12
 8006f58:	300c      	adds	r0, #12
 8006f5a:	f000 f913 	bl	8007184 <memcpy>
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4629      	mov	r1, r5
 8006f62:	4620      	mov	r0, r4
 8006f64:	f000 fb2e 	bl	80075c4 <__lshift>
 8006f68:	9b01      	ldr	r3, [sp, #4]
 8006f6a:	f103 0901 	add.w	r9, r3, #1
 8006f6e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006f72:	4413      	add	r3, r2
 8006f74:	9305      	str	r3, [sp, #20]
 8006f76:	f00a 0301 	and.w	r3, sl, #1
 8006f7a:	46b8      	mov	r8, r7
 8006f7c:	9304      	str	r3, [sp, #16]
 8006f7e:	4607      	mov	r7, r0
 8006f80:	4631      	mov	r1, r6
 8006f82:	ee18 0a10 	vmov	r0, s16
 8006f86:	f7ff fa77 	bl	8006478 <quorem>
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	9002      	str	r0, [sp, #8]
 8006f8e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f92:	ee18 0a10 	vmov	r0, s16
 8006f96:	f000 fb85 	bl	80076a4 <__mcmp>
 8006f9a:	463a      	mov	r2, r7
 8006f9c:	9003      	str	r0, [sp, #12]
 8006f9e:	4631      	mov	r1, r6
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 fb9b 	bl	80076dc <__mdiff>
 8006fa6:	68c2      	ldr	r2, [r0, #12]
 8006fa8:	f109 3bff 	add.w	fp, r9, #4294967295
 8006fac:	4605      	mov	r5, r0
 8006fae:	bb02      	cbnz	r2, 8006ff2 <_dtoa_r+0xa62>
 8006fb0:	4601      	mov	r1, r0
 8006fb2:	ee18 0a10 	vmov	r0, s16
 8006fb6:	f000 fb75 	bl	80076a4 <__mcmp>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	4629      	mov	r1, r5
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	9207      	str	r2, [sp, #28]
 8006fc2:	f000 f92d 	bl	8007220 <_Bfree>
 8006fc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006fca:	ea43 0102 	orr.w	r1, r3, r2
 8006fce:	9b04      	ldr	r3, [sp, #16]
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	464d      	mov	r5, r9
 8006fd4:	d10f      	bne.n	8006ff6 <_dtoa_r+0xa66>
 8006fd6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006fda:	d02a      	beq.n	8007032 <_dtoa_r+0xaa2>
 8006fdc:	9b03      	ldr	r3, [sp, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	dd02      	ble.n	8006fe8 <_dtoa_r+0xa58>
 8006fe2:	9b02      	ldr	r3, [sp, #8]
 8006fe4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006fe8:	f88b a000 	strb.w	sl, [fp]
 8006fec:	e775      	b.n	8006eda <_dtoa_r+0x94a>
 8006fee:	4638      	mov	r0, r7
 8006ff0:	e7ba      	b.n	8006f68 <_dtoa_r+0x9d8>
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	e7e2      	b.n	8006fbc <_dtoa_r+0xa2c>
 8006ff6:	9b03      	ldr	r3, [sp, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	db04      	blt.n	8007006 <_dtoa_r+0xa76>
 8006ffc:	9906      	ldr	r1, [sp, #24]
 8006ffe:	430b      	orrs	r3, r1
 8007000:	9904      	ldr	r1, [sp, #16]
 8007002:	430b      	orrs	r3, r1
 8007004:	d122      	bne.n	800704c <_dtoa_r+0xabc>
 8007006:	2a00      	cmp	r2, #0
 8007008:	ddee      	ble.n	8006fe8 <_dtoa_r+0xa58>
 800700a:	ee18 1a10 	vmov	r1, s16
 800700e:	2201      	movs	r2, #1
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fad7 	bl	80075c4 <__lshift>
 8007016:	4631      	mov	r1, r6
 8007018:	ee08 0a10 	vmov	s16, r0
 800701c:	f000 fb42 	bl	80076a4 <__mcmp>
 8007020:	2800      	cmp	r0, #0
 8007022:	dc03      	bgt.n	800702c <_dtoa_r+0xa9c>
 8007024:	d1e0      	bne.n	8006fe8 <_dtoa_r+0xa58>
 8007026:	f01a 0f01 	tst.w	sl, #1
 800702a:	d0dd      	beq.n	8006fe8 <_dtoa_r+0xa58>
 800702c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007030:	d1d7      	bne.n	8006fe2 <_dtoa_r+0xa52>
 8007032:	2339      	movs	r3, #57	; 0x39
 8007034:	f88b 3000 	strb.w	r3, [fp]
 8007038:	462b      	mov	r3, r5
 800703a:	461d      	mov	r5, r3
 800703c:	3b01      	subs	r3, #1
 800703e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007042:	2a39      	cmp	r2, #57	; 0x39
 8007044:	d071      	beq.n	800712a <_dtoa_r+0xb9a>
 8007046:	3201      	adds	r2, #1
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	e746      	b.n	8006eda <_dtoa_r+0x94a>
 800704c:	2a00      	cmp	r2, #0
 800704e:	dd07      	ble.n	8007060 <_dtoa_r+0xad0>
 8007050:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007054:	d0ed      	beq.n	8007032 <_dtoa_r+0xaa2>
 8007056:	f10a 0301 	add.w	r3, sl, #1
 800705a:	f88b 3000 	strb.w	r3, [fp]
 800705e:	e73c      	b.n	8006eda <_dtoa_r+0x94a>
 8007060:	9b05      	ldr	r3, [sp, #20]
 8007062:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007066:	4599      	cmp	r9, r3
 8007068:	d047      	beq.n	80070fa <_dtoa_r+0xb6a>
 800706a:	ee18 1a10 	vmov	r1, s16
 800706e:	2300      	movs	r3, #0
 8007070:	220a      	movs	r2, #10
 8007072:	4620      	mov	r0, r4
 8007074:	f000 f8f6 	bl	8007264 <__multadd>
 8007078:	45b8      	cmp	r8, r7
 800707a:	ee08 0a10 	vmov	s16, r0
 800707e:	f04f 0300 	mov.w	r3, #0
 8007082:	f04f 020a 	mov.w	r2, #10
 8007086:	4641      	mov	r1, r8
 8007088:	4620      	mov	r0, r4
 800708a:	d106      	bne.n	800709a <_dtoa_r+0xb0a>
 800708c:	f000 f8ea 	bl	8007264 <__multadd>
 8007090:	4680      	mov	r8, r0
 8007092:	4607      	mov	r7, r0
 8007094:	f109 0901 	add.w	r9, r9, #1
 8007098:	e772      	b.n	8006f80 <_dtoa_r+0x9f0>
 800709a:	f000 f8e3 	bl	8007264 <__multadd>
 800709e:	4639      	mov	r1, r7
 80070a0:	4680      	mov	r8, r0
 80070a2:	2300      	movs	r3, #0
 80070a4:	220a      	movs	r2, #10
 80070a6:	4620      	mov	r0, r4
 80070a8:	f000 f8dc 	bl	8007264 <__multadd>
 80070ac:	4607      	mov	r7, r0
 80070ae:	e7f1      	b.n	8007094 <_dtoa_r+0xb04>
 80070b0:	9b03      	ldr	r3, [sp, #12]
 80070b2:	9302      	str	r3, [sp, #8]
 80070b4:	9d01      	ldr	r5, [sp, #4]
 80070b6:	ee18 0a10 	vmov	r0, s16
 80070ba:	4631      	mov	r1, r6
 80070bc:	f7ff f9dc 	bl	8006478 <quorem>
 80070c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80070c4:	9b01      	ldr	r3, [sp, #4]
 80070c6:	f805 ab01 	strb.w	sl, [r5], #1
 80070ca:	1aea      	subs	r2, r5, r3
 80070cc:	9b02      	ldr	r3, [sp, #8]
 80070ce:	4293      	cmp	r3, r2
 80070d0:	dd09      	ble.n	80070e6 <_dtoa_r+0xb56>
 80070d2:	ee18 1a10 	vmov	r1, s16
 80070d6:	2300      	movs	r3, #0
 80070d8:	220a      	movs	r2, #10
 80070da:	4620      	mov	r0, r4
 80070dc:	f000 f8c2 	bl	8007264 <__multadd>
 80070e0:	ee08 0a10 	vmov	s16, r0
 80070e4:	e7e7      	b.n	80070b6 <_dtoa_r+0xb26>
 80070e6:	9b02      	ldr	r3, [sp, #8]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	bfc8      	it	gt
 80070ec:	461d      	movgt	r5, r3
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	bfd8      	it	le
 80070f2:	2501      	movle	r5, #1
 80070f4:	441d      	add	r5, r3
 80070f6:	f04f 0800 	mov.w	r8, #0
 80070fa:	ee18 1a10 	vmov	r1, s16
 80070fe:	2201      	movs	r2, #1
 8007100:	4620      	mov	r0, r4
 8007102:	f000 fa5f 	bl	80075c4 <__lshift>
 8007106:	4631      	mov	r1, r6
 8007108:	ee08 0a10 	vmov	s16, r0
 800710c:	f000 faca 	bl	80076a4 <__mcmp>
 8007110:	2800      	cmp	r0, #0
 8007112:	dc91      	bgt.n	8007038 <_dtoa_r+0xaa8>
 8007114:	d102      	bne.n	800711c <_dtoa_r+0xb8c>
 8007116:	f01a 0f01 	tst.w	sl, #1
 800711a:	d18d      	bne.n	8007038 <_dtoa_r+0xaa8>
 800711c:	462b      	mov	r3, r5
 800711e:	461d      	mov	r5, r3
 8007120:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007124:	2a30      	cmp	r2, #48	; 0x30
 8007126:	d0fa      	beq.n	800711e <_dtoa_r+0xb8e>
 8007128:	e6d7      	b.n	8006eda <_dtoa_r+0x94a>
 800712a:	9a01      	ldr	r2, [sp, #4]
 800712c:	429a      	cmp	r2, r3
 800712e:	d184      	bne.n	800703a <_dtoa_r+0xaaa>
 8007130:	9b00      	ldr	r3, [sp, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	2331      	movs	r3, #49	; 0x31
 8007138:	7013      	strb	r3, [r2, #0]
 800713a:	e6ce      	b.n	8006eda <_dtoa_r+0x94a>
 800713c:	4b09      	ldr	r3, [pc, #36]	; (8007164 <_dtoa_r+0xbd4>)
 800713e:	f7ff ba95 	b.w	800666c <_dtoa_r+0xdc>
 8007142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007144:	2b00      	cmp	r3, #0
 8007146:	f47f aa6e 	bne.w	8006626 <_dtoa_r+0x96>
 800714a:	4b07      	ldr	r3, [pc, #28]	; (8007168 <_dtoa_r+0xbd8>)
 800714c:	f7ff ba8e 	b.w	800666c <_dtoa_r+0xdc>
 8007150:	9b02      	ldr	r3, [sp, #8]
 8007152:	2b00      	cmp	r3, #0
 8007154:	dcae      	bgt.n	80070b4 <_dtoa_r+0xb24>
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	2b02      	cmp	r3, #2
 800715a:	f73f aea8 	bgt.w	8006eae <_dtoa_r+0x91e>
 800715e:	e7a9      	b.n	80070b4 <_dtoa_r+0xb24>
 8007160:	08008b3b 	.word	0x08008b3b
 8007164:	08008a98 	.word	0x08008a98
 8007168:	08008abc 	.word	0x08008abc

0800716c <_localeconv_r>:
 800716c:	4800      	ldr	r0, [pc, #0]	; (8007170 <_localeconv_r+0x4>)
 800716e:	4770      	bx	lr
 8007170:	20000160 	.word	0x20000160

08007174 <malloc>:
 8007174:	4b02      	ldr	r3, [pc, #8]	; (8007180 <malloc+0xc>)
 8007176:	4601      	mov	r1, r0
 8007178:	6818      	ldr	r0, [r3, #0]
 800717a:	f000 bc17 	b.w	80079ac <_malloc_r>
 800717e:	bf00      	nop
 8007180:	2000000c 	.word	0x2000000c

08007184 <memcpy>:
 8007184:	440a      	add	r2, r1
 8007186:	4291      	cmp	r1, r2
 8007188:	f100 33ff 	add.w	r3, r0, #4294967295
 800718c:	d100      	bne.n	8007190 <memcpy+0xc>
 800718e:	4770      	bx	lr
 8007190:	b510      	push	{r4, lr}
 8007192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007196:	f803 4f01 	strb.w	r4, [r3, #1]!
 800719a:	4291      	cmp	r1, r2
 800719c:	d1f9      	bne.n	8007192 <memcpy+0xe>
 800719e:	bd10      	pop	{r4, pc}

080071a0 <_Balloc>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80071a4:	4604      	mov	r4, r0
 80071a6:	460d      	mov	r5, r1
 80071a8:	b976      	cbnz	r6, 80071c8 <_Balloc+0x28>
 80071aa:	2010      	movs	r0, #16
 80071ac:	f7ff ffe2 	bl	8007174 <malloc>
 80071b0:	4602      	mov	r2, r0
 80071b2:	6260      	str	r0, [r4, #36]	; 0x24
 80071b4:	b920      	cbnz	r0, 80071c0 <_Balloc+0x20>
 80071b6:	4b18      	ldr	r3, [pc, #96]	; (8007218 <_Balloc+0x78>)
 80071b8:	4818      	ldr	r0, [pc, #96]	; (800721c <_Balloc+0x7c>)
 80071ba:	2166      	movs	r1, #102	; 0x66
 80071bc:	f000 fdd6 	bl	8007d6c <__assert_func>
 80071c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071c4:	6006      	str	r6, [r0, #0]
 80071c6:	60c6      	str	r6, [r0, #12]
 80071c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071ca:	68f3      	ldr	r3, [r6, #12]
 80071cc:	b183      	cbz	r3, 80071f0 <_Balloc+0x50>
 80071ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071d6:	b9b8      	cbnz	r0, 8007208 <_Balloc+0x68>
 80071d8:	2101      	movs	r1, #1
 80071da:	fa01 f605 	lsl.w	r6, r1, r5
 80071de:	1d72      	adds	r2, r6, #5
 80071e0:	0092      	lsls	r2, r2, #2
 80071e2:	4620      	mov	r0, r4
 80071e4:	f000 fb60 	bl	80078a8 <_calloc_r>
 80071e8:	b160      	cbz	r0, 8007204 <_Balloc+0x64>
 80071ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071ee:	e00e      	b.n	800720e <_Balloc+0x6e>
 80071f0:	2221      	movs	r2, #33	; 0x21
 80071f2:	2104      	movs	r1, #4
 80071f4:	4620      	mov	r0, r4
 80071f6:	f000 fb57 	bl	80078a8 <_calloc_r>
 80071fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071fc:	60f0      	str	r0, [r6, #12]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e4      	bne.n	80071ce <_Balloc+0x2e>
 8007204:	2000      	movs	r0, #0
 8007206:	bd70      	pop	{r4, r5, r6, pc}
 8007208:	6802      	ldr	r2, [r0, #0]
 800720a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800720e:	2300      	movs	r3, #0
 8007210:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007214:	e7f7      	b.n	8007206 <_Balloc+0x66>
 8007216:	bf00      	nop
 8007218:	08008ac9 	.word	0x08008ac9
 800721c:	08008b4c 	.word	0x08008b4c

08007220 <_Bfree>:
 8007220:	b570      	push	{r4, r5, r6, lr}
 8007222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007224:	4605      	mov	r5, r0
 8007226:	460c      	mov	r4, r1
 8007228:	b976      	cbnz	r6, 8007248 <_Bfree+0x28>
 800722a:	2010      	movs	r0, #16
 800722c:	f7ff ffa2 	bl	8007174 <malloc>
 8007230:	4602      	mov	r2, r0
 8007232:	6268      	str	r0, [r5, #36]	; 0x24
 8007234:	b920      	cbnz	r0, 8007240 <_Bfree+0x20>
 8007236:	4b09      	ldr	r3, [pc, #36]	; (800725c <_Bfree+0x3c>)
 8007238:	4809      	ldr	r0, [pc, #36]	; (8007260 <_Bfree+0x40>)
 800723a:	218a      	movs	r1, #138	; 0x8a
 800723c:	f000 fd96 	bl	8007d6c <__assert_func>
 8007240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007244:	6006      	str	r6, [r0, #0]
 8007246:	60c6      	str	r6, [r0, #12]
 8007248:	b13c      	cbz	r4, 800725a <_Bfree+0x3a>
 800724a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800724c:	6862      	ldr	r2, [r4, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007254:	6021      	str	r1, [r4, #0]
 8007256:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800725a:	bd70      	pop	{r4, r5, r6, pc}
 800725c:	08008ac9 	.word	0x08008ac9
 8007260:	08008b4c 	.word	0x08008b4c

08007264 <__multadd>:
 8007264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007268:	690d      	ldr	r5, [r1, #16]
 800726a:	4607      	mov	r7, r0
 800726c:	460c      	mov	r4, r1
 800726e:	461e      	mov	r6, r3
 8007270:	f101 0c14 	add.w	ip, r1, #20
 8007274:	2000      	movs	r0, #0
 8007276:	f8dc 3000 	ldr.w	r3, [ip]
 800727a:	b299      	uxth	r1, r3
 800727c:	fb02 6101 	mla	r1, r2, r1, r6
 8007280:	0c1e      	lsrs	r6, r3, #16
 8007282:	0c0b      	lsrs	r3, r1, #16
 8007284:	fb02 3306 	mla	r3, r2, r6, r3
 8007288:	b289      	uxth	r1, r1
 800728a:	3001      	adds	r0, #1
 800728c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007290:	4285      	cmp	r5, r0
 8007292:	f84c 1b04 	str.w	r1, [ip], #4
 8007296:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800729a:	dcec      	bgt.n	8007276 <__multadd+0x12>
 800729c:	b30e      	cbz	r6, 80072e2 <__multadd+0x7e>
 800729e:	68a3      	ldr	r3, [r4, #8]
 80072a0:	42ab      	cmp	r3, r5
 80072a2:	dc19      	bgt.n	80072d8 <__multadd+0x74>
 80072a4:	6861      	ldr	r1, [r4, #4]
 80072a6:	4638      	mov	r0, r7
 80072a8:	3101      	adds	r1, #1
 80072aa:	f7ff ff79 	bl	80071a0 <_Balloc>
 80072ae:	4680      	mov	r8, r0
 80072b0:	b928      	cbnz	r0, 80072be <__multadd+0x5a>
 80072b2:	4602      	mov	r2, r0
 80072b4:	4b0c      	ldr	r3, [pc, #48]	; (80072e8 <__multadd+0x84>)
 80072b6:	480d      	ldr	r0, [pc, #52]	; (80072ec <__multadd+0x88>)
 80072b8:	21b5      	movs	r1, #181	; 0xb5
 80072ba:	f000 fd57 	bl	8007d6c <__assert_func>
 80072be:	6922      	ldr	r2, [r4, #16]
 80072c0:	3202      	adds	r2, #2
 80072c2:	f104 010c 	add.w	r1, r4, #12
 80072c6:	0092      	lsls	r2, r2, #2
 80072c8:	300c      	adds	r0, #12
 80072ca:	f7ff ff5b 	bl	8007184 <memcpy>
 80072ce:	4621      	mov	r1, r4
 80072d0:	4638      	mov	r0, r7
 80072d2:	f7ff ffa5 	bl	8007220 <_Bfree>
 80072d6:	4644      	mov	r4, r8
 80072d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072dc:	3501      	adds	r5, #1
 80072de:	615e      	str	r6, [r3, #20]
 80072e0:	6125      	str	r5, [r4, #16]
 80072e2:	4620      	mov	r0, r4
 80072e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e8:	08008b3b 	.word	0x08008b3b
 80072ec:	08008b4c 	.word	0x08008b4c

080072f0 <__hi0bits>:
 80072f0:	0c03      	lsrs	r3, r0, #16
 80072f2:	041b      	lsls	r3, r3, #16
 80072f4:	b9d3      	cbnz	r3, 800732c <__hi0bits+0x3c>
 80072f6:	0400      	lsls	r0, r0, #16
 80072f8:	2310      	movs	r3, #16
 80072fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072fe:	bf04      	itt	eq
 8007300:	0200      	lsleq	r0, r0, #8
 8007302:	3308      	addeq	r3, #8
 8007304:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007308:	bf04      	itt	eq
 800730a:	0100      	lsleq	r0, r0, #4
 800730c:	3304      	addeq	r3, #4
 800730e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007312:	bf04      	itt	eq
 8007314:	0080      	lsleq	r0, r0, #2
 8007316:	3302      	addeq	r3, #2
 8007318:	2800      	cmp	r0, #0
 800731a:	db05      	blt.n	8007328 <__hi0bits+0x38>
 800731c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007320:	f103 0301 	add.w	r3, r3, #1
 8007324:	bf08      	it	eq
 8007326:	2320      	moveq	r3, #32
 8007328:	4618      	mov	r0, r3
 800732a:	4770      	bx	lr
 800732c:	2300      	movs	r3, #0
 800732e:	e7e4      	b.n	80072fa <__hi0bits+0xa>

08007330 <__lo0bits>:
 8007330:	6803      	ldr	r3, [r0, #0]
 8007332:	f013 0207 	ands.w	r2, r3, #7
 8007336:	4601      	mov	r1, r0
 8007338:	d00b      	beq.n	8007352 <__lo0bits+0x22>
 800733a:	07da      	lsls	r2, r3, #31
 800733c:	d423      	bmi.n	8007386 <__lo0bits+0x56>
 800733e:	0798      	lsls	r0, r3, #30
 8007340:	bf49      	itett	mi
 8007342:	085b      	lsrmi	r3, r3, #1
 8007344:	089b      	lsrpl	r3, r3, #2
 8007346:	2001      	movmi	r0, #1
 8007348:	600b      	strmi	r3, [r1, #0]
 800734a:	bf5c      	itt	pl
 800734c:	600b      	strpl	r3, [r1, #0]
 800734e:	2002      	movpl	r0, #2
 8007350:	4770      	bx	lr
 8007352:	b298      	uxth	r0, r3
 8007354:	b9a8      	cbnz	r0, 8007382 <__lo0bits+0x52>
 8007356:	0c1b      	lsrs	r3, r3, #16
 8007358:	2010      	movs	r0, #16
 800735a:	b2da      	uxtb	r2, r3
 800735c:	b90a      	cbnz	r2, 8007362 <__lo0bits+0x32>
 800735e:	3008      	adds	r0, #8
 8007360:	0a1b      	lsrs	r3, r3, #8
 8007362:	071a      	lsls	r2, r3, #28
 8007364:	bf04      	itt	eq
 8007366:	091b      	lsreq	r3, r3, #4
 8007368:	3004      	addeq	r0, #4
 800736a:	079a      	lsls	r2, r3, #30
 800736c:	bf04      	itt	eq
 800736e:	089b      	lsreq	r3, r3, #2
 8007370:	3002      	addeq	r0, #2
 8007372:	07da      	lsls	r2, r3, #31
 8007374:	d403      	bmi.n	800737e <__lo0bits+0x4e>
 8007376:	085b      	lsrs	r3, r3, #1
 8007378:	f100 0001 	add.w	r0, r0, #1
 800737c:	d005      	beq.n	800738a <__lo0bits+0x5a>
 800737e:	600b      	str	r3, [r1, #0]
 8007380:	4770      	bx	lr
 8007382:	4610      	mov	r0, r2
 8007384:	e7e9      	b.n	800735a <__lo0bits+0x2a>
 8007386:	2000      	movs	r0, #0
 8007388:	4770      	bx	lr
 800738a:	2020      	movs	r0, #32
 800738c:	4770      	bx	lr
	...

08007390 <__i2b>:
 8007390:	b510      	push	{r4, lr}
 8007392:	460c      	mov	r4, r1
 8007394:	2101      	movs	r1, #1
 8007396:	f7ff ff03 	bl	80071a0 <_Balloc>
 800739a:	4602      	mov	r2, r0
 800739c:	b928      	cbnz	r0, 80073aa <__i2b+0x1a>
 800739e:	4b05      	ldr	r3, [pc, #20]	; (80073b4 <__i2b+0x24>)
 80073a0:	4805      	ldr	r0, [pc, #20]	; (80073b8 <__i2b+0x28>)
 80073a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80073a6:	f000 fce1 	bl	8007d6c <__assert_func>
 80073aa:	2301      	movs	r3, #1
 80073ac:	6144      	str	r4, [r0, #20]
 80073ae:	6103      	str	r3, [r0, #16]
 80073b0:	bd10      	pop	{r4, pc}
 80073b2:	bf00      	nop
 80073b4:	08008b3b 	.word	0x08008b3b
 80073b8:	08008b4c 	.word	0x08008b4c

080073bc <__multiply>:
 80073bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c0:	4691      	mov	r9, r2
 80073c2:	690a      	ldr	r2, [r1, #16]
 80073c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	bfb8      	it	lt
 80073cc:	460b      	movlt	r3, r1
 80073ce:	460c      	mov	r4, r1
 80073d0:	bfbc      	itt	lt
 80073d2:	464c      	movlt	r4, r9
 80073d4:	4699      	movlt	r9, r3
 80073d6:	6927      	ldr	r7, [r4, #16]
 80073d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073dc:	68a3      	ldr	r3, [r4, #8]
 80073de:	6861      	ldr	r1, [r4, #4]
 80073e0:	eb07 060a 	add.w	r6, r7, sl
 80073e4:	42b3      	cmp	r3, r6
 80073e6:	b085      	sub	sp, #20
 80073e8:	bfb8      	it	lt
 80073ea:	3101      	addlt	r1, #1
 80073ec:	f7ff fed8 	bl	80071a0 <_Balloc>
 80073f0:	b930      	cbnz	r0, 8007400 <__multiply+0x44>
 80073f2:	4602      	mov	r2, r0
 80073f4:	4b44      	ldr	r3, [pc, #272]	; (8007508 <__multiply+0x14c>)
 80073f6:	4845      	ldr	r0, [pc, #276]	; (800750c <__multiply+0x150>)
 80073f8:	f240 115d 	movw	r1, #349	; 0x15d
 80073fc:	f000 fcb6 	bl	8007d6c <__assert_func>
 8007400:	f100 0514 	add.w	r5, r0, #20
 8007404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007408:	462b      	mov	r3, r5
 800740a:	2200      	movs	r2, #0
 800740c:	4543      	cmp	r3, r8
 800740e:	d321      	bcc.n	8007454 <__multiply+0x98>
 8007410:	f104 0314 	add.w	r3, r4, #20
 8007414:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007418:	f109 0314 	add.w	r3, r9, #20
 800741c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007420:	9202      	str	r2, [sp, #8]
 8007422:	1b3a      	subs	r2, r7, r4
 8007424:	3a15      	subs	r2, #21
 8007426:	f022 0203 	bic.w	r2, r2, #3
 800742a:	3204      	adds	r2, #4
 800742c:	f104 0115 	add.w	r1, r4, #21
 8007430:	428f      	cmp	r7, r1
 8007432:	bf38      	it	cc
 8007434:	2204      	movcc	r2, #4
 8007436:	9201      	str	r2, [sp, #4]
 8007438:	9a02      	ldr	r2, [sp, #8]
 800743a:	9303      	str	r3, [sp, #12]
 800743c:	429a      	cmp	r2, r3
 800743e:	d80c      	bhi.n	800745a <__multiply+0x9e>
 8007440:	2e00      	cmp	r6, #0
 8007442:	dd03      	ble.n	800744c <__multiply+0x90>
 8007444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007448:	2b00      	cmp	r3, #0
 800744a:	d05a      	beq.n	8007502 <__multiply+0x146>
 800744c:	6106      	str	r6, [r0, #16]
 800744e:	b005      	add	sp, #20
 8007450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007454:	f843 2b04 	str.w	r2, [r3], #4
 8007458:	e7d8      	b.n	800740c <__multiply+0x50>
 800745a:	f8b3 a000 	ldrh.w	sl, [r3]
 800745e:	f1ba 0f00 	cmp.w	sl, #0
 8007462:	d024      	beq.n	80074ae <__multiply+0xf2>
 8007464:	f104 0e14 	add.w	lr, r4, #20
 8007468:	46a9      	mov	r9, r5
 800746a:	f04f 0c00 	mov.w	ip, #0
 800746e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007472:	f8d9 1000 	ldr.w	r1, [r9]
 8007476:	fa1f fb82 	uxth.w	fp, r2
 800747a:	b289      	uxth	r1, r1
 800747c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007480:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007484:	f8d9 2000 	ldr.w	r2, [r9]
 8007488:	4461      	add	r1, ip
 800748a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800748e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007492:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007496:	b289      	uxth	r1, r1
 8007498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800749c:	4577      	cmp	r7, lr
 800749e:	f849 1b04 	str.w	r1, [r9], #4
 80074a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80074a6:	d8e2      	bhi.n	800746e <__multiply+0xb2>
 80074a8:	9a01      	ldr	r2, [sp, #4]
 80074aa:	f845 c002 	str.w	ip, [r5, r2]
 80074ae:	9a03      	ldr	r2, [sp, #12]
 80074b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074b4:	3304      	adds	r3, #4
 80074b6:	f1b9 0f00 	cmp.w	r9, #0
 80074ba:	d020      	beq.n	80074fe <__multiply+0x142>
 80074bc:	6829      	ldr	r1, [r5, #0]
 80074be:	f104 0c14 	add.w	ip, r4, #20
 80074c2:	46ae      	mov	lr, r5
 80074c4:	f04f 0a00 	mov.w	sl, #0
 80074c8:	f8bc b000 	ldrh.w	fp, [ip]
 80074cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074d0:	fb09 220b 	mla	r2, r9, fp, r2
 80074d4:	4492      	add	sl, r2
 80074d6:	b289      	uxth	r1, r1
 80074d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074dc:	f84e 1b04 	str.w	r1, [lr], #4
 80074e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074e4:	f8be 1000 	ldrh.w	r1, [lr]
 80074e8:	0c12      	lsrs	r2, r2, #16
 80074ea:	fb09 1102 	mla	r1, r9, r2, r1
 80074ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074f2:	4567      	cmp	r7, ip
 80074f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074f8:	d8e6      	bhi.n	80074c8 <__multiply+0x10c>
 80074fa:	9a01      	ldr	r2, [sp, #4]
 80074fc:	50a9      	str	r1, [r5, r2]
 80074fe:	3504      	adds	r5, #4
 8007500:	e79a      	b.n	8007438 <__multiply+0x7c>
 8007502:	3e01      	subs	r6, #1
 8007504:	e79c      	b.n	8007440 <__multiply+0x84>
 8007506:	bf00      	nop
 8007508:	08008b3b 	.word	0x08008b3b
 800750c:	08008b4c 	.word	0x08008b4c

08007510 <__pow5mult>:
 8007510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007514:	4615      	mov	r5, r2
 8007516:	f012 0203 	ands.w	r2, r2, #3
 800751a:	4606      	mov	r6, r0
 800751c:	460f      	mov	r7, r1
 800751e:	d007      	beq.n	8007530 <__pow5mult+0x20>
 8007520:	4c25      	ldr	r4, [pc, #148]	; (80075b8 <__pow5mult+0xa8>)
 8007522:	3a01      	subs	r2, #1
 8007524:	2300      	movs	r3, #0
 8007526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800752a:	f7ff fe9b 	bl	8007264 <__multadd>
 800752e:	4607      	mov	r7, r0
 8007530:	10ad      	asrs	r5, r5, #2
 8007532:	d03d      	beq.n	80075b0 <__pow5mult+0xa0>
 8007534:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007536:	b97c      	cbnz	r4, 8007558 <__pow5mult+0x48>
 8007538:	2010      	movs	r0, #16
 800753a:	f7ff fe1b 	bl	8007174 <malloc>
 800753e:	4602      	mov	r2, r0
 8007540:	6270      	str	r0, [r6, #36]	; 0x24
 8007542:	b928      	cbnz	r0, 8007550 <__pow5mult+0x40>
 8007544:	4b1d      	ldr	r3, [pc, #116]	; (80075bc <__pow5mult+0xac>)
 8007546:	481e      	ldr	r0, [pc, #120]	; (80075c0 <__pow5mult+0xb0>)
 8007548:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800754c:	f000 fc0e 	bl	8007d6c <__assert_func>
 8007550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007554:	6004      	str	r4, [r0, #0]
 8007556:	60c4      	str	r4, [r0, #12]
 8007558:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800755c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007560:	b94c      	cbnz	r4, 8007576 <__pow5mult+0x66>
 8007562:	f240 2171 	movw	r1, #625	; 0x271
 8007566:	4630      	mov	r0, r6
 8007568:	f7ff ff12 	bl	8007390 <__i2b>
 800756c:	2300      	movs	r3, #0
 800756e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007572:	4604      	mov	r4, r0
 8007574:	6003      	str	r3, [r0, #0]
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	07eb      	lsls	r3, r5, #31
 800757c:	d50a      	bpl.n	8007594 <__pow5mult+0x84>
 800757e:	4639      	mov	r1, r7
 8007580:	4622      	mov	r2, r4
 8007582:	4630      	mov	r0, r6
 8007584:	f7ff ff1a 	bl	80073bc <__multiply>
 8007588:	4639      	mov	r1, r7
 800758a:	4680      	mov	r8, r0
 800758c:	4630      	mov	r0, r6
 800758e:	f7ff fe47 	bl	8007220 <_Bfree>
 8007592:	4647      	mov	r7, r8
 8007594:	106d      	asrs	r5, r5, #1
 8007596:	d00b      	beq.n	80075b0 <__pow5mult+0xa0>
 8007598:	6820      	ldr	r0, [r4, #0]
 800759a:	b938      	cbnz	r0, 80075ac <__pow5mult+0x9c>
 800759c:	4622      	mov	r2, r4
 800759e:	4621      	mov	r1, r4
 80075a0:	4630      	mov	r0, r6
 80075a2:	f7ff ff0b 	bl	80073bc <__multiply>
 80075a6:	6020      	str	r0, [r4, #0]
 80075a8:	f8c0 9000 	str.w	r9, [r0]
 80075ac:	4604      	mov	r4, r0
 80075ae:	e7e4      	b.n	800757a <__pow5mult+0x6a>
 80075b0:	4638      	mov	r0, r7
 80075b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075b6:	bf00      	nop
 80075b8:	08008c98 	.word	0x08008c98
 80075bc:	08008ac9 	.word	0x08008ac9
 80075c0:	08008b4c 	.word	0x08008b4c

080075c4 <__lshift>:
 80075c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c8:	460c      	mov	r4, r1
 80075ca:	6849      	ldr	r1, [r1, #4]
 80075cc:	6923      	ldr	r3, [r4, #16]
 80075ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075d2:	68a3      	ldr	r3, [r4, #8]
 80075d4:	4607      	mov	r7, r0
 80075d6:	4691      	mov	r9, r2
 80075d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075dc:	f108 0601 	add.w	r6, r8, #1
 80075e0:	42b3      	cmp	r3, r6
 80075e2:	db0b      	blt.n	80075fc <__lshift+0x38>
 80075e4:	4638      	mov	r0, r7
 80075e6:	f7ff fddb 	bl	80071a0 <_Balloc>
 80075ea:	4605      	mov	r5, r0
 80075ec:	b948      	cbnz	r0, 8007602 <__lshift+0x3e>
 80075ee:	4602      	mov	r2, r0
 80075f0:	4b2a      	ldr	r3, [pc, #168]	; (800769c <__lshift+0xd8>)
 80075f2:	482b      	ldr	r0, [pc, #172]	; (80076a0 <__lshift+0xdc>)
 80075f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075f8:	f000 fbb8 	bl	8007d6c <__assert_func>
 80075fc:	3101      	adds	r1, #1
 80075fe:	005b      	lsls	r3, r3, #1
 8007600:	e7ee      	b.n	80075e0 <__lshift+0x1c>
 8007602:	2300      	movs	r3, #0
 8007604:	f100 0114 	add.w	r1, r0, #20
 8007608:	f100 0210 	add.w	r2, r0, #16
 800760c:	4618      	mov	r0, r3
 800760e:	4553      	cmp	r3, sl
 8007610:	db37      	blt.n	8007682 <__lshift+0xbe>
 8007612:	6920      	ldr	r0, [r4, #16]
 8007614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007618:	f104 0314 	add.w	r3, r4, #20
 800761c:	f019 091f 	ands.w	r9, r9, #31
 8007620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007624:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007628:	d02f      	beq.n	800768a <__lshift+0xc6>
 800762a:	f1c9 0e20 	rsb	lr, r9, #32
 800762e:	468a      	mov	sl, r1
 8007630:	f04f 0c00 	mov.w	ip, #0
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	fa02 f209 	lsl.w	r2, r2, r9
 800763a:	ea42 020c 	orr.w	r2, r2, ip
 800763e:	f84a 2b04 	str.w	r2, [sl], #4
 8007642:	f853 2b04 	ldr.w	r2, [r3], #4
 8007646:	4298      	cmp	r0, r3
 8007648:	fa22 fc0e 	lsr.w	ip, r2, lr
 800764c:	d8f2      	bhi.n	8007634 <__lshift+0x70>
 800764e:	1b03      	subs	r3, r0, r4
 8007650:	3b15      	subs	r3, #21
 8007652:	f023 0303 	bic.w	r3, r3, #3
 8007656:	3304      	adds	r3, #4
 8007658:	f104 0215 	add.w	r2, r4, #21
 800765c:	4290      	cmp	r0, r2
 800765e:	bf38      	it	cc
 8007660:	2304      	movcc	r3, #4
 8007662:	f841 c003 	str.w	ip, [r1, r3]
 8007666:	f1bc 0f00 	cmp.w	ip, #0
 800766a:	d001      	beq.n	8007670 <__lshift+0xac>
 800766c:	f108 0602 	add.w	r6, r8, #2
 8007670:	3e01      	subs	r6, #1
 8007672:	4638      	mov	r0, r7
 8007674:	612e      	str	r6, [r5, #16]
 8007676:	4621      	mov	r1, r4
 8007678:	f7ff fdd2 	bl	8007220 <_Bfree>
 800767c:	4628      	mov	r0, r5
 800767e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007682:	f842 0f04 	str.w	r0, [r2, #4]!
 8007686:	3301      	adds	r3, #1
 8007688:	e7c1      	b.n	800760e <__lshift+0x4a>
 800768a:	3904      	subs	r1, #4
 800768c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007690:	f841 2f04 	str.w	r2, [r1, #4]!
 8007694:	4298      	cmp	r0, r3
 8007696:	d8f9      	bhi.n	800768c <__lshift+0xc8>
 8007698:	e7ea      	b.n	8007670 <__lshift+0xac>
 800769a:	bf00      	nop
 800769c:	08008b3b 	.word	0x08008b3b
 80076a0:	08008b4c 	.word	0x08008b4c

080076a4 <__mcmp>:
 80076a4:	b530      	push	{r4, r5, lr}
 80076a6:	6902      	ldr	r2, [r0, #16]
 80076a8:	690c      	ldr	r4, [r1, #16]
 80076aa:	1b12      	subs	r2, r2, r4
 80076ac:	d10e      	bne.n	80076cc <__mcmp+0x28>
 80076ae:	f100 0314 	add.w	r3, r0, #20
 80076b2:	3114      	adds	r1, #20
 80076b4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076b8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076bc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076c0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076c4:	42a5      	cmp	r5, r4
 80076c6:	d003      	beq.n	80076d0 <__mcmp+0x2c>
 80076c8:	d305      	bcc.n	80076d6 <__mcmp+0x32>
 80076ca:	2201      	movs	r2, #1
 80076cc:	4610      	mov	r0, r2
 80076ce:	bd30      	pop	{r4, r5, pc}
 80076d0:	4283      	cmp	r3, r0
 80076d2:	d3f3      	bcc.n	80076bc <__mcmp+0x18>
 80076d4:	e7fa      	b.n	80076cc <__mcmp+0x28>
 80076d6:	f04f 32ff 	mov.w	r2, #4294967295
 80076da:	e7f7      	b.n	80076cc <__mcmp+0x28>

080076dc <__mdiff>:
 80076dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	460c      	mov	r4, r1
 80076e2:	4606      	mov	r6, r0
 80076e4:	4611      	mov	r1, r2
 80076e6:	4620      	mov	r0, r4
 80076e8:	4690      	mov	r8, r2
 80076ea:	f7ff ffdb 	bl	80076a4 <__mcmp>
 80076ee:	1e05      	subs	r5, r0, #0
 80076f0:	d110      	bne.n	8007714 <__mdiff+0x38>
 80076f2:	4629      	mov	r1, r5
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7ff fd53 	bl	80071a0 <_Balloc>
 80076fa:	b930      	cbnz	r0, 800770a <__mdiff+0x2e>
 80076fc:	4b3a      	ldr	r3, [pc, #232]	; (80077e8 <__mdiff+0x10c>)
 80076fe:	4602      	mov	r2, r0
 8007700:	f240 2132 	movw	r1, #562	; 0x232
 8007704:	4839      	ldr	r0, [pc, #228]	; (80077ec <__mdiff+0x110>)
 8007706:	f000 fb31 	bl	8007d6c <__assert_func>
 800770a:	2301      	movs	r3, #1
 800770c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007710:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007714:	bfa4      	itt	ge
 8007716:	4643      	movge	r3, r8
 8007718:	46a0      	movge	r8, r4
 800771a:	4630      	mov	r0, r6
 800771c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007720:	bfa6      	itte	ge
 8007722:	461c      	movge	r4, r3
 8007724:	2500      	movge	r5, #0
 8007726:	2501      	movlt	r5, #1
 8007728:	f7ff fd3a 	bl	80071a0 <_Balloc>
 800772c:	b920      	cbnz	r0, 8007738 <__mdiff+0x5c>
 800772e:	4b2e      	ldr	r3, [pc, #184]	; (80077e8 <__mdiff+0x10c>)
 8007730:	4602      	mov	r2, r0
 8007732:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007736:	e7e5      	b.n	8007704 <__mdiff+0x28>
 8007738:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800773c:	6926      	ldr	r6, [r4, #16]
 800773e:	60c5      	str	r5, [r0, #12]
 8007740:	f104 0914 	add.w	r9, r4, #20
 8007744:	f108 0514 	add.w	r5, r8, #20
 8007748:	f100 0e14 	add.w	lr, r0, #20
 800774c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007750:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007754:	f108 0210 	add.w	r2, r8, #16
 8007758:	46f2      	mov	sl, lr
 800775a:	2100      	movs	r1, #0
 800775c:	f859 3b04 	ldr.w	r3, [r9], #4
 8007760:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007764:	fa1f f883 	uxth.w	r8, r3
 8007768:	fa11 f18b 	uxtah	r1, r1, fp
 800776c:	0c1b      	lsrs	r3, r3, #16
 800776e:	eba1 0808 	sub.w	r8, r1, r8
 8007772:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007776:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800777a:	fa1f f888 	uxth.w	r8, r8
 800777e:	1419      	asrs	r1, r3, #16
 8007780:	454e      	cmp	r6, r9
 8007782:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007786:	f84a 3b04 	str.w	r3, [sl], #4
 800778a:	d8e7      	bhi.n	800775c <__mdiff+0x80>
 800778c:	1b33      	subs	r3, r6, r4
 800778e:	3b15      	subs	r3, #21
 8007790:	f023 0303 	bic.w	r3, r3, #3
 8007794:	3304      	adds	r3, #4
 8007796:	3415      	adds	r4, #21
 8007798:	42a6      	cmp	r6, r4
 800779a:	bf38      	it	cc
 800779c:	2304      	movcc	r3, #4
 800779e:	441d      	add	r5, r3
 80077a0:	4473      	add	r3, lr
 80077a2:	469e      	mov	lr, r3
 80077a4:	462e      	mov	r6, r5
 80077a6:	4566      	cmp	r6, ip
 80077a8:	d30e      	bcc.n	80077c8 <__mdiff+0xec>
 80077aa:	f10c 0203 	add.w	r2, ip, #3
 80077ae:	1b52      	subs	r2, r2, r5
 80077b0:	f022 0203 	bic.w	r2, r2, #3
 80077b4:	3d03      	subs	r5, #3
 80077b6:	45ac      	cmp	ip, r5
 80077b8:	bf38      	it	cc
 80077ba:	2200      	movcc	r2, #0
 80077bc:	441a      	add	r2, r3
 80077be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077c2:	b17b      	cbz	r3, 80077e4 <__mdiff+0x108>
 80077c4:	6107      	str	r7, [r0, #16]
 80077c6:	e7a3      	b.n	8007710 <__mdiff+0x34>
 80077c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80077cc:	fa11 f288 	uxtah	r2, r1, r8
 80077d0:	1414      	asrs	r4, r2, #16
 80077d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077d6:	b292      	uxth	r2, r2
 80077d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077dc:	f84e 2b04 	str.w	r2, [lr], #4
 80077e0:	1421      	asrs	r1, r4, #16
 80077e2:	e7e0      	b.n	80077a6 <__mdiff+0xca>
 80077e4:	3f01      	subs	r7, #1
 80077e6:	e7ea      	b.n	80077be <__mdiff+0xe2>
 80077e8:	08008b3b 	.word	0x08008b3b
 80077ec:	08008b4c 	.word	0x08008b4c

080077f0 <__d2b>:
 80077f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077f4:	4689      	mov	r9, r1
 80077f6:	2101      	movs	r1, #1
 80077f8:	ec57 6b10 	vmov	r6, r7, d0
 80077fc:	4690      	mov	r8, r2
 80077fe:	f7ff fccf 	bl	80071a0 <_Balloc>
 8007802:	4604      	mov	r4, r0
 8007804:	b930      	cbnz	r0, 8007814 <__d2b+0x24>
 8007806:	4602      	mov	r2, r0
 8007808:	4b25      	ldr	r3, [pc, #148]	; (80078a0 <__d2b+0xb0>)
 800780a:	4826      	ldr	r0, [pc, #152]	; (80078a4 <__d2b+0xb4>)
 800780c:	f240 310a 	movw	r1, #778	; 0x30a
 8007810:	f000 faac 	bl	8007d6c <__assert_func>
 8007814:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800781c:	bb35      	cbnz	r5, 800786c <__d2b+0x7c>
 800781e:	2e00      	cmp	r6, #0
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	d028      	beq.n	8007876 <__d2b+0x86>
 8007824:	4668      	mov	r0, sp
 8007826:	9600      	str	r6, [sp, #0]
 8007828:	f7ff fd82 	bl	8007330 <__lo0bits>
 800782c:	9900      	ldr	r1, [sp, #0]
 800782e:	b300      	cbz	r0, 8007872 <__d2b+0x82>
 8007830:	9a01      	ldr	r2, [sp, #4]
 8007832:	f1c0 0320 	rsb	r3, r0, #32
 8007836:	fa02 f303 	lsl.w	r3, r2, r3
 800783a:	430b      	orrs	r3, r1
 800783c:	40c2      	lsrs	r2, r0
 800783e:	6163      	str	r3, [r4, #20]
 8007840:	9201      	str	r2, [sp, #4]
 8007842:	9b01      	ldr	r3, [sp, #4]
 8007844:	61a3      	str	r3, [r4, #24]
 8007846:	2b00      	cmp	r3, #0
 8007848:	bf14      	ite	ne
 800784a:	2202      	movne	r2, #2
 800784c:	2201      	moveq	r2, #1
 800784e:	6122      	str	r2, [r4, #16]
 8007850:	b1d5      	cbz	r5, 8007888 <__d2b+0x98>
 8007852:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007856:	4405      	add	r5, r0
 8007858:	f8c9 5000 	str.w	r5, [r9]
 800785c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007860:	f8c8 0000 	str.w	r0, [r8]
 8007864:	4620      	mov	r0, r4
 8007866:	b003      	add	sp, #12
 8007868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800786c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007870:	e7d5      	b.n	800781e <__d2b+0x2e>
 8007872:	6161      	str	r1, [r4, #20]
 8007874:	e7e5      	b.n	8007842 <__d2b+0x52>
 8007876:	a801      	add	r0, sp, #4
 8007878:	f7ff fd5a 	bl	8007330 <__lo0bits>
 800787c:	9b01      	ldr	r3, [sp, #4]
 800787e:	6163      	str	r3, [r4, #20]
 8007880:	2201      	movs	r2, #1
 8007882:	6122      	str	r2, [r4, #16]
 8007884:	3020      	adds	r0, #32
 8007886:	e7e3      	b.n	8007850 <__d2b+0x60>
 8007888:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800788c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007890:	f8c9 0000 	str.w	r0, [r9]
 8007894:	6918      	ldr	r0, [r3, #16]
 8007896:	f7ff fd2b 	bl	80072f0 <__hi0bits>
 800789a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800789e:	e7df      	b.n	8007860 <__d2b+0x70>
 80078a0:	08008b3b 	.word	0x08008b3b
 80078a4:	08008b4c 	.word	0x08008b4c

080078a8 <_calloc_r>:
 80078a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078aa:	fba1 2402 	umull	r2, r4, r1, r2
 80078ae:	b94c      	cbnz	r4, 80078c4 <_calloc_r+0x1c>
 80078b0:	4611      	mov	r1, r2
 80078b2:	9201      	str	r2, [sp, #4]
 80078b4:	f000 f87a 	bl	80079ac <_malloc_r>
 80078b8:	9a01      	ldr	r2, [sp, #4]
 80078ba:	4605      	mov	r5, r0
 80078bc:	b930      	cbnz	r0, 80078cc <_calloc_r+0x24>
 80078be:	4628      	mov	r0, r5
 80078c0:	b003      	add	sp, #12
 80078c2:	bd30      	pop	{r4, r5, pc}
 80078c4:	220c      	movs	r2, #12
 80078c6:	6002      	str	r2, [r0, #0]
 80078c8:	2500      	movs	r5, #0
 80078ca:	e7f8      	b.n	80078be <_calloc_r+0x16>
 80078cc:	4621      	mov	r1, r4
 80078ce:	f7fe f941 	bl	8005b54 <memset>
 80078d2:	e7f4      	b.n	80078be <_calloc_r+0x16>

080078d4 <_free_r>:
 80078d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078d6:	2900      	cmp	r1, #0
 80078d8:	d044      	beq.n	8007964 <_free_r+0x90>
 80078da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078de:	9001      	str	r0, [sp, #4]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f1a1 0404 	sub.w	r4, r1, #4
 80078e6:	bfb8      	it	lt
 80078e8:	18e4      	addlt	r4, r4, r3
 80078ea:	f000 fa9b 	bl	8007e24 <__malloc_lock>
 80078ee:	4a1e      	ldr	r2, [pc, #120]	; (8007968 <_free_r+0x94>)
 80078f0:	9801      	ldr	r0, [sp, #4]
 80078f2:	6813      	ldr	r3, [r2, #0]
 80078f4:	b933      	cbnz	r3, 8007904 <_free_r+0x30>
 80078f6:	6063      	str	r3, [r4, #4]
 80078f8:	6014      	str	r4, [r2, #0]
 80078fa:	b003      	add	sp, #12
 80078fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007900:	f000 ba96 	b.w	8007e30 <__malloc_unlock>
 8007904:	42a3      	cmp	r3, r4
 8007906:	d908      	bls.n	800791a <_free_r+0x46>
 8007908:	6825      	ldr	r5, [r4, #0]
 800790a:	1961      	adds	r1, r4, r5
 800790c:	428b      	cmp	r3, r1
 800790e:	bf01      	itttt	eq
 8007910:	6819      	ldreq	r1, [r3, #0]
 8007912:	685b      	ldreq	r3, [r3, #4]
 8007914:	1949      	addeq	r1, r1, r5
 8007916:	6021      	streq	r1, [r4, #0]
 8007918:	e7ed      	b.n	80078f6 <_free_r+0x22>
 800791a:	461a      	mov	r2, r3
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	b10b      	cbz	r3, 8007924 <_free_r+0x50>
 8007920:	42a3      	cmp	r3, r4
 8007922:	d9fa      	bls.n	800791a <_free_r+0x46>
 8007924:	6811      	ldr	r1, [r2, #0]
 8007926:	1855      	adds	r5, r2, r1
 8007928:	42a5      	cmp	r5, r4
 800792a:	d10b      	bne.n	8007944 <_free_r+0x70>
 800792c:	6824      	ldr	r4, [r4, #0]
 800792e:	4421      	add	r1, r4
 8007930:	1854      	adds	r4, r2, r1
 8007932:	42a3      	cmp	r3, r4
 8007934:	6011      	str	r1, [r2, #0]
 8007936:	d1e0      	bne.n	80078fa <_free_r+0x26>
 8007938:	681c      	ldr	r4, [r3, #0]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	6053      	str	r3, [r2, #4]
 800793e:	4421      	add	r1, r4
 8007940:	6011      	str	r1, [r2, #0]
 8007942:	e7da      	b.n	80078fa <_free_r+0x26>
 8007944:	d902      	bls.n	800794c <_free_r+0x78>
 8007946:	230c      	movs	r3, #12
 8007948:	6003      	str	r3, [r0, #0]
 800794a:	e7d6      	b.n	80078fa <_free_r+0x26>
 800794c:	6825      	ldr	r5, [r4, #0]
 800794e:	1961      	adds	r1, r4, r5
 8007950:	428b      	cmp	r3, r1
 8007952:	bf04      	itt	eq
 8007954:	6819      	ldreq	r1, [r3, #0]
 8007956:	685b      	ldreq	r3, [r3, #4]
 8007958:	6063      	str	r3, [r4, #4]
 800795a:	bf04      	itt	eq
 800795c:	1949      	addeq	r1, r1, r5
 800795e:	6021      	streq	r1, [r4, #0]
 8007960:	6054      	str	r4, [r2, #4]
 8007962:	e7ca      	b.n	80078fa <_free_r+0x26>
 8007964:	b003      	add	sp, #12
 8007966:	bd30      	pop	{r4, r5, pc}
 8007968:	20017d04 	.word	0x20017d04

0800796c <sbrk_aligned>:
 800796c:	b570      	push	{r4, r5, r6, lr}
 800796e:	4e0e      	ldr	r6, [pc, #56]	; (80079a8 <sbrk_aligned+0x3c>)
 8007970:	460c      	mov	r4, r1
 8007972:	6831      	ldr	r1, [r6, #0]
 8007974:	4605      	mov	r5, r0
 8007976:	b911      	cbnz	r1, 800797e <sbrk_aligned+0x12>
 8007978:	f000 f9e8 	bl	8007d4c <_sbrk_r>
 800797c:	6030      	str	r0, [r6, #0]
 800797e:	4621      	mov	r1, r4
 8007980:	4628      	mov	r0, r5
 8007982:	f000 f9e3 	bl	8007d4c <_sbrk_r>
 8007986:	1c43      	adds	r3, r0, #1
 8007988:	d00a      	beq.n	80079a0 <sbrk_aligned+0x34>
 800798a:	1cc4      	adds	r4, r0, #3
 800798c:	f024 0403 	bic.w	r4, r4, #3
 8007990:	42a0      	cmp	r0, r4
 8007992:	d007      	beq.n	80079a4 <sbrk_aligned+0x38>
 8007994:	1a21      	subs	r1, r4, r0
 8007996:	4628      	mov	r0, r5
 8007998:	f000 f9d8 	bl	8007d4c <_sbrk_r>
 800799c:	3001      	adds	r0, #1
 800799e:	d101      	bne.n	80079a4 <sbrk_aligned+0x38>
 80079a0:	f04f 34ff 	mov.w	r4, #4294967295
 80079a4:	4620      	mov	r0, r4
 80079a6:	bd70      	pop	{r4, r5, r6, pc}
 80079a8:	20017d08 	.word	0x20017d08

080079ac <_malloc_r>:
 80079ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079b0:	1ccd      	adds	r5, r1, #3
 80079b2:	f025 0503 	bic.w	r5, r5, #3
 80079b6:	3508      	adds	r5, #8
 80079b8:	2d0c      	cmp	r5, #12
 80079ba:	bf38      	it	cc
 80079bc:	250c      	movcc	r5, #12
 80079be:	2d00      	cmp	r5, #0
 80079c0:	4607      	mov	r7, r0
 80079c2:	db01      	blt.n	80079c8 <_malloc_r+0x1c>
 80079c4:	42a9      	cmp	r1, r5
 80079c6:	d905      	bls.n	80079d4 <_malloc_r+0x28>
 80079c8:	230c      	movs	r3, #12
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	2600      	movs	r6, #0
 80079ce:	4630      	mov	r0, r6
 80079d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d4:	4e2e      	ldr	r6, [pc, #184]	; (8007a90 <_malloc_r+0xe4>)
 80079d6:	f000 fa25 	bl	8007e24 <__malloc_lock>
 80079da:	6833      	ldr	r3, [r6, #0]
 80079dc:	461c      	mov	r4, r3
 80079de:	bb34      	cbnz	r4, 8007a2e <_malloc_r+0x82>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4638      	mov	r0, r7
 80079e4:	f7ff ffc2 	bl	800796c <sbrk_aligned>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	4604      	mov	r4, r0
 80079ec:	d14d      	bne.n	8007a8a <_malloc_r+0xde>
 80079ee:	6834      	ldr	r4, [r6, #0]
 80079f0:	4626      	mov	r6, r4
 80079f2:	2e00      	cmp	r6, #0
 80079f4:	d140      	bne.n	8007a78 <_malloc_r+0xcc>
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	4631      	mov	r1, r6
 80079fa:	4638      	mov	r0, r7
 80079fc:	eb04 0803 	add.w	r8, r4, r3
 8007a00:	f000 f9a4 	bl	8007d4c <_sbrk_r>
 8007a04:	4580      	cmp	r8, r0
 8007a06:	d13a      	bne.n	8007a7e <_malloc_r+0xd2>
 8007a08:	6821      	ldr	r1, [r4, #0]
 8007a0a:	3503      	adds	r5, #3
 8007a0c:	1a6d      	subs	r5, r5, r1
 8007a0e:	f025 0503 	bic.w	r5, r5, #3
 8007a12:	3508      	adds	r5, #8
 8007a14:	2d0c      	cmp	r5, #12
 8007a16:	bf38      	it	cc
 8007a18:	250c      	movcc	r5, #12
 8007a1a:	4629      	mov	r1, r5
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	f7ff ffa5 	bl	800796c <sbrk_aligned>
 8007a22:	3001      	adds	r0, #1
 8007a24:	d02b      	beq.n	8007a7e <_malloc_r+0xd2>
 8007a26:	6823      	ldr	r3, [r4, #0]
 8007a28:	442b      	add	r3, r5
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	e00e      	b.n	8007a4c <_malloc_r+0xa0>
 8007a2e:	6822      	ldr	r2, [r4, #0]
 8007a30:	1b52      	subs	r2, r2, r5
 8007a32:	d41e      	bmi.n	8007a72 <_malloc_r+0xc6>
 8007a34:	2a0b      	cmp	r2, #11
 8007a36:	d916      	bls.n	8007a66 <_malloc_r+0xba>
 8007a38:	1961      	adds	r1, r4, r5
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	6025      	str	r5, [r4, #0]
 8007a3e:	bf18      	it	ne
 8007a40:	6059      	strne	r1, [r3, #4]
 8007a42:	6863      	ldr	r3, [r4, #4]
 8007a44:	bf08      	it	eq
 8007a46:	6031      	streq	r1, [r6, #0]
 8007a48:	5162      	str	r2, [r4, r5]
 8007a4a:	604b      	str	r3, [r1, #4]
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	f104 060b 	add.w	r6, r4, #11
 8007a52:	f000 f9ed 	bl	8007e30 <__malloc_unlock>
 8007a56:	f026 0607 	bic.w	r6, r6, #7
 8007a5a:	1d23      	adds	r3, r4, #4
 8007a5c:	1af2      	subs	r2, r6, r3
 8007a5e:	d0b6      	beq.n	80079ce <_malloc_r+0x22>
 8007a60:	1b9b      	subs	r3, r3, r6
 8007a62:	50a3      	str	r3, [r4, r2]
 8007a64:	e7b3      	b.n	80079ce <_malloc_r+0x22>
 8007a66:	6862      	ldr	r2, [r4, #4]
 8007a68:	42a3      	cmp	r3, r4
 8007a6a:	bf0c      	ite	eq
 8007a6c:	6032      	streq	r2, [r6, #0]
 8007a6e:	605a      	strne	r2, [r3, #4]
 8007a70:	e7ec      	b.n	8007a4c <_malloc_r+0xa0>
 8007a72:	4623      	mov	r3, r4
 8007a74:	6864      	ldr	r4, [r4, #4]
 8007a76:	e7b2      	b.n	80079de <_malloc_r+0x32>
 8007a78:	4634      	mov	r4, r6
 8007a7a:	6876      	ldr	r6, [r6, #4]
 8007a7c:	e7b9      	b.n	80079f2 <_malloc_r+0x46>
 8007a7e:	230c      	movs	r3, #12
 8007a80:	603b      	str	r3, [r7, #0]
 8007a82:	4638      	mov	r0, r7
 8007a84:	f000 f9d4 	bl	8007e30 <__malloc_unlock>
 8007a88:	e7a1      	b.n	80079ce <_malloc_r+0x22>
 8007a8a:	6025      	str	r5, [r4, #0]
 8007a8c:	e7de      	b.n	8007a4c <_malloc_r+0xa0>
 8007a8e:	bf00      	nop
 8007a90:	20017d04 	.word	0x20017d04

08007a94 <__ssputs_r>:
 8007a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a98:	688e      	ldr	r6, [r1, #8]
 8007a9a:	429e      	cmp	r6, r3
 8007a9c:	4682      	mov	sl, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	4690      	mov	r8, r2
 8007aa2:	461f      	mov	r7, r3
 8007aa4:	d838      	bhi.n	8007b18 <__ssputs_r+0x84>
 8007aa6:	898a      	ldrh	r2, [r1, #12]
 8007aa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007aac:	d032      	beq.n	8007b14 <__ssputs_r+0x80>
 8007aae:	6825      	ldr	r5, [r4, #0]
 8007ab0:	6909      	ldr	r1, [r1, #16]
 8007ab2:	eba5 0901 	sub.w	r9, r5, r1
 8007ab6:	6965      	ldr	r5, [r4, #20]
 8007ab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007abc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	444b      	add	r3, r9
 8007ac4:	106d      	asrs	r5, r5, #1
 8007ac6:	429d      	cmp	r5, r3
 8007ac8:	bf38      	it	cc
 8007aca:	461d      	movcc	r5, r3
 8007acc:	0553      	lsls	r3, r2, #21
 8007ace:	d531      	bpl.n	8007b34 <__ssputs_r+0xa0>
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7ff ff6b 	bl	80079ac <_malloc_r>
 8007ad6:	4606      	mov	r6, r0
 8007ad8:	b950      	cbnz	r0, 8007af0 <__ssputs_r+0x5c>
 8007ada:	230c      	movs	r3, #12
 8007adc:	f8ca 3000 	str.w	r3, [sl]
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae6:	81a3      	strh	r3, [r4, #12]
 8007ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8007aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007af0:	6921      	ldr	r1, [r4, #16]
 8007af2:	464a      	mov	r2, r9
 8007af4:	f7ff fb46 	bl	8007184 <memcpy>
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b02:	81a3      	strh	r3, [r4, #12]
 8007b04:	6126      	str	r6, [r4, #16]
 8007b06:	6165      	str	r5, [r4, #20]
 8007b08:	444e      	add	r6, r9
 8007b0a:	eba5 0509 	sub.w	r5, r5, r9
 8007b0e:	6026      	str	r6, [r4, #0]
 8007b10:	60a5      	str	r5, [r4, #8]
 8007b12:	463e      	mov	r6, r7
 8007b14:	42be      	cmp	r6, r7
 8007b16:	d900      	bls.n	8007b1a <__ssputs_r+0x86>
 8007b18:	463e      	mov	r6, r7
 8007b1a:	6820      	ldr	r0, [r4, #0]
 8007b1c:	4632      	mov	r2, r6
 8007b1e:	4641      	mov	r1, r8
 8007b20:	f000 f966 	bl	8007df0 <memmove>
 8007b24:	68a3      	ldr	r3, [r4, #8]
 8007b26:	1b9b      	subs	r3, r3, r6
 8007b28:	60a3      	str	r3, [r4, #8]
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	4433      	add	r3, r6
 8007b2e:	6023      	str	r3, [r4, #0]
 8007b30:	2000      	movs	r0, #0
 8007b32:	e7db      	b.n	8007aec <__ssputs_r+0x58>
 8007b34:	462a      	mov	r2, r5
 8007b36:	f000 f981 	bl	8007e3c <_realloc_r>
 8007b3a:	4606      	mov	r6, r0
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	d1e1      	bne.n	8007b04 <__ssputs_r+0x70>
 8007b40:	6921      	ldr	r1, [r4, #16]
 8007b42:	4650      	mov	r0, sl
 8007b44:	f7ff fec6 	bl	80078d4 <_free_r>
 8007b48:	e7c7      	b.n	8007ada <__ssputs_r+0x46>
	...

08007b4c <_svfiprintf_r>:
 8007b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b50:	4698      	mov	r8, r3
 8007b52:	898b      	ldrh	r3, [r1, #12]
 8007b54:	061b      	lsls	r3, r3, #24
 8007b56:	b09d      	sub	sp, #116	; 0x74
 8007b58:	4607      	mov	r7, r0
 8007b5a:	460d      	mov	r5, r1
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	d50e      	bpl.n	8007b7e <_svfiprintf_r+0x32>
 8007b60:	690b      	ldr	r3, [r1, #16]
 8007b62:	b963      	cbnz	r3, 8007b7e <_svfiprintf_r+0x32>
 8007b64:	2140      	movs	r1, #64	; 0x40
 8007b66:	f7ff ff21 	bl	80079ac <_malloc_r>
 8007b6a:	6028      	str	r0, [r5, #0]
 8007b6c:	6128      	str	r0, [r5, #16]
 8007b6e:	b920      	cbnz	r0, 8007b7a <_svfiprintf_r+0x2e>
 8007b70:	230c      	movs	r3, #12
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	f04f 30ff 	mov.w	r0, #4294967295
 8007b78:	e0d1      	b.n	8007d1e <_svfiprintf_r+0x1d2>
 8007b7a:	2340      	movs	r3, #64	; 0x40
 8007b7c:	616b      	str	r3, [r5, #20]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9309      	str	r3, [sp, #36]	; 0x24
 8007b82:	2320      	movs	r3, #32
 8007b84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b88:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b8c:	2330      	movs	r3, #48	; 0x30
 8007b8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d38 <_svfiprintf_r+0x1ec>
 8007b92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b96:	f04f 0901 	mov.w	r9, #1
 8007b9a:	4623      	mov	r3, r4
 8007b9c:	469a      	mov	sl, r3
 8007b9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ba2:	b10a      	cbz	r2, 8007ba8 <_svfiprintf_r+0x5c>
 8007ba4:	2a25      	cmp	r2, #37	; 0x25
 8007ba6:	d1f9      	bne.n	8007b9c <_svfiprintf_r+0x50>
 8007ba8:	ebba 0b04 	subs.w	fp, sl, r4
 8007bac:	d00b      	beq.n	8007bc6 <_svfiprintf_r+0x7a>
 8007bae:	465b      	mov	r3, fp
 8007bb0:	4622      	mov	r2, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	4638      	mov	r0, r7
 8007bb6:	f7ff ff6d 	bl	8007a94 <__ssputs_r>
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f000 80aa 	beq.w	8007d14 <_svfiprintf_r+0x1c8>
 8007bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bc2:	445a      	add	r2, fp
 8007bc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007bc6:	f89a 3000 	ldrb.w	r3, [sl]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	f000 80a2 	beq.w	8007d14 <_svfiprintf_r+0x1c8>
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bda:	f10a 0a01 	add.w	sl, sl, #1
 8007bde:	9304      	str	r3, [sp, #16]
 8007be0:	9307      	str	r3, [sp, #28]
 8007be2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007be6:	931a      	str	r3, [sp, #104]	; 0x68
 8007be8:	4654      	mov	r4, sl
 8007bea:	2205      	movs	r2, #5
 8007bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bf0:	4851      	ldr	r0, [pc, #324]	; (8007d38 <_svfiprintf_r+0x1ec>)
 8007bf2:	f7f8 fb0d 	bl	8000210 <memchr>
 8007bf6:	9a04      	ldr	r2, [sp, #16]
 8007bf8:	b9d8      	cbnz	r0, 8007c32 <_svfiprintf_r+0xe6>
 8007bfa:	06d0      	lsls	r0, r2, #27
 8007bfc:	bf44      	itt	mi
 8007bfe:	2320      	movmi	r3, #32
 8007c00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c04:	0711      	lsls	r1, r2, #28
 8007c06:	bf44      	itt	mi
 8007c08:	232b      	movmi	r3, #43	; 0x2b
 8007c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8007c12:	2b2a      	cmp	r3, #42	; 0x2a
 8007c14:	d015      	beq.n	8007c42 <_svfiprintf_r+0xf6>
 8007c16:	9a07      	ldr	r2, [sp, #28]
 8007c18:	4654      	mov	r4, sl
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	f04f 0c0a 	mov.w	ip, #10
 8007c20:	4621      	mov	r1, r4
 8007c22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c26:	3b30      	subs	r3, #48	; 0x30
 8007c28:	2b09      	cmp	r3, #9
 8007c2a:	d94e      	bls.n	8007cca <_svfiprintf_r+0x17e>
 8007c2c:	b1b0      	cbz	r0, 8007c5c <_svfiprintf_r+0x110>
 8007c2e:	9207      	str	r2, [sp, #28]
 8007c30:	e014      	b.n	8007c5c <_svfiprintf_r+0x110>
 8007c32:	eba0 0308 	sub.w	r3, r0, r8
 8007c36:	fa09 f303 	lsl.w	r3, r9, r3
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	9304      	str	r3, [sp, #16]
 8007c3e:	46a2      	mov	sl, r4
 8007c40:	e7d2      	b.n	8007be8 <_svfiprintf_r+0x9c>
 8007c42:	9b03      	ldr	r3, [sp, #12]
 8007c44:	1d19      	adds	r1, r3, #4
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	9103      	str	r1, [sp, #12]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bfbb      	ittet	lt
 8007c4e:	425b      	neglt	r3, r3
 8007c50:	f042 0202 	orrlt.w	r2, r2, #2
 8007c54:	9307      	strge	r3, [sp, #28]
 8007c56:	9307      	strlt	r3, [sp, #28]
 8007c58:	bfb8      	it	lt
 8007c5a:	9204      	strlt	r2, [sp, #16]
 8007c5c:	7823      	ldrb	r3, [r4, #0]
 8007c5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007c60:	d10c      	bne.n	8007c7c <_svfiprintf_r+0x130>
 8007c62:	7863      	ldrb	r3, [r4, #1]
 8007c64:	2b2a      	cmp	r3, #42	; 0x2a
 8007c66:	d135      	bne.n	8007cd4 <_svfiprintf_r+0x188>
 8007c68:	9b03      	ldr	r3, [sp, #12]
 8007c6a:	1d1a      	adds	r2, r3, #4
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	9203      	str	r2, [sp, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bfb8      	it	lt
 8007c74:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c78:	3402      	adds	r4, #2
 8007c7a:	9305      	str	r3, [sp, #20]
 8007c7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d48 <_svfiprintf_r+0x1fc>
 8007c80:	7821      	ldrb	r1, [r4, #0]
 8007c82:	2203      	movs	r2, #3
 8007c84:	4650      	mov	r0, sl
 8007c86:	f7f8 fac3 	bl	8000210 <memchr>
 8007c8a:	b140      	cbz	r0, 8007c9e <_svfiprintf_r+0x152>
 8007c8c:	2340      	movs	r3, #64	; 0x40
 8007c8e:	eba0 000a 	sub.w	r0, r0, sl
 8007c92:	fa03 f000 	lsl.w	r0, r3, r0
 8007c96:	9b04      	ldr	r3, [sp, #16]
 8007c98:	4303      	orrs	r3, r0
 8007c9a:	3401      	adds	r4, #1
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca2:	4826      	ldr	r0, [pc, #152]	; (8007d3c <_svfiprintf_r+0x1f0>)
 8007ca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ca8:	2206      	movs	r2, #6
 8007caa:	f7f8 fab1 	bl	8000210 <memchr>
 8007cae:	2800      	cmp	r0, #0
 8007cb0:	d038      	beq.n	8007d24 <_svfiprintf_r+0x1d8>
 8007cb2:	4b23      	ldr	r3, [pc, #140]	; (8007d40 <_svfiprintf_r+0x1f4>)
 8007cb4:	bb1b      	cbnz	r3, 8007cfe <_svfiprintf_r+0x1b2>
 8007cb6:	9b03      	ldr	r3, [sp, #12]
 8007cb8:	3307      	adds	r3, #7
 8007cba:	f023 0307 	bic.w	r3, r3, #7
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cc4:	4433      	add	r3, r6
 8007cc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc8:	e767      	b.n	8007b9a <_svfiprintf_r+0x4e>
 8007cca:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cce:	460c      	mov	r4, r1
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	e7a5      	b.n	8007c20 <_svfiprintf_r+0xd4>
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	3401      	adds	r4, #1
 8007cd8:	9305      	str	r3, [sp, #20]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	f04f 0c0a 	mov.w	ip, #10
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ce6:	3a30      	subs	r2, #48	; 0x30
 8007ce8:	2a09      	cmp	r2, #9
 8007cea:	d903      	bls.n	8007cf4 <_svfiprintf_r+0x1a8>
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d0c5      	beq.n	8007c7c <_svfiprintf_r+0x130>
 8007cf0:	9105      	str	r1, [sp, #20]
 8007cf2:	e7c3      	b.n	8007c7c <_svfiprintf_r+0x130>
 8007cf4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e7f0      	b.n	8007ce0 <_svfiprintf_r+0x194>
 8007cfe:	ab03      	add	r3, sp, #12
 8007d00:	9300      	str	r3, [sp, #0]
 8007d02:	462a      	mov	r2, r5
 8007d04:	4b0f      	ldr	r3, [pc, #60]	; (8007d44 <_svfiprintf_r+0x1f8>)
 8007d06:	a904      	add	r1, sp, #16
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7fd ffcb 	bl	8005ca4 <_printf_float>
 8007d0e:	1c42      	adds	r2, r0, #1
 8007d10:	4606      	mov	r6, r0
 8007d12:	d1d6      	bne.n	8007cc2 <_svfiprintf_r+0x176>
 8007d14:	89ab      	ldrh	r3, [r5, #12]
 8007d16:	065b      	lsls	r3, r3, #25
 8007d18:	f53f af2c 	bmi.w	8007b74 <_svfiprintf_r+0x28>
 8007d1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d1e:	b01d      	add	sp, #116	; 0x74
 8007d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d24:	ab03      	add	r3, sp, #12
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	462a      	mov	r2, r5
 8007d2a:	4b06      	ldr	r3, [pc, #24]	; (8007d44 <_svfiprintf_r+0x1f8>)
 8007d2c:	a904      	add	r1, sp, #16
 8007d2e:	4638      	mov	r0, r7
 8007d30:	f7fe fa5c 	bl	80061ec <_printf_i>
 8007d34:	e7eb      	b.n	8007d0e <_svfiprintf_r+0x1c2>
 8007d36:	bf00      	nop
 8007d38:	08008ca4 	.word	0x08008ca4
 8007d3c:	08008cae 	.word	0x08008cae
 8007d40:	08005ca5 	.word	0x08005ca5
 8007d44:	08007a95 	.word	0x08007a95
 8007d48:	08008caa 	.word	0x08008caa

08007d4c <_sbrk_r>:
 8007d4c:	b538      	push	{r3, r4, r5, lr}
 8007d4e:	4d06      	ldr	r5, [pc, #24]	; (8007d68 <_sbrk_r+0x1c>)
 8007d50:	2300      	movs	r3, #0
 8007d52:	4604      	mov	r4, r0
 8007d54:	4608      	mov	r0, r1
 8007d56:	602b      	str	r3, [r5, #0]
 8007d58:	f7f9 febc 	bl	8001ad4 <_sbrk>
 8007d5c:	1c43      	adds	r3, r0, #1
 8007d5e:	d102      	bne.n	8007d66 <_sbrk_r+0x1a>
 8007d60:	682b      	ldr	r3, [r5, #0]
 8007d62:	b103      	cbz	r3, 8007d66 <_sbrk_r+0x1a>
 8007d64:	6023      	str	r3, [r4, #0]
 8007d66:	bd38      	pop	{r3, r4, r5, pc}
 8007d68:	20017d0c 	.word	0x20017d0c

08007d6c <__assert_func>:
 8007d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d6e:	4614      	mov	r4, r2
 8007d70:	461a      	mov	r2, r3
 8007d72:	4b09      	ldr	r3, [pc, #36]	; (8007d98 <__assert_func+0x2c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4605      	mov	r5, r0
 8007d78:	68d8      	ldr	r0, [r3, #12]
 8007d7a:	b14c      	cbz	r4, 8007d90 <__assert_func+0x24>
 8007d7c:	4b07      	ldr	r3, [pc, #28]	; (8007d9c <__assert_func+0x30>)
 8007d7e:	9100      	str	r1, [sp, #0]
 8007d80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007d84:	4906      	ldr	r1, [pc, #24]	; (8007da0 <__assert_func+0x34>)
 8007d86:	462b      	mov	r3, r5
 8007d88:	f000 f80e 	bl	8007da8 <fiprintf>
 8007d8c:	f000 faac 	bl	80082e8 <abort>
 8007d90:	4b04      	ldr	r3, [pc, #16]	; (8007da4 <__assert_func+0x38>)
 8007d92:	461c      	mov	r4, r3
 8007d94:	e7f3      	b.n	8007d7e <__assert_func+0x12>
 8007d96:	bf00      	nop
 8007d98:	2000000c 	.word	0x2000000c
 8007d9c:	08008cb5 	.word	0x08008cb5
 8007da0:	08008cc2 	.word	0x08008cc2
 8007da4:	08008cf0 	.word	0x08008cf0

08007da8 <fiprintf>:
 8007da8:	b40e      	push	{r1, r2, r3}
 8007daa:	b503      	push	{r0, r1, lr}
 8007dac:	4601      	mov	r1, r0
 8007dae:	ab03      	add	r3, sp, #12
 8007db0:	4805      	ldr	r0, [pc, #20]	; (8007dc8 <fiprintf+0x20>)
 8007db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007db6:	6800      	ldr	r0, [r0, #0]
 8007db8:	9301      	str	r3, [sp, #4]
 8007dba:	f000 f897 	bl	8007eec <_vfiprintf_r>
 8007dbe:	b002      	add	sp, #8
 8007dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007dc4:	b003      	add	sp, #12
 8007dc6:	4770      	bx	lr
 8007dc8:	2000000c 	.word	0x2000000c

08007dcc <__ascii_mbtowc>:
 8007dcc:	b082      	sub	sp, #8
 8007dce:	b901      	cbnz	r1, 8007dd2 <__ascii_mbtowc+0x6>
 8007dd0:	a901      	add	r1, sp, #4
 8007dd2:	b142      	cbz	r2, 8007de6 <__ascii_mbtowc+0x1a>
 8007dd4:	b14b      	cbz	r3, 8007dea <__ascii_mbtowc+0x1e>
 8007dd6:	7813      	ldrb	r3, [r2, #0]
 8007dd8:	600b      	str	r3, [r1, #0]
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	1e10      	subs	r0, r2, #0
 8007dde:	bf18      	it	ne
 8007de0:	2001      	movne	r0, #1
 8007de2:	b002      	add	sp, #8
 8007de4:	4770      	bx	lr
 8007de6:	4610      	mov	r0, r2
 8007de8:	e7fb      	b.n	8007de2 <__ascii_mbtowc+0x16>
 8007dea:	f06f 0001 	mvn.w	r0, #1
 8007dee:	e7f8      	b.n	8007de2 <__ascii_mbtowc+0x16>

08007df0 <memmove>:
 8007df0:	4288      	cmp	r0, r1
 8007df2:	b510      	push	{r4, lr}
 8007df4:	eb01 0402 	add.w	r4, r1, r2
 8007df8:	d902      	bls.n	8007e00 <memmove+0x10>
 8007dfa:	4284      	cmp	r4, r0
 8007dfc:	4623      	mov	r3, r4
 8007dfe:	d807      	bhi.n	8007e10 <memmove+0x20>
 8007e00:	1e43      	subs	r3, r0, #1
 8007e02:	42a1      	cmp	r1, r4
 8007e04:	d008      	beq.n	8007e18 <memmove+0x28>
 8007e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007e0e:	e7f8      	b.n	8007e02 <memmove+0x12>
 8007e10:	4402      	add	r2, r0
 8007e12:	4601      	mov	r1, r0
 8007e14:	428a      	cmp	r2, r1
 8007e16:	d100      	bne.n	8007e1a <memmove+0x2a>
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007e22:	e7f7      	b.n	8007e14 <memmove+0x24>

08007e24 <__malloc_lock>:
 8007e24:	4801      	ldr	r0, [pc, #4]	; (8007e2c <__malloc_lock+0x8>)
 8007e26:	f000 bc1f 	b.w	8008668 <__retarget_lock_acquire_recursive>
 8007e2a:	bf00      	nop
 8007e2c:	20017d10 	.word	0x20017d10

08007e30 <__malloc_unlock>:
 8007e30:	4801      	ldr	r0, [pc, #4]	; (8007e38 <__malloc_unlock+0x8>)
 8007e32:	f000 bc1a 	b.w	800866a <__retarget_lock_release_recursive>
 8007e36:	bf00      	nop
 8007e38:	20017d10 	.word	0x20017d10

08007e3c <_realloc_r>:
 8007e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e40:	4680      	mov	r8, r0
 8007e42:	4614      	mov	r4, r2
 8007e44:	460e      	mov	r6, r1
 8007e46:	b921      	cbnz	r1, 8007e52 <_realloc_r+0x16>
 8007e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e4c:	4611      	mov	r1, r2
 8007e4e:	f7ff bdad 	b.w	80079ac <_malloc_r>
 8007e52:	b92a      	cbnz	r2, 8007e60 <_realloc_r+0x24>
 8007e54:	f7ff fd3e 	bl	80078d4 <_free_r>
 8007e58:	4625      	mov	r5, r4
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e60:	f000 fc6a 	bl	8008738 <_malloc_usable_size_r>
 8007e64:	4284      	cmp	r4, r0
 8007e66:	4607      	mov	r7, r0
 8007e68:	d802      	bhi.n	8007e70 <_realloc_r+0x34>
 8007e6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007e6e:	d812      	bhi.n	8007e96 <_realloc_r+0x5a>
 8007e70:	4621      	mov	r1, r4
 8007e72:	4640      	mov	r0, r8
 8007e74:	f7ff fd9a 	bl	80079ac <_malloc_r>
 8007e78:	4605      	mov	r5, r0
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	d0ed      	beq.n	8007e5a <_realloc_r+0x1e>
 8007e7e:	42bc      	cmp	r4, r7
 8007e80:	4622      	mov	r2, r4
 8007e82:	4631      	mov	r1, r6
 8007e84:	bf28      	it	cs
 8007e86:	463a      	movcs	r2, r7
 8007e88:	f7ff f97c 	bl	8007184 <memcpy>
 8007e8c:	4631      	mov	r1, r6
 8007e8e:	4640      	mov	r0, r8
 8007e90:	f7ff fd20 	bl	80078d4 <_free_r>
 8007e94:	e7e1      	b.n	8007e5a <_realloc_r+0x1e>
 8007e96:	4635      	mov	r5, r6
 8007e98:	e7df      	b.n	8007e5a <_realloc_r+0x1e>

08007e9a <__sfputc_r>:
 8007e9a:	6893      	ldr	r3, [r2, #8]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	b410      	push	{r4}
 8007ea2:	6093      	str	r3, [r2, #8]
 8007ea4:	da08      	bge.n	8007eb8 <__sfputc_r+0x1e>
 8007ea6:	6994      	ldr	r4, [r2, #24]
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	db01      	blt.n	8007eb0 <__sfputc_r+0x16>
 8007eac:	290a      	cmp	r1, #10
 8007eae:	d103      	bne.n	8007eb8 <__sfputc_r+0x1e>
 8007eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007eb4:	f000 b94a 	b.w	800814c <__swbuf_r>
 8007eb8:	6813      	ldr	r3, [r2, #0]
 8007eba:	1c58      	adds	r0, r3, #1
 8007ebc:	6010      	str	r0, [r2, #0]
 8007ebe:	7019      	strb	r1, [r3, #0]
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <__sfputs_r>:
 8007ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460f      	mov	r7, r1
 8007ece:	4614      	mov	r4, r2
 8007ed0:	18d5      	adds	r5, r2, r3
 8007ed2:	42ac      	cmp	r4, r5
 8007ed4:	d101      	bne.n	8007eda <__sfputs_r+0x12>
 8007ed6:	2000      	movs	r0, #0
 8007ed8:	e007      	b.n	8007eea <__sfputs_r+0x22>
 8007eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ede:	463a      	mov	r2, r7
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7ff ffda 	bl	8007e9a <__sfputc_r>
 8007ee6:	1c43      	adds	r3, r0, #1
 8007ee8:	d1f3      	bne.n	8007ed2 <__sfputs_r+0xa>
 8007eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007eec <_vfiprintf_r>:
 8007eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ef0:	460d      	mov	r5, r1
 8007ef2:	b09d      	sub	sp, #116	; 0x74
 8007ef4:	4614      	mov	r4, r2
 8007ef6:	4698      	mov	r8, r3
 8007ef8:	4606      	mov	r6, r0
 8007efa:	b118      	cbz	r0, 8007f04 <_vfiprintf_r+0x18>
 8007efc:	6983      	ldr	r3, [r0, #24]
 8007efe:	b90b      	cbnz	r3, 8007f04 <_vfiprintf_r+0x18>
 8007f00:	f000 fb14 	bl	800852c <__sinit>
 8007f04:	4b89      	ldr	r3, [pc, #548]	; (800812c <_vfiprintf_r+0x240>)
 8007f06:	429d      	cmp	r5, r3
 8007f08:	d11b      	bne.n	8007f42 <_vfiprintf_r+0x56>
 8007f0a:	6875      	ldr	r5, [r6, #4]
 8007f0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f0e:	07d9      	lsls	r1, r3, #31
 8007f10:	d405      	bmi.n	8007f1e <_vfiprintf_r+0x32>
 8007f12:	89ab      	ldrh	r3, [r5, #12]
 8007f14:	059a      	lsls	r2, r3, #22
 8007f16:	d402      	bmi.n	8007f1e <_vfiprintf_r+0x32>
 8007f18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f1a:	f000 fba5 	bl	8008668 <__retarget_lock_acquire_recursive>
 8007f1e:	89ab      	ldrh	r3, [r5, #12]
 8007f20:	071b      	lsls	r3, r3, #28
 8007f22:	d501      	bpl.n	8007f28 <_vfiprintf_r+0x3c>
 8007f24:	692b      	ldr	r3, [r5, #16]
 8007f26:	b9eb      	cbnz	r3, 8007f64 <_vfiprintf_r+0x78>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f000 f96e 	bl	800820c <__swsetup_r>
 8007f30:	b1c0      	cbz	r0, 8007f64 <_vfiprintf_r+0x78>
 8007f32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f34:	07dc      	lsls	r4, r3, #31
 8007f36:	d50e      	bpl.n	8007f56 <_vfiprintf_r+0x6a>
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	b01d      	add	sp, #116	; 0x74
 8007f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f42:	4b7b      	ldr	r3, [pc, #492]	; (8008130 <_vfiprintf_r+0x244>)
 8007f44:	429d      	cmp	r5, r3
 8007f46:	d101      	bne.n	8007f4c <_vfiprintf_r+0x60>
 8007f48:	68b5      	ldr	r5, [r6, #8]
 8007f4a:	e7df      	b.n	8007f0c <_vfiprintf_r+0x20>
 8007f4c:	4b79      	ldr	r3, [pc, #484]	; (8008134 <_vfiprintf_r+0x248>)
 8007f4e:	429d      	cmp	r5, r3
 8007f50:	bf08      	it	eq
 8007f52:	68f5      	ldreq	r5, [r6, #12]
 8007f54:	e7da      	b.n	8007f0c <_vfiprintf_r+0x20>
 8007f56:	89ab      	ldrh	r3, [r5, #12]
 8007f58:	0598      	lsls	r0, r3, #22
 8007f5a:	d4ed      	bmi.n	8007f38 <_vfiprintf_r+0x4c>
 8007f5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f5e:	f000 fb84 	bl	800866a <__retarget_lock_release_recursive>
 8007f62:	e7e9      	b.n	8007f38 <_vfiprintf_r+0x4c>
 8007f64:	2300      	movs	r3, #0
 8007f66:	9309      	str	r3, [sp, #36]	; 0x24
 8007f68:	2320      	movs	r3, #32
 8007f6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f72:	2330      	movs	r3, #48	; 0x30
 8007f74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008138 <_vfiprintf_r+0x24c>
 8007f78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f7c:	f04f 0901 	mov.w	r9, #1
 8007f80:	4623      	mov	r3, r4
 8007f82:	469a      	mov	sl, r3
 8007f84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f88:	b10a      	cbz	r2, 8007f8e <_vfiprintf_r+0xa2>
 8007f8a:	2a25      	cmp	r2, #37	; 0x25
 8007f8c:	d1f9      	bne.n	8007f82 <_vfiprintf_r+0x96>
 8007f8e:	ebba 0b04 	subs.w	fp, sl, r4
 8007f92:	d00b      	beq.n	8007fac <_vfiprintf_r+0xc0>
 8007f94:	465b      	mov	r3, fp
 8007f96:	4622      	mov	r2, r4
 8007f98:	4629      	mov	r1, r5
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7ff ff94 	bl	8007ec8 <__sfputs_r>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	f000 80aa 	beq.w	80080fa <_vfiprintf_r+0x20e>
 8007fa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007fa8:	445a      	add	r2, fp
 8007faa:	9209      	str	r2, [sp, #36]	; 0x24
 8007fac:	f89a 3000 	ldrb.w	r3, [sl]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	f000 80a2 	beq.w	80080fa <_vfiprintf_r+0x20e>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fbc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fc0:	f10a 0a01 	add.w	sl, sl, #1
 8007fc4:	9304      	str	r3, [sp, #16]
 8007fc6:	9307      	str	r3, [sp, #28]
 8007fc8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007fcc:	931a      	str	r3, [sp, #104]	; 0x68
 8007fce:	4654      	mov	r4, sl
 8007fd0:	2205      	movs	r2, #5
 8007fd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fd6:	4858      	ldr	r0, [pc, #352]	; (8008138 <_vfiprintf_r+0x24c>)
 8007fd8:	f7f8 f91a 	bl	8000210 <memchr>
 8007fdc:	9a04      	ldr	r2, [sp, #16]
 8007fde:	b9d8      	cbnz	r0, 8008018 <_vfiprintf_r+0x12c>
 8007fe0:	06d1      	lsls	r1, r2, #27
 8007fe2:	bf44      	itt	mi
 8007fe4:	2320      	movmi	r3, #32
 8007fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fea:	0713      	lsls	r3, r2, #28
 8007fec:	bf44      	itt	mi
 8007fee:	232b      	movmi	r3, #43	; 0x2b
 8007ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff8:	2b2a      	cmp	r3, #42	; 0x2a
 8007ffa:	d015      	beq.n	8008028 <_vfiprintf_r+0x13c>
 8007ffc:	9a07      	ldr	r2, [sp, #28]
 8007ffe:	4654      	mov	r4, sl
 8008000:	2000      	movs	r0, #0
 8008002:	f04f 0c0a 	mov.w	ip, #10
 8008006:	4621      	mov	r1, r4
 8008008:	f811 3b01 	ldrb.w	r3, [r1], #1
 800800c:	3b30      	subs	r3, #48	; 0x30
 800800e:	2b09      	cmp	r3, #9
 8008010:	d94e      	bls.n	80080b0 <_vfiprintf_r+0x1c4>
 8008012:	b1b0      	cbz	r0, 8008042 <_vfiprintf_r+0x156>
 8008014:	9207      	str	r2, [sp, #28]
 8008016:	e014      	b.n	8008042 <_vfiprintf_r+0x156>
 8008018:	eba0 0308 	sub.w	r3, r0, r8
 800801c:	fa09 f303 	lsl.w	r3, r9, r3
 8008020:	4313      	orrs	r3, r2
 8008022:	9304      	str	r3, [sp, #16]
 8008024:	46a2      	mov	sl, r4
 8008026:	e7d2      	b.n	8007fce <_vfiprintf_r+0xe2>
 8008028:	9b03      	ldr	r3, [sp, #12]
 800802a:	1d19      	adds	r1, r3, #4
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	9103      	str	r1, [sp, #12]
 8008030:	2b00      	cmp	r3, #0
 8008032:	bfbb      	ittet	lt
 8008034:	425b      	neglt	r3, r3
 8008036:	f042 0202 	orrlt.w	r2, r2, #2
 800803a:	9307      	strge	r3, [sp, #28]
 800803c:	9307      	strlt	r3, [sp, #28]
 800803e:	bfb8      	it	lt
 8008040:	9204      	strlt	r2, [sp, #16]
 8008042:	7823      	ldrb	r3, [r4, #0]
 8008044:	2b2e      	cmp	r3, #46	; 0x2e
 8008046:	d10c      	bne.n	8008062 <_vfiprintf_r+0x176>
 8008048:	7863      	ldrb	r3, [r4, #1]
 800804a:	2b2a      	cmp	r3, #42	; 0x2a
 800804c:	d135      	bne.n	80080ba <_vfiprintf_r+0x1ce>
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	1d1a      	adds	r2, r3, #4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	9203      	str	r2, [sp, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	bfb8      	it	lt
 800805a:	f04f 33ff 	movlt.w	r3, #4294967295
 800805e:	3402      	adds	r4, #2
 8008060:	9305      	str	r3, [sp, #20]
 8008062:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008148 <_vfiprintf_r+0x25c>
 8008066:	7821      	ldrb	r1, [r4, #0]
 8008068:	2203      	movs	r2, #3
 800806a:	4650      	mov	r0, sl
 800806c:	f7f8 f8d0 	bl	8000210 <memchr>
 8008070:	b140      	cbz	r0, 8008084 <_vfiprintf_r+0x198>
 8008072:	2340      	movs	r3, #64	; 0x40
 8008074:	eba0 000a 	sub.w	r0, r0, sl
 8008078:	fa03 f000 	lsl.w	r0, r3, r0
 800807c:	9b04      	ldr	r3, [sp, #16]
 800807e:	4303      	orrs	r3, r0
 8008080:	3401      	adds	r4, #1
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008088:	482c      	ldr	r0, [pc, #176]	; (800813c <_vfiprintf_r+0x250>)
 800808a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800808e:	2206      	movs	r2, #6
 8008090:	f7f8 f8be 	bl	8000210 <memchr>
 8008094:	2800      	cmp	r0, #0
 8008096:	d03f      	beq.n	8008118 <_vfiprintf_r+0x22c>
 8008098:	4b29      	ldr	r3, [pc, #164]	; (8008140 <_vfiprintf_r+0x254>)
 800809a:	bb1b      	cbnz	r3, 80080e4 <_vfiprintf_r+0x1f8>
 800809c:	9b03      	ldr	r3, [sp, #12]
 800809e:	3307      	adds	r3, #7
 80080a0:	f023 0307 	bic.w	r3, r3, #7
 80080a4:	3308      	adds	r3, #8
 80080a6:	9303      	str	r3, [sp, #12]
 80080a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080aa:	443b      	add	r3, r7
 80080ac:	9309      	str	r3, [sp, #36]	; 0x24
 80080ae:	e767      	b.n	8007f80 <_vfiprintf_r+0x94>
 80080b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80080b4:	460c      	mov	r4, r1
 80080b6:	2001      	movs	r0, #1
 80080b8:	e7a5      	b.n	8008006 <_vfiprintf_r+0x11a>
 80080ba:	2300      	movs	r3, #0
 80080bc:	3401      	adds	r4, #1
 80080be:	9305      	str	r3, [sp, #20]
 80080c0:	4619      	mov	r1, r3
 80080c2:	f04f 0c0a 	mov.w	ip, #10
 80080c6:	4620      	mov	r0, r4
 80080c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080cc:	3a30      	subs	r2, #48	; 0x30
 80080ce:	2a09      	cmp	r2, #9
 80080d0:	d903      	bls.n	80080da <_vfiprintf_r+0x1ee>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0c5      	beq.n	8008062 <_vfiprintf_r+0x176>
 80080d6:	9105      	str	r1, [sp, #20]
 80080d8:	e7c3      	b.n	8008062 <_vfiprintf_r+0x176>
 80080da:	fb0c 2101 	mla	r1, ip, r1, r2
 80080de:	4604      	mov	r4, r0
 80080e0:	2301      	movs	r3, #1
 80080e2:	e7f0      	b.n	80080c6 <_vfiprintf_r+0x1da>
 80080e4:	ab03      	add	r3, sp, #12
 80080e6:	9300      	str	r3, [sp, #0]
 80080e8:	462a      	mov	r2, r5
 80080ea:	4b16      	ldr	r3, [pc, #88]	; (8008144 <_vfiprintf_r+0x258>)
 80080ec:	a904      	add	r1, sp, #16
 80080ee:	4630      	mov	r0, r6
 80080f0:	f7fd fdd8 	bl	8005ca4 <_printf_float>
 80080f4:	4607      	mov	r7, r0
 80080f6:	1c78      	adds	r0, r7, #1
 80080f8:	d1d6      	bne.n	80080a8 <_vfiprintf_r+0x1bc>
 80080fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080fc:	07d9      	lsls	r1, r3, #31
 80080fe:	d405      	bmi.n	800810c <_vfiprintf_r+0x220>
 8008100:	89ab      	ldrh	r3, [r5, #12]
 8008102:	059a      	lsls	r2, r3, #22
 8008104:	d402      	bmi.n	800810c <_vfiprintf_r+0x220>
 8008106:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008108:	f000 faaf 	bl	800866a <__retarget_lock_release_recursive>
 800810c:	89ab      	ldrh	r3, [r5, #12]
 800810e:	065b      	lsls	r3, r3, #25
 8008110:	f53f af12 	bmi.w	8007f38 <_vfiprintf_r+0x4c>
 8008114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008116:	e711      	b.n	8007f3c <_vfiprintf_r+0x50>
 8008118:	ab03      	add	r3, sp, #12
 800811a:	9300      	str	r3, [sp, #0]
 800811c:	462a      	mov	r2, r5
 800811e:	4b09      	ldr	r3, [pc, #36]	; (8008144 <_vfiprintf_r+0x258>)
 8008120:	a904      	add	r1, sp, #16
 8008122:	4630      	mov	r0, r6
 8008124:	f7fe f862 	bl	80061ec <_printf_i>
 8008128:	e7e4      	b.n	80080f4 <_vfiprintf_r+0x208>
 800812a:	bf00      	nop
 800812c:	08008e1c 	.word	0x08008e1c
 8008130:	08008e3c 	.word	0x08008e3c
 8008134:	08008dfc 	.word	0x08008dfc
 8008138:	08008ca4 	.word	0x08008ca4
 800813c:	08008cae 	.word	0x08008cae
 8008140:	08005ca5 	.word	0x08005ca5
 8008144:	08007ec9 	.word	0x08007ec9
 8008148:	08008caa 	.word	0x08008caa

0800814c <__swbuf_r>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	460e      	mov	r6, r1
 8008150:	4614      	mov	r4, r2
 8008152:	4605      	mov	r5, r0
 8008154:	b118      	cbz	r0, 800815e <__swbuf_r+0x12>
 8008156:	6983      	ldr	r3, [r0, #24]
 8008158:	b90b      	cbnz	r3, 800815e <__swbuf_r+0x12>
 800815a:	f000 f9e7 	bl	800852c <__sinit>
 800815e:	4b21      	ldr	r3, [pc, #132]	; (80081e4 <__swbuf_r+0x98>)
 8008160:	429c      	cmp	r4, r3
 8008162:	d12b      	bne.n	80081bc <__swbuf_r+0x70>
 8008164:	686c      	ldr	r4, [r5, #4]
 8008166:	69a3      	ldr	r3, [r4, #24]
 8008168:	60a3      	str	r3, [r4, #8]
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	071a      	lsls	r2, r3, #28
 800816e:	d52f      	bpl.n	80081d0 <__swbuf_r+0x84>
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	b36b      	cbz	r3, 80081d0 <__swbuf_r+0x84>
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	6820      	ldr	r0, [r4, #0]
 8008178:	1ac0      	subs	r0, r0, r3
 800817a:	6963      	ldr	r3, [r4, #20]
 800817c:	b2f6      	uxtb	r6, r6
 800817e:	4283      	cmp	r3, r0
 8008180:	4637      	mov	r7, r6
 8008182:	dc04      	bgt.n	800818e <__swbuf_r+0x42>
 8008184:	4621      	mov	r1, r4
 8008186:	4628      	mov	r0, r5
 8008188:	f000 f93c 	bl	8008404 <_fflush_r>
 800818c:	bb30      	cbnz	r0, 80081dc <__swbuf_r+0x90>
 800818e:	68a3      	ldr	r3, [r4, #8]
 8008190:	3b01      	subs	r3, #1
 8008192:	60a3      	str	r3, [r4, #8]
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	1c5a      	adds	r2, r3, #1
 8008198:	6022      	str	r2, [r4, #0]
 800819a:	701e      	strb	r6, [r3, #0]
 800819c:	6963      	ldr	r3, [r4, #20]
 800819e:	3001      	adds	r0, #1
 80081a0:	4283      	cmp	r3, r0
 80081a2:	d004      	beq.n	80081ae <__swbuf_r+0x62>
 80081a4:	89a3      	ldrh	r3, [r4, #12]
 80081a6:	07db      	lsls	r3, r3, #31
 80081a8:	d506      	bpl.n	80081b8 <__swbuf_r+0x6c>
 80081aa:	2e0a      	cmp	r6, #10
 80081ac:	d104      	bne.n	80081b8 <__swbuf_r+0x6c>
 80081ae:	4621      	mov	r1, r4
 80081b0:	4628      	mov	r0, r5
 80081b2:	f000 f927 	bl	8008404 <_fflush_r>
 80081b6:	b988      	cbnz	r0, 80081dc <__swbuf_r+0x90>
 80081b8:	4638      	mov	r0, r7
 80081ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <__swbuf_r+0x9c>)
 80081be:	429c      	cmp	r4, r3
 80081c0:	d101      	bne.n	80081c6 <__swbuf_r+0x7a>
 80081c2:	68ac      	ldr	r4, [r5, #8]
 80081c4:	e7cf      	b.n	8008166 <__swbuf_r+0x1a>
 80081c6:	4b09      	ldr	r3, [pc, #36]	; (80081ec <__swbuf_r+0xa0>)
 80081c8:	429c      	cmp	r4, r3
 80081ca:	bf08      	it	eq
 80081cc:	68ec      	ldreq	r4, [r5, #12]
 80081ce:	e7ca      	b.n	8008166 <__swbuf_r+0x1a>
 80081d0:	4621      	mov	r1, r4
 80081d2:	4628      	mov	r0, r5
 80081d4:	f000 f81a 	bl	800820c <__swsetup_r>
 80081d8:	2800      	cmp	r0, #0
 80081da:	d0cb      	beq.n	8008174 <__swbuf_r+0x28>
 80081dc:	f04f 37ff 	mov.w	r7, #4294967295
 80081e0:	e7ea      	b.n	80081b8 <__swbuf_r+0x6c>
 80081e2:	bf00      	nop
 80081e4:	08008e1c 	.word	0x08008e1c
 80081e8:	08008e3c 	.word	0x08008e3c
 80081ec:	08008dfc 	.word	0x08008dfc

080081f0 <__ascii_wctomb>:
 80081f0:	b149      	cbz	r1, 8008206 <__ascii_wctomb+0x16>
 80081f2:	2aff      	cmp	r2, #255	; 0xff
 80081f4:	bf85      	ittet	hi
 80081f6:	238a      	movhi	r3, #138	; 0x8a
 80081f8:	6003      	strhi	r3, [r0, #0]
 80081fa:	700a      	strbls	r2, [r1, #0]
 80081fc:	f04f 30ff 	movhi.w	r0, #4294967295
 8008200:	bf98      	it	ls
 8008202:	2001      	movls	r0, #1
 8008204:	4770      	bx	lr
 8008206:	4608      	mov	r0, r1
 8008208:	4770      	bx	lr
	...

0800820c <__swsetup_r>:
 800820c:	4b32      	ldr	r3, [pc, #200]	; (80082d8 <__swsetup_r+0xcc>)
 800820e:	b570      	push	{r4, r5, r6, lr}
 8008210:	681d      	ldr	r5, [r3, #0]
 8008212:	4606      	mov	r6, r0
 8008214:	460c      	mov	r4, r1
 8008216:	b125      	cbz	r5, 8008222 <__swsetup_r+0x16>
 8008218:	69ab      	ldr	r3, [r5, #24]
 800821a:	b913      	cbnz	r3, 8008222 <__swsetup_r+0x16>
 800821c:	4628      	mov	r0, r5
 800821e:	f000 f985 	bl	800852c <__sinit>
 8008222:	4b2e      	ldr	r3, [pc, #184]	; (80082dc <__swsetup_r+0xd0>)
 8008224:	429c      	cmp	r4, r3
 8008226:	d10f      	bne.n	8008248 <__swsetup_r+0x3c>
 8008228:	686c      	ldr	r4, [r5, #4]
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008230:	0719      	lsls	r1, r3, #28
 8008232:	d42c      	bmi.n	800828e <__swsetup_r+0x82>
 8008234:	06dd      	lsls	r5, r3, #27
 8008236:	d411      	bmi.n	800825c <__swsetup_r+0x50>
 8008238:	2309      	movs	r3, #9
 800823a:	6033      	str	r3, [r6, #0]
 800823c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	f04f 30ff 	mov.w	r0, #4294967295
 8008246:	e03e      	b.n	80082c6 <__swsetup_r+0xba>
 8008248:	4b25      	ldr	r3, [pc, #148]	; (80082e0 <__swsetup_r+0xd4>)
 800824a:	429c      	cmp	r4, r3
 800824c:	d101      	bne.n	8008252 <__swsetup_r+0x46>
 800824e:	68ac      	ldr	r4, [r5, #8]
 8008250:	e7eb      	b.n	800822a <__swsetup_r+0x1e>
 8008252:	4b24      	ldr	r3, [pc, #144]	; (80082e4 <__swsetup_r+0xd8>)
 8008254:	429c      	cmp	r4, r3
 8008256:	bf08      	it	eq
 8008258:	68ec      	ldreq	r4, [r5, #12]
 800825a:	e7e6      	b.n	800822a <__swsetup_r+0x1e>
 800825c:	0758      	lsls	r0, r3, #29
 800825e:	d512      	bpl.n	8008286 <__swsetup_r+0x7a>
 8008260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008262:	b141      	cbz	r1, 8008276 <__swsetup_r+0x6a>
 8008264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008268:	4299      	cmp	r1, r3
 800826a:	d002      	beq.n	8008272 <__swsetup_r+0x66>
 800826c:	4630      	mov	r0, r6
 800826e:	f7ff fb31 	bl	80078d4 <_free_r>
 8008272:	2300      	movs	r3, #0
 8008274:	6363      	str	r3, [r4, #52]	; 0x34
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	2300      	movs	r3, #0
 8008280:	6063      	str	r3, [r4, #4]
 8008282:	6923      	ldr	r3, [r4, #16]
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	89a3      	ldrh	r3, [r4, #12]
 8008288:	f043 0308 	orr.w	r3, r3, #8
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	b94b      	cbnz	r3, 80082a6 <__swsetup_r+0x9a>
 8008292:	89a3      	ldrh	r3, [r4, #12]
 8008294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800829c:	d003      	beq.n	80082a6 <__swsetup_r+0x9a>
 800829e:	4621      	mov	r1, r4
 80082a0:	4630      	mov	r0, r6
 80082a2:	f000 fa09 	bl	80086b8 <__smakebuf_r>
 80082a6:	89a0      	ldrh	r0, [r4, #12]
 80082a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082ac:	f010 0301 	ands.w	r3, r0, #1
 80082b0:	d00a      	beq.n	80082c8 <__swsetup_r+0xbc>
 80082b2:	2300      	movs	r3, #0
 80082b4:	60a3      	str	r3, [r4, #8]
 80082b6:	6963      	ldr	r3, [r4, #20]
 80082b8:	425b      	negs	r3, r3
 80082ba:	61a3      	str	r3, [r4, #24]
 80082bc:	6923      	ldr	r3, [r4, #16]
 80082be:	b943      	cbnz	r3, 80082d2 <__swsetup_r+0xc6>
 80082c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082c4:	d1ba      	bne.n	800823c <__swsetup_r+0x30>
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	0781      	lsls	r1, r0, #30
 80082ca:	bf58      	it	pl
 80082cc:	6963      	ldrpl	r3, [r4, #20]
 80082ce:	60a3      	str	r3, [r4, #8]
 80082d0:	e7f4      	b.n	80082bc <__swsetup_r+0xb0>
 80082d2:	2000      	movs	r0, #0
 80082d4:	e7f7      	b.n	80082c6 <__swsetup_r+0xba>
 80082d6:	bf00      	nop
 80082d8:	2000000c 	.word	0x2000000c
 80082dc:	08008e1c 	.word	0x08008e1c
 80082e0:	08008e3c 	.word	0x08008e3c
 80082e4:	08008dfc 	.word	0x08008dfc

080082e8 <abort>:
 80082e8:	b508      	push	{r3, lr}
 80082ea:	2006      	movs	r0, #6
 80082ec:	f000 fa54 	bl	8008798 <raise>
 80082f0:	2001      	movs	r0, #1
 80082f2:	f7f9 fb77 	bl	80019e4 <_exit>
	...

080082f8 <__sflush_r>:
 80082f8:	898a      	ldrh	r2, [r1, #12]
 80082fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082fe:	4605      	mov	r5, r0
 8008300:	0710      	lsls	r0, r2, #28
 8008302:	460c      	mov	r4, r1
 8008304:	d458      	bmi.n	80083b8 <__sflush_r+0xc0>
 8008306:	684b      	ldr	r3, [r1, #4]
 8008308:	2b00      	cmp	r3, #0
 800830a:	dc05      	bgt.n	8008318 <__sflush_r+0x20>
 800830c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800830e:	2b00      	cmp	r3, #0
 8008310:	dc02      	bgt.n	8008318 <__sflush_r+0x20>
 8008312:	2000      	movs	r0, #0
 8008314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800831a:	2e00      	cmp	r6, #0
 800831c:	d0f9      	beq.n	8008312 <__sflush_r+0x1a>
 800831e:	2300      	movs	r3, #0
 8008320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008324:	682f      	ldr	r7, [r5, #0]
 8008326:	602b      	str	r3, [r5, #0]
 8008328:	d032      	beq.n	8008390 <__sflush_r+0x98>
 800832a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800832c:	89a3      	ldrh	r3, [r4, #12]
 800832e:	075a      	lsls	r2, r3, #29
 8008330:	d505      	bpl.n	800833e <__sflush_r+0x46>
 8008332:	6863      	ldr	r3, [r4, #4]
 8008334:	1ac0      	subs	r0, r0, r3
 8008336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008338:	b10b      	cbz	r3, 800833e <__sflush_r+0x46>
 800833a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800833c:	1ac0      	subs	r0, r0, r3
 800833e:	2300      	movs	r3, #0
 8008340:	4602      	mov	r2, r0
 8008342:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008344:	6a21      	ldr	r1, [r4, #32]
 8008346:	4628      	mov	r0, r5
 8008348:	47b0      	blx	r6
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	d106      	bne.n	800835e <__sflush_r+0x66>
 8008350:	6829      	ldr	r1, [r5, #0]
 8008352:	291d      	cmp	r1, #29
 8008354:	d82c      	bhi.n	80083b0 <__sflush_r+0xb8>
 8008356:	4a2a      	ldr	r2, [pc, #168]	; (8008400 <__sflush_r+0x108>)
 8008358:	40ca      	lsrs	r2, r1
 800835a:	07d6      	lsls	r6, r2, #31
 800835c:	d528      	bpl.n	80083b0 <__sflush_r+0xb8>
 800835e:	2200      	movs	r2, #0
 8008360:	6062      	str	r2, [r4, #4]
 8008362:	04d9      	lsls	r1, r3, #19
 8008364:	6922      	ldr	r2, [r4, #16]
 8008366:	6022      	str	r2, [r4, #0]
 8008368:	d504      	bpl.n	8008374 <__sflush_r+0x7c>
 800836a:	1c42      	adds	r2, r0, #1
 800836c:	d101      	bne.n	8008372 <__sflush_r+0x7a>
 800836e:	682b      	ldr	r3, [r5, #0]
 8008370:	b903      	cbnz	r3, 8008374 <__sflush_r+0x7c>
 8008372:	6560      	str	r0, [r4, #84]	; 0x54
 8008374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008376:	602f      	str	r7, [r5, #0]
 8008378:	2900      	cmp	r1, #0
 800837a:	d0ca      	beq.n	8008312 <__sflush_r+0x1a>
 800837c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008380:	4299      	cmp	r1, r3
 8008382:	d002      	beq.n	800838a <__sflush_r+0x92>
 8008384:	4628      	mov	r0, r5
 8008386:	f7ff faa5 	bl	80078d4 <_free_r>
 800838a:	2000      	movs	r0, #0
 800838c:	6360      	str	r0, [r4, #52]	; 0x34
 800838e:	e7c1      	b.n	8008314 <__sflush_r+0x1c>
 8008390:	6a21      	ldr	r1, [r4, #32]
 8008392:	2301      	movs	r3, #1
 8008394:	4628      	mov	r0, r5
 8008396:	47b0      	blx	r6
 8008398:	1c41      	adds	r1, r0, #1
 800839a:	d1c7      	bne.n	800832c <__sflush_r+0x34>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0c4      	beq.n	800832c <__sflush_r+0x34>
 80083a2:	2b1d      	cmp	r3, #29
 80083a4:	d001      	beq.n	80083aa <__sflush_r+0xb2>
 80083a6:	2b16      	cmp	r3, #22
 80083a8:	d101      	bne.n	80083ae <__sflush_r+0xb6>
 80083aa:	602f      	str	r7, [r5, #0]
 80083ac:	e7b1      	b.n	8008312 <__sflush_r+0x1a>
 80083ae:	89a3      	ldrh	r3, [r4, #12]
 80083b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	e7ad      	b.n	8008314 <__sflush_r+0x1c>
 80083b8:	690f      	ldr	r7, [r1, #16]
 80083ba:	2f00      	cmp	r7, #0
 80083bc:	d0a9      	beq.n	8008312 <__sflush_r+0x1a>
 80083be:	0793      	lsls	r3, r2, #30
 80083c0:	680e      	ldr	r6, [r1, #0]
 80083c2:	bf08      	it	eq
 80083c4:	694b      	ldreq	r3, [r1, #20]
 80083c6:	600f      	str	r7, [r1, #0]
 80083c8:	bf18      	it	ne
 80083ca:	2300      	movne	r3, #0
 80083cc:	eba6 0807 	sub.w	r8, r6, r7
 80083d0:	608b      	str	r3, [r1, #8]
 80083d2:	f1b8 0f00 	cmp.w	r8, #0
 80083d6:	dd9c      	ble.n	8008312 <__sflush_r+0x1a>
 80083d8:	6a21      	ldr	r1, [r4, #32]
 80083da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80083dc:	4643      	mov	r3, r8
 80083de:	463a      	mov	r2, r7
 80083e0:	4628      	mov	r0, r5
 80083e2:	47b0      	blx	r6
 80083e4:	2800      	cmp	r0, #0
 80083e6:	dc06      	bgt.n	80083f6 <__sflush_r+0xfe>
 80083e8:	89a3      	ldrh	r3, [r4, #12]
 80083ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083ee:	81a3      	strh	r3, [r4, #12]
 80083f0:	f04f 30ff 	mov.w	r0, #4294967295
 80083f4:	e78e      	b.n	8008314 <__sflush_r+0x1c>
 80083f6:	4407      	add	r7, r0
 80083f8:	eba8 0800 	sub.w	r8, r8, r0
 80083fc:	e7e9      	b.n	80083d2 <__sflush_r+0xda>
 80083fe:	bf00      	nop
 8008400:	20400001 	.word	0x20400001

08008404 <_fflush_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	690b      	ldr	r3, [r1, #16]
 8008408:	4605      	mov	r5, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b913      	cbnz	r3, 8008414 <_fflush_r+0x10>
 800840e:	2500      	movs	r5, #0
 8008410:	4628      	mov	r0, r5
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	b118      	cbz	r0, 800841e <_fflush_r+0x1a>
 8008416:	6983      	ldr	r3, [r0, #24]
 8008418:	b90b      	cbnz	r3, 800841e <_fflush_r+0x1a>
 800841a:	f000 f887 	bl	800852c <__sinit>
 800841e:	4b14      	ldr	r3, [pc, #80]	; (8008470 <_fflush_r+0x6c>)
 8008420:	429c      	cmp	r4, r3
 8008422:	d11b      	bne.n	800845c <_fflush_r+0x58>
 8008424:	686c      	ldr	r4, [r5, #4]
 8008426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d0ef      	beq.n	800840e <_fflush_r+0xa>
 800842e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008430:	07d0      	lsls	r0, r2, #31
 8008432:	d404      	bmi.n	800843e <_fflush_r+0x3a>
 8008434:	0599      	lsls	r1, r3, #22
 8008436:	d402      	bmi.n	800843e <_fflush_r+0x3a>
 8008438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800843a:	f000 f915 	bl	8008668 <__retarget_lock_acquire_recursive>
 800843e:	4628      	mov	r0, r5
 8008440:	4621      	mov	r1, r4
 8008442:	f7ff ff59 	bl	80082f8 <__sflush_r>
 8008446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008448:	07da      	lsls	r2, r3, #31
 800844a:	4605      	mov	r5, r0
 800844c:	d4e0      	bmi.n	8008410 <_fflush_r+0xc>
 800844e:	89a3      	ldrh	r3, [r4, #12]
 8008450:	059b      	lsls	r3, r3, #22
 8008452:	d4dd      	bmi.n	8008410 <_fflush_r+0xc>
 8008454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008456:	f000 f908 	bl	800866a <__retarget_lock_release_recursive>
 800845a:	e7d9      	b.n	8008410 <_fflush_r+0xc>
 800845c:	4b05      	ldr	r3, [pc, #20]	; (8008474 <_fflush_r+0x70>)
 800845e:	429c      	cmp	r4, r3
 8008460:	d101      	bne.n	8008466 <_fflush_r+0x62>
 8008462:	68ac      	ldr	r4, [r5, #8]
 8008464:	e7df      	b.n	8008426 <_fflush_r+0x22>
 8008466:	4b04      	ldr	r3, [pc, #16]	; (8008478 <_fflush_r+0x74>)
 8008468:	429c      	cmp	r4, r3
 800846a:	bf08      	it	eq
 800846c:	68ec      	ldreq	r4, [r5, #12]
 800846e:	e7da      	b.n	8008426 <_fflush_r+0x22>
 8008470:	08008e1c 	.word	0x08008e1c
 8008474:	08008e3c 	.word	0x08008e3c
 8008478:	08008dfc 	.word	0x08008dfc

0800847c <std>:
 800847c:	2300      	movs	r3, #0
 800847e:	b510      	push	{r4, lr}
 8008480:	4604      	mov	r4, r0
 8008482:	e9c0 3300 	strd	r3, r3, [r0]
 8008486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800848a:	6083      	str	r3, [r0, #8]
 800848c:	8181      	strh	r1, [r0, #12]
 800848e:	6643      	str	r3, [r0, #100]	; 0x64
 8008490:	81c2      	strh	r2, [r0, #14]
 8008492:	6183      	str	r3, [r0, #24]
 8008494:	4619      	mov	r1, r3
 8008496:	2208      	movs	r2, #8
 8008498:	305c      	adds	r0, #92	; 0x5c
 800849a:	f7fd fb5b 	bl	8005b54 <memset>
 800849e:	4b05      	ldr	r3, [pc, #20]	; (80084b4 <std+0x38>)
 80084a0:	6263      	str	r3, [r4, #36]	; 0x24
 80084a2:	4b05      	ldr	r3, [pc, #20]	; (80084b8 <std+0x3c>)
 80084a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80084a6:	4b05      	ldr	r3, [pc, #20]	; (80084bc <std+0x40>)
 80084a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80084aa:	4b05      	ldr	r3, [pc, #20]	; (80084c0 <std+0x44>)
 80084ac:	6224      	str	r4, [r4, #32]
 80084ae:	6323      	str	r3, [r4, #48]	; 0x30
 80084b0:	bd10      	pop	{r4, pc}
 80084b2:	bf00      	nop
 80084b4:	080087d1 	.word	0x080087d1
 80084b8:	080087f3 	.word	0x080087f3
 80084bc:	0800882b 	.word	0x0800882b
 80084c0:	0800884f 	.word	0x0800884f

080084c4 <_cleanup_r>:
 80084c4:	4901      	ldr	r1, [pc, #4]	; (80084cc <_cleanup_r+0x8>)
 80084c6:	f000 b8af 	b.w	8008628 <_fwalk_reent>
 80084ca:	bf00      	nop
 80084cc:	08008405 	.word	0x08008405

080084d0 <__sfmoreglue>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	2268      	movs	r2, #104	; 0x68
 80084d4:	1e4d      	subs	r5, r1, #1
 80084d6:	4355      	muls	r5, r2
 80084d8:	460e      	mov	r6, r1
 80084da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80084de:	f7ff fa65 	bl	80079ac <_malloc_r>
 80084e2:	4604      	mov	r4, r0
 80084e4:	b140      	cbz	r0, 80084f8 <__sfmoreglue+0x28>
 80084e6:	2100      	movs	r1, #0
 80084e8:	e9c0 1600 	strd	r1, r6, [r0]
 80084ec:	300c      	adds	r0, #12
 80084ee:	60a0      	str	r0, [r4, #8]
 80084f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80084f4:	f7fd fb2e 	bl	8005b54 <memset>
 80084f8:	4620      	mov	r0, r4
 80084fa:	bd70      	pop	{r4, r5, r6, pc}

080084fc <__sfp_lock_acquire>:
 80084fc:	4801      	ldr	r0, [pc, #4]	; (8008504 <__sfp_lock_acquire+0x8>)
 80084fe:	f000 b8b3 	b.w	8008668 <__retarget_lock_acquire_recursive>
 8008502:	bf00      	nop
 8008504:	20017d11 	.word	0x20017d11

08008508 <__sfp_lock_release>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__sfp_lock_release+0x8>)
 800850a:	f000 b8ae 	b.w	800866a <__retarget_lock_release_recursive>
 800850e:	bf00      	nop
 8008510:	20017d11 	.word	0x20017d11

08008514 <__sinit_lock_acquire>:
 8008514:	4801      	ldr	r0, [pc, #4]	; (800851c <__sinit_lock_acquire+0x8>)
 8008516:	f000 b8a7 	b.w	8008668 <__retarget_lock_acquire_recursive>
 800851a:	bf00      	nop
 800851c:	20017d12 	.word	0x20017d12

08008520 <__sinit_lock_release>:
 8008520:	4801      	ldr	r0, [pc, #4]	; (8008528 <__sinit_lock_release+0x8>)
 8008522:	f000 b8a2 	b.w	800866a <__retarget_lock_release_recursive>
 8008526:	bf00      	nop
 8008528:	20017d12 	.word	0x20017d12

0800852c <__sinit>:
 800852c:	b510      	push	{r4, lr}
 800852e:	4604      	mov	r4, r0
 8008530:	f7ff fff0 	bl	8008514 <__sinit_lock_acquire>
 8008534:	69a3      	ldr	r3, [r4, #24]
 8008536:	b11b      	cbz	r3, 8008540 <__sinit+0x14>
 8008538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800853c:	f7ff bff0 	b.w	8008520 <__sinit_lock_release>
 8008540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008544:	6523      	str	r3, [r4, #80]	; 0x50
 8008546:	4b13      	ldr	r3, [pc, #76]	; (8008594 <__sinit+0x68>)
 8008548:	4a13      	ldr	r2, [pc, #76]	; (8008598 <__sinit+0x6c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	62a2      	str	r2, [r4, #40]	; 0x28
 800854e:	42a3      	cmp	r3, r4
 8008550:	bf04      	itt	eq
 8008552:	2301      	moveq	r3, #1
 8008554:	61a3      	streq	r3, [r4, #24]
 8008556:	4620      	mov	r0, r4
 8008558:	f000 f820 	bl	800859c <__sfp>
 800855c:	6060      	str	r0, [r4, #4]
 800855e:	4620      	mov	r0, r4
 8008560:	f000 f81c 	bl	800859c <__sfp>
 8008564:	60a0      	str	r0, [r4, #8]
 8008566:	4620      	mov	r0, r4
 8008568:	f000 f818 	bl	800859c <__sfp>
 800856c:	2200      	movs	r2, #0
 800856e:	60e0      	str	r0, [r4, #12]
 8008570:	2104      	movs	r1, #4
 8008572:	6860      	ldr	r0, [r4, #4]
 8008574:	f7ff ff82 	bl	800847c <std>
 8008578:	68a0      	ldr	r0, [r4, #8]
 800857a:	2201      	movs	r2, #1
 800857c:	2109      	movs	r1, #9
 800857e:	f7ff ff7d 	bl	800847c <std>
 8008582:	68e0      	ldr	r0, [r4, #12]
 8008584:	2202      	movs	r2, #2
 8008586:	2112      	movs	r1, #18
 8008588:	f7ff ff78 	bl	800847c <std>
 800858c:	2301      	movs	r3, #1
 800858e:	61a3      	str	r3, [r4, #24]
 8008590:	e7d2      	b.n	8008538 <__sinit+0xc>
 8008592:	bf00      	nop
 8008594:	08008a84 	.word	0x08008a84
 8008598:	080084c5 	.word	0x080084c5

0800859c <__sfp>:
 800859c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859e:	4607      	mov	r7, r0
 80085a0:	f7ff ffac 	bl	80084fc <__sfp_lock_acquire>
 80085a4:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <__sfp+0x84>)
 80085a6:	681e      	ldr	r6, [r3, #0]
 80085a8:	69b3      	ldr	r3, [r6, #24]
 80085aa:	b913      	cbnz	r3, 80085b2 <__sfp+0x16>
 80085ac:	4630      	mov	r0, r6
 80085ae:	f7ff ffbd 	bl	800852c <__sinit>
 80085b2:	3648      	adds	r6, #72	; 0x48
 80085b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80085b8:	3b01      	subs	r3, #1
 80085ba:	d503      	bpl.n	80085c4 <__sfp+0x28>
 80085bc:	6833      	ldr	r3, [r6, #0]
 80085be:	b30b      	cbz	r3, 8008604 <__sfp+0x68>
 80085c0:	6836      	ldr	r6, [r6, #0]
 80085c2:	e7f7      	b.n	80085b4 <__sfp+0x18>
 80085c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80085c8:	b9d5      	cbnz	r5, 8008600 <__sfp+0x64>
 80085ca:	4b16      	ldr	r3, [pc, #88]	; (8008624 <__sfp+0x88>)
 80085cc:	60e3      	str	r3, [r4, #12]
 80085ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80085d2:	6665      	str	r5, [r4, #100]	; 0x64
 80085d4:	f000 f847 	bl	8008666 <__retarget_lock_init_recursive>
 80085d8:	f7ff ff96 	bl	8008508 <__sfp_lock_release>
 80085dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80085e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80085e4:	6025      	str	r5, [r4, #0]
 80085e6:	61a5      	str	r5, [r4, #24]
 80085e8:	2208      	movs	r2, #8
 80085ea:	4629      	mov	r1, r5
 80085ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80085f0:	f7fd fab0 	bl	8005b54 <memset>
 80085f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80085f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80085fc:	4620      	mov	r0, r4
 80085fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008600:	3468      	adds	r4, #104	; 0x68
 8008602:	e7d9      	b.n	80085b8 <__sfp+0x1c>
 8008604:	2104      	movs	r1, #4
 8008606:	4638      	mov	r0, r7
 8008608:	f7ff ff62 	bl	80084d0 <__sfmoreglue>
 800860c:	4604      	mov	r4, r0
 800860e:	6030      	str	r0, [r6, #0]
 8008610:	2800      	cmp	r0, #0
 8008612:	d1d5      	bne.n	80085c0 <__sfp+0x24>
 8008614:	f7ff ff78 	bl	8008508 <__sfp_lock_release>
 8008618:	230c      	movs	r3, #12
 800861a:	603b      	str	r3, [r7, #0]
 800861c:	e7ee      	b.n	80085fc <__sfp+0x60>
 800861e:	bf00      	nop
 8008620:	08008a84 	.word	0x08008a84
 8008624:	ffff0001 	.word	0xffff0001

08008628 <_fwalk_reent>:
 8008628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800862c:	4606      	mov	r6, r0
 800862e:	4688      	mov	r8, r1
 8008630:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008634:	2700      	movs	r7, #0
 8008636:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800863a:	f1b9 0901 	subs.w	r9, r9, #1
 800863e:	d505      	bpl.n	800864c <_fwalk_reent+0x24>
 8008640:	6824      	ldr	r4, [r4, #0]
 8008642:	2c00      	cmp	r4, #0
 8008644:	d1f7      	bne.n	8008636 <_fwalk_reent+0xe>
 8008646:	4638      	mov	r0, r7
 8008648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800864c:	89ab      	ldrh	r3, [r5, #12]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d907      	bls.n	8008662 <_fwalk_reent+0x3a>
 8008652:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008656:	3301      	adds	r3, #1
 8008658:	d003      	beq.n	8008662 <_fwalk_reent+0x3a>
 800865a:	4629      	mov	r1, r5
 800865c:	4630      	mov	r0, r6
 800865e:	47c0      	blx	r8
 8008660:	4307      	orrs	r7, r0
 8008662:	3568      	adds	r5, #104	; 0x68
 8008664:	e7e9      	b.n	800863a <_fwalk_reent+0x12>

08008666 <__retarget_lock_init_recursive>:
 8008666:	4770      	bx	lr

08008668 <__retarget_lock_acquire_recursive>:
 8008668:	4770      	bx	lr

0800866a <__retarget_lock_release_recursive>:
 800866a:	4770      	bx	lr

0800866c <__swhatbuf_r>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	460e      	mov	r6, r1
 8008670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008674:	2900      	cmp	r1, #0
 8008676:	b096      	sub	sp, #88	; 0x58
 8008678:	4614      	mov	r4, r2
 800867a:	461d      	mov	r5, r3
 800867c:	da08      	bge.n	8008690 <__swhatbuf_r+0x24>
 800867e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008682:	2200      	movs	r2, #0
 8008684:	602a      	str	r2, [r5, #0]
 8008686:	061a      	lsls	r2, r3, #24
 8008688:	d410      	bmi.n	80086ac <__swhatbuf_r+0x40>
 800868a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800868e:	e00e      	b.n	80086ae <__swhatbuf_r+0x42>
 8008690:	466a      	mov	r2, sp
 8008692:	f000 f903 	bl	800889c <_fstat_r>
 8008696:	2800      	cmp	r0, #0
 8008698:	dbf1      	blt.n	800867e <__swhatbuf_r+0x12>
 800869a:	9a01      	ldr	r2, [sp, #4]
 800869c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80086a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80086a4:	425a      	negs	r2, r3
 80086a6:	415a      	adcs	r2, r3
 80086a8:	602a      	str	r2, [r5, #0]
 80086aa:	e7ee      	b.n	800868a <__swhatbuf_r+0x1e>
 80086ac:	2340      	movs	r3, #64	; 0x40
 80086ae:	2000      	movs	r0, #0
 80086b0:	6023      	str	r3, [r4, #0]
 80086b2:	b016      	add	sp, #88	; 0x58
 80086b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080086b8 <__smakebuf_r>:
 80086b8:	898b      	ldrh	r3, [r1, #12]
 80086ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086bc:	079d      	lsls	r5, r3, #30
 80086be:	4606      	mov	r6, r0
 80086c0:	460c      	mov	r4, r1
 80086c2:	d507      	bpl.n	80086d4 <__smakebuf_r+0x1c>
 80086c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	6123      	str	r3, [r4, #16]
 80086cc:	2301      	movs	r3, #1
 80086ce:	6163      	str	r3, [r4, #20]
 80086d0:	b002      	add	sp, #8
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	ab01      	add	r3, sp, #4
 80086d6:	466a      	mov	r2, sp
 80086d8:	f7ff ffc8 	bl	800866c <__swhatbuf_r>
 80086dc:	9900      	ldr	r1, [sp, #0]
 80086de:	4605      	mov	r5, r0
 80086e0:	4630      	mov	r0, r6
 80086e2:	f7ff f963 	bl	80079ac <_malloc_r>
 80086e6:	b948      	cbnz	r0, 80086fc <__smakebuf_r+0x44>
 80086e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086ec:	059a      	lsls	r2, r3, #22
 80086ee:	d4ef      	bmi.n	80086d0 <__smakebuf_r+0x18>
 80086f0:	f023 0303 	bic.w	r3, r3, #3
 80086f4:	f043 0302 	orr.w	r3, r3, #2
 80086f8:	81a3      	strh	r3, [r4, #12]
 80086fa:	e7e3      	b.n	80086c4 <__smakebuf_r+0xc>
 80086fc:	4b0d      	ldr	r3, [pc, #52]	; (8008734 <__smakebuf_r+0x7c>)
 80086fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8008700:	89a3      	ldrh	r3, [r4, #12]
 8008702:	6020      	str	r0, [r4, #0]
 8008704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	9b00      	ldr	r3, [sp, #0]
 800870c:	6163      	str	r3, [r4, #20]
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	6120      	str	r0, [r4, #16]
 8008712:	b15b      	cbz	r3, 800872c <__smakebuf_r+0x74>
 8008714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008718:	4630      	mov	r0, r6
 800871a:	f000 f8d1 	bl	80088c0 <_isatty_r>
 800871e:	b128      	cbz	r0, 800872c <__smakebuf_r+0x74>
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	f023 0303 	bic.w	r3, r3, #3
 8008726:	f043 0301 	orr.w	r3, r3, #1
 800872a:	81a3      	strh	r3, [r4, #12]
 800872c:	89a0      	ldrh	r0, [r4, #12]
 800872e:	4305      	orrs	r5, r0
 8008730:	81a5      	strh	r5, [r4, #12]
 8008732:	e7cd      	b.n	80086d0 <__smakebuf_r+0x18>
 8008734:	080084c5 	.word	0x080084c5

08008738 <_malloc_usable_size_r>:
 8008738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800873c:	1f18      	subs	r0, r3, #4
 800873e:	2b00      	cmp	r3, #0
 8008740:	bfbc      	itt	lt
 8008742:	580b      	ldrlt	r3, [r1, r0]
 8008744:	18c0      	addlt	r0, r0, r3
 8008746:	4770      	bx	lr

08008748 <_raise_r>:
 8008748:	291f      	cmp	r1, #31
 800874a:	b538      	push	{r3, r4, r5, lr}
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
 8008750:	d904      	bls.n	800875c <_raise_r+0x14>
 8008752:	2316      	movs	r3, #22
 8008754:	6003      	str	r3, [r0, #0]
 8008756:	f04f 30ff 	mov.w	r0, #4294967295
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800875e:	b112      	cbz	r2, 8008766 <_raise_r+0x1e>
 8008760:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008764:	b94b      	cbnz	r3, 800877a <_raise_r+0x32>
 8008766:	4620      	mov	r0, r4
 8008768:	f000 f830 	bl	80087cc <_getpid_r>
 800876c:	462a      	mov	r2, r5
 800876e:	4601      	mov	r1, r0
 8008770:	4620      	mov	r0, r4
 8008772:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008776:	f000 b817 	b.w	80087a8 <_kill_r>
 800877a:	2b01      	cmp	r3, #1
 800877c:	d00a      	beq.n	8008794 <_raise_r+0x4c>
 800877e:	1c59      	adds	r1, r3, #1
 8008780:	d103      	bne.n	800878a <_raise_r+0x42>
 8008782:	2316      	movs	r3, #22
 8008784:	6003      	str	r3, [r0, #0]
 8008786:	2001      	movs	r0, #1
 8008788:	e7e7      	b.n	800875a <_raise_r+0x12>
 800878a:	2400      	movs	r4, #0
 800878c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008790:	4628      	mov	r0, r5
 8008792:	4798      	blx	r3
 8008794:	2000      	movs	r0, #0
 8008796:	e7e0      	b.n	800875a <_raise_r+0x12>

08008798 <raise>:
 8008798:	4b02      	ldr	r3, [pc, #8]	; (80087a4 <raise+0xc>)
 800879a:	4601      	mov	r1, r0
 800879c:	6818      	ldr	r0, [r3, #0]
 800879e:	f7ff bfd3 	b.w	8008748 <_raise_r>
 80087a2:	bf00      	nop
 80087a4:	2000000c 	.word	0x2000000c

080087a8 <_kill_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	; (80087c8 <_kill_r+0x20>)
 80087ac:	2300      	movs	r3, #0
 80087ae:	4604      	mov	r4, r0
 80087b0:	4608      	mov	r0, r1
 80087b2:	4611      	mov	r1, r2
 80087b4:	602b      	str	r3, [r5, #0]
 80087b6:	f7f9 f905 	bl	80019c4 <_kill>
 80087ba:	1c43      	adds	r3, r0, #1
 80087bc:	d102      	bne.n	80087c4 <_kill_r+0x1c>
 80087be:	682b      	ldr	r3, [r5, #0]
 80087c0:	b103      	cbz	r3, 80087c4 <_kill_r+0x1c>
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	bd38      	pop	{r3, r4, r5, pc}
 80087c6:	bf00      	nop
 80087c8:	20017d0c 	.word	0x20017d0c

080087cc <_getpid_r>:
 80087cc:	f7f9 b8f2 	b.w	80019b4 <_getpid>

080087d0 <__sread>:
 80087d0:	b510      	push	{r4, lr}
 80087d2:	460c      	mov	r4, r1
 80087d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087d8:	f000 f894 	bl	8008904 <_read_r>
 80087dc:	2800      	cmp	r0, #0
 80087de:	bfab      	itete	ge
 80087e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80087e2:	89a3      	ldrhlt	r3, [r4, #12]
 80087e4:	181b      	addge	r3, r3, r0
 80087e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80087ea:	bfac      	ite	ge
 80087ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80087ee:	81a3      	strhlt	r3, [r4, #12]
 80087f0:	bd10      	pop	{r4, pc}

080087f2 <__swrite>:
 80087f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f6:	461f      	mov	r7, r3
 80087f8:	898b      	ldrh	r3, [r1, #12]
 80087fa:	05db      	lsls	r3, r3, #23
 80087fc:	4605      	mov	r5, r0
 80087fe:	460c      	mov	r4, r1
 8008800:	4616      	mov	r6, r2
 8008802:	d505      	bpl.n	8008810 <__swrite+0x1e>
 8008804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008808:	2302      	movs	r3, #2
 800880a:	2200      	movs	r2, #0
 800880c:	f000 f868 	bl	80088e0 <_lseek_r>
 8008810:	89a3      	ldrh	r3, [r4, #12]
 8008812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008816:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	4632      	mov	r2, r6
 800881e:	463b      	mov	r3, r7
 8008820:	4628      	mov	r0, r5
 8008822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008826:	f000 b817 	b.w	8008858 <_write_r>

0800882a <__sseek>:
 800882a:	b510      	push	{r4, lr}
 800882c:	460c      	mov	r4, r1
 800882e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008832:	f000 f855 	bl	80088e0 <_lseek_r>
 8008836:	1c43      	adds	r3, r0, #1
 8008838:	89a3      	ldrh	r3, [r4, #12]
 800883a:	bf15      	itete	ne
 800883c:	6560      	strne	r0, [r4, #84]	; 0x54
 800883e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008842:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008846:	81a3      	strheq	r3, [r4, #12]
 8008848:	bf18      	it	ne
 800884a:	81a3      	strhne	r3, [r4, #12]
 800884c:	bd10      	pop	{r4, pc}

0800884e <__sclose>:
 800884e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008852:	f000 b813 	b.w	800887c <_close_r>
	...

08008858 <_write_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d07      	ldr	r5, [pc, #28]	; (8008878 <_write_r+0x20>)
 800885c:	4604      	mov	r4, r0
 800885e:	4608      	mov	r0, r1
 8008860:	4611      	mov	r1, r2
 8008862:	2200      	movs	r2, #0
 8008864:	602a      	str	r2, [r5, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	f7f9 f8e3 	bl	8001a32 <_write>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_write_r+0x1e>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	b103      	cbz	r3, 8008876 <_write_r+0x1e>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	20017d0c 	.word	0x20017d0c

0800887c <_close_r>:
 800887c:	b538      	push	{r3, r4, r5, lr}
 800887e:	4d06      	ldr	r5, [pc, #24]	; (8008898 <_close_r+0x1c>)
 8008880:	2300      	movs	r3, #0
 8008882:	4604      	mov	r4, r0
 8008884:	4608      	mov	r0, r1
 8008886:	602b      	str	r3, [r5, #0]
 8008888:	f7f9 f8ef 	bl	8001a6a <_close>
 800888c:	1c43      	adds	r3, r0, #1
 800888e:	d102      	bne.n	8008896 <_close_r+0x1a>
 8008890:	682b      	ldr	r3, [r5, #0]
 8008892:	b103      	cbz	r3, 8008896 <_close_r+0x1a>
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	bd38      	pop	{r3, r4, r5, pc}
 8008898:	20017d0c 	.word	0x20017d0c

0800889c <_fstat_r>:
 800889c:	b538      	push	{r3, r4, r5, lr}
 800889e:	4d07      	ldr	r5, [pc, #28]	; (80088bc <_fstat_r+0x20>)
 80088a0:	2300      	movs	r3, #0
 80088a2:	4604      	mov	r4, r0
 80088a4:	4608      	mov	r0, r1
 80088a6:	4611      	mov	r1, r2
 80088a8:	602b      	str	r3, [r5, #0]
 80088aa:	f7f9 f8ea 	bl	8001a82 <_fstat>
 80088ae:	1c43      	adds	r3, r0, #1
 80088b0:	d102      	bne.n	80088b8 <_fstat_r+0x1c>
 80088b2:	682b      	ldr	r3, [r5, #0]
 80088b4:	b103      	cbz	r3, 80088b8 <_fstat_r+0x1c>
 80088b6:	6023      	str	r3, [r4, #0]
 80088b8:	bd38      	pop	{r3, r4, r5, pc}
 80088ba:	bf00      	nop
 80088bc:	20017d0c 	.word	0x20017d0c

080088c0 <_isatty_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4d06      	ldr	r5, [pc, #24]	; (80088dc <_isatty_r+0x1c>)
 80088c4:	2300      	movs	r3, #0
 80088c6:	4604      	mov	r4, r0
 80088c8:	4608      	mov	r0, r1
 80088ca:	602b      	str	r3, [r5, #0]
 80088cc:	f7f9 f8e9 	bl	8001aa2 <_isatty>
 80088d0:	1c43      	adds	r3, r0, #1
 80088d2:	d102      	bne.n	80088da <_isatty_r+0x1a>
 80088d4:	682b      	ldr	r3, [r5, #0]
 80088d6:	b103      	cbz	r3, 80088da <_isatty_r+0x1a>
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	bd38      	pop	{r3, r4, r5, pc}
 80088dc:	20017d0c 	.word	0x20017d0c

080088e0 <_lseek_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4d07      	ldr	r5, [pc, #28]	; (8008900 <_lseek_r+0x20>)
 80088e4:	4604      	mov	r4, r0
 80088e6:	4608      	mov	r0, r1
 80088e8:	4611      	mov	r1, r2
 80088ea:	2200      	movs	r2, #0
 80088ec:	602a      	str	r2, [r5, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	f7f9 f8e2 	bl	8001ab8 <_lseek>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_lseek_r+0x1e>
 80088f8:	682b      	ldr	r3, [r5, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_lseek_r+0x1e>
 80088fc:	6023      	str	r3, [r4, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	20017d0c 	.word	0x20017d0c

08008904 <_read_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4d07      	ldr	r5, [pc, #28]	; (8008924 <_read_r+0x20>)
 8008908:	4604      	mov	r4, r0
 800890a:	4608      	mov	r0, r1
 800890c:	4611      	mov	r1, r2
 800890e:	2200      	movs	r2, #0
 8008910:	602a      	str	r2, [r5, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	f7f9 f870 	bl	80019f8 <_read>
 8008918:	1c43      	adds	r3, r0, #1
 800891a:	d102      	bne.n	8008922 <_read_r+0x1e>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	b103      	cbz	r3, 8008922 <_read_r+0x1e>
 8008920:	6023      	str	r3, [r4, #0]
 8008922:	bd38      	pop	{r3, r4, r5, pc}
 8008924:	20017d0c 	.word	0x20017d0c

08008928 <_init>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	bf00      	nop
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr

08008934 <_fini>:
 8008934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008936:	bf00      	nop
 8008938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800893a:	bc08      	pop	{r3}
 800893c:	469e      	mov	lr, r3
 800893e:	4770      	bx	lr
